from datetime import datetime
import asyncio
import aiogram
import random
import re
import pytz
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ParseMode
from aiogram.types.message import ContentType
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from configparser import ConfigParser
from pymongo import MongoClient
import motor.motor_asyncio
import json

import logging
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher.handler import CancelHandler, current_handler

cluster = motor.motor_asyncio.AsyncIOMotorClient("mongodb+srv://Admin:T8Lylcpso9jNs5Yw@cluster0.1t9opzs.mongodb.net/RandomBot?retryWrites=true&w=majority")
user_collections = cluster.RandomBot.user
key_collection = cluster.RandomBot.key
contests_collection = cluster.RandomBot.contests
promo_collection = cluster.RandomBot.promo

timezone = pytz.timezone('Europe/Kiev')
current_time = datetime.now(timezone)
current_date_time = current_time.strftime('%Y-%m-%d %H:%M:%S')

config = ConfigParser()
config.read('private/.env')

BOT_TOKEN = config.get('BOT', 'TOKEN')
PAYMENTS_TOKEN = config.get('PAYMENTS', 'PAYMENTS_TOKEN')

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

class MenuCategories(StatesGroup):
    main_menu = State()
    key = State()
    uses = State()
    waiting_for_key = State()
    search = State()
    id_check = State()
    search_check = State()
    contest_search_profile = State()

class CreateContestState(StatesGroup):
    name = State()
    description = State()
    winners = State()
    end_date = State()

class ChangeContestState(StatesGroup):
    name_change = State()
    description_change = State()
    winners_change = State()
    date_change = State()

def format_participants(members):
    if members % 10 == 1 and members % 100 != 11:
        return "—É—á–∞—Å—Ç–Ω–∏–∫"
    elif 2 <= members % 10 <= 4 and (members % 100 < 10 or members % 100 >= 20):
        return "—É—á–∞—Å—Ç–Ω–∏–∫–∞"
    else:
        return "—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"

async def add_user(user_id):
    current_date = datetime.now(timezone).strftime("%Y-%m-%d")
    user_data = {
        "_id": user_id,
        "creation_date": current_date,
        "participation": 0,
        "wins": 0,
        "status": "–ù–æ–≤–∏—á–æ–∫ üÜï",
        "keys": 0,
        "ban_members": []
    }
    user_collections.insert_one(user_data)

async def update_status(user_id):
    user_data = await user_collections.find_one({"_id": user_id})
    status = user_data.get("status")
    if status == "–°–æ–∑–¥–∞—Ç–µ–ª—å üé≠" or status == "–¢–µ—Å—Ç–µ—Ä ‚ú®" or status == "–ê–¥–º–∏–Ω üöó":
        return  # –ù–µ –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–π–¥–∏

    wins = user_data.get("wins", 0)
    participation = user_data.get("participation", 0)

    if wins == 1:
        status = "–ù–∞—á–∏–Ω–∞—é—â–∏–π üç•"
    elif wins == 5:
        status = "–Æ–Ω—ã–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å ü•Æ"
    elif wins == 10:
        status = "–ú–æ–ª–æ–¥—á–∏–∫ üßã"
    elif wins == 15:
        status = "–£–¥–∞—á–ª–∏–≤—ã–π ü§û"
    elif wins == 25:
        status = "–õ–∞–∫–µ—Ä üçÄ"
    elif wins == 50:
        status = "–£–Ω–∏–∫—É–º ‚ôæÔ∏è"
    elif participation == 5:
        status = "–ù–∞—á–∞–ª–æ –ø–æ–ª–æ–∂–µ–Ω–æ üç§"
    elif participation == 15:
        status = "–ê–∫—Ç–∏–≤–Ω—ã–π ü¶à"
    elif participation == 25:
        status = "–ë–∞—Ç–∞—Ä–µ–π–∫–∞ üîã"
    elif participation == 50:
        status = "–°–º–æ—Ç—Ä—è—â–∏–π üëÄ"
    elif participation == 100:
        status = "–ù–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–π üß≠"
    else:
        return  # –ù–µ –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–∏ –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ

    await user_collections.update_one({"_id": user_id}, {"$set": {"status": status}})

# Get the bot's username from the bot instance
async def get_bot_username() -> str:
    bot_info = await bot.get_me()
    return bot_info.username

# Now you can generate the start link using the bot's username
async def generate_start_link(contest_id):
    bot_username = await get_bot_username()
    start_link = f"t.me/{bot_username}?start={contest_id}"
    return start_link

async def create_contest(contest_id, user_id, contest_name, contest_description, winners, end_date, start_link):
    await contests_collection.insert_one({
        "_id": int(contest_id),
        "owner_id": user_id,
        "contest_name": contest_name,
        "contest_description": contest_description,
        "winners": int(winners),
        "end_date": str(end_date),
        "members": [],
        "contest_winners": [],
        "ban_members": [],
        "join_date": [],
        "start_link": start_link,
        "ended": "False"
    })

async def update_contest_members(contest_id, user_id):
    await contests_collection.update_one(
        {"_id": int(contest_id)},
        {"$addToSet": {"members": user_id}}
    )

async def update_contest_date(contest_id):
    current_date = datetime.now(timezone).strftime("%Y-%m-%d")

    await contests_collection.update_one(
        {"_id": int(contest_id)},
        {"$addToSet": {"join_date": current_date}}
    )

async def update_contest_ban_members(contest_id, user_id):
    await contests_collection.update_one(
        {"_id": int(contest_id)},
        {"$addToSet": {"ban_members": user_id}}
    )

async def update_profile_ban_members(profile_user_id, user_id):
    await user_collections.update_one(
        {"_id": int(profile_user_id)},
        {"$addToSet": {"ban_members": user_id}}
    )

async def update_win_contest_members(contest_id, user_id):
    await contests_collection.update_one(
        {"_id": int(contest_id)},
        {"$addToSet": {"contest_winners": user_id}}
    )

async def del_profile_ban_members(profile_user_id, user_id):
    await user_collections.update_one(
        {"_id": int(profile_user_id)},
        {"$pull": {"ban_members": user_id}}
    )

def generate_key(length=16):
    characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    key = ''.join(random.choice(characters) for _ in range(length))
    return key

async def add_key(key, uses):
    key_data = {
        "key": key,
        "uses": uses,
    }
    await key_collection.insert_one(key_data)

async def buy_key(key, uses, email, user_id):
    key_data = {
        "key": key,
        "uses": int(uses),
        "email": email,
        "user_id": int(user_id),
        "buy": "True"
    }
    await key_collection.insert_one(key_data)

async def get_username(user_id):
    # Use the get_chat method to get the user's information
    user = await bot.get_chat(user_id)

    # Access the username property of the User object
    username = user.username

    return username

async def get_ban_username(user_id):
    # Use the get_chat method to get the user's information
    user = await bot.get_chat(user_id)

    # Access the username property of the User object
    username = user.username

    return username

async def get_username_winners(user):
    # Use the get_chat method to get the user's information
    user_name = await bot.get_chat(user)

    # Access the username property of the User object
    username = user_name.username

    return username

async def show_members(callback_query, contest_id, current_page):
    # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
    contest = await contests_collection.find_one({"_id": int(contest_id)})
    message_id = change_message_id[-1]

    members = contest.get("members")
    participants_word = format_participants(len(members))
    result_message = f"<b>üèØ –í—Å–µ–≥–æ</b> <code>{len(members)}</code> <b>{participants_word}</b> ‚Äî <b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}</b>\n\n"

    keyboard = types.InlineKeyboardMarkup()

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    per_page = 25
    start_index = (current_page - 1) * per_page
    end_index = current_page * per_page
    page_members = members[start_index:end_index] if start_index < len(members) else []
    for idx, user_id in enumerate(page_members, start=start_index + 1):
        username = await get_username(user_id)
        if username:
            username = username.replace("_", "&#95;")
        result_message += f"{idx}. @{username} (<code>{user_id}</code>)\n"

    # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è
    prev_button = types.InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=f'members_{contest_id}_prev_{current_page}')
    next_button = types.InlineKeyboardButton(text='–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è', callback_data=f'members_{contest_id}_next_{current_page}')
    contest_profile = types.InlineKeyboardButton(text='–î–µ—Ç–∞–ª—å–Ω–µ–µ üß∂', callback_data=f'contest_search_profile_{contest_id}')
    banned_members = types.InlineKeyboardButton(text='–ó–∞–±–ª–æ–∫. —É—á–∞—Å—Ç–Ω–∏–∫–∏ ‚ÄºÔ∏è', callback_data=f'ban_members_{contest_id}_None_1')
    back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data='change')

    # Add both buttons if there are both previous and next pages
    if current_page > 1 and end_index < len(members):
        keyboard.row(prev_button, next_button)
    # Add only the previous button if there are no more pages
    elif current_page > 1:
        keyboard.row(prev_button)
    # Add only the next button if this is the first page
    elif end_index < len(members):
        keyboard.row(next_button)

    if len(members) >= 1:
        keyboard.row(banned_members, contest_profile)
    keyboard.row(back)

    reply = await bot.edit_message_text(result_message, callback_query.message.chat.id, message_id,
                                        parse_mode="HTML",
                                        reply_markup=keyboard)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    change_message_id.append(reply.message_id)

async def show_ban_members(callback_query, contest_id, current_page):
    # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
    contest = await contests_collection.find_one({"_id": int(contest_id)})
    message_id = change_message_id[-1]

    ban_members = contest.get("ban_members")
    result_message = f"<b>‚ÄºÔ∏è–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ ‚Äî –°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}</b>\n\n"

    keyboard = types.InlineKeyboardMarkup()

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    per_page = 25
    start_index = (current_page - 1) * per_page
    end_index = current_page * per_page
    page_members = ban_members[start_index:end_index] if start_index < len(ban_members) else []
    for idx, user_id in enumerate(page_members, start=start_index + 1):
        username = await get_username(user_id)
        if username:
            username = username.replace("_", "&#95;")
        result_message += f"{idx}. @{username} (<code>{user_id}</code>)\n"

    # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è
    prev_button = types.InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=f'members_{contest_id}_prev_{current_page}')
    next_button = types.InlineKeyboardButton(text='–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è', callback_data=f'members_{contest_id}_next_{current_page}')
    contest_profile = types.InlineKeyboardButton(text='–î–µ—Ç–∞–ª—å–Ω–µ–µ üß∂', callback_data=f'contest_search_profile_{contest_id}')
    back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data='change')

    # Add both buttons if there are both previous and next pages
    if current_page > 1 and end_index < len(ban_members):
        keyboard.row(prev_button, next_button)
    # Add only the previous button if there are no more pages
    elif current_page > 1:
        keyboard.row(prev_button)
    # Add only the next button if this is the first page
    elif end_index < len(ban_members):
        keyboard.row(next_button)

    if len(ban_members) < 1:
        result_message += "<code>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ‚ÄºÔ∏è</code>"
    else:
        keyboard.row(contest_profile)
    keyboard.row(back)

    reply = await bot.edit_message_text(result_message, callback_query.message.chat.id, message_id,
                                        parse_mode="HTML",
                                        reply_markup=keyboard)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    change_message_id.append(reply.message_id)

async def show_user_history(callback_query, user_id, current_page):
    # Retrieve contests where the user with the specified user_id was a member
    user_history = await contests_collection.find({"members": user_id}).to_list(length=None)

    if user_history:
        # Your logic to display user history based on the current_page
        per_page = 5
        start_index = (current_page - 1) * per_page
        end_index = current_page * per_page
        page_history = user_history[start_index:end_index] if start_index < len(user_history) else []
        all_pages = len(user_history) // per_page

        if all_pages == 0:
            all_pages = 1
        else:
            pass
        # Create the message containing the user history for the current page
        result_message = f"*üìí –ò—Å—Ç–æ—Ä–∏—è —É—á–∞—Å—Ç–∏–π - –°—Ç—Ä–∞–Ω–∏—Ü–∞* `{current_page}` –∏–∑ `{all_pages}`:\n\n"
        for idx, contest in enumerate(page_history, start=start_index + 1):
            # Extract relevant information about the contest, e.g., its title, end date, etc.
            contest_name = contest.get("contest_name")
            contest_id = contest.get("_id")
            contest_end_date = contest.get("end_date")
            contest_members = contest.get("members")
            if contest_name == str(contest_id):
                # Format the contest information as needed
                result_message += f"                            *= {idx} =*\n" \
                                  f"*ü™Å –ò–º—è:* `{contest_name}`\n" \
                                  f"*üë§ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* `{len(contest_members)}`\n" \
                                  f"*üóìÔ∏è –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:* `{contest_end_date}`\n\n"
            else:
                # Format the contest information as needed
                result_message += f"                            *= {idx} =*\n" \
                                  f"*ü™Å –ò–º—è:* `{contest_name}`\n" \
                                  f"*üßä –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:* `{contest_id}`\n" \
                                  f"*üë§ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* `{len(contest_members)}`\n" \
                                  f"*üóìÔ∏è –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:* `{contest_end_date}`\n\n"

        # Calculate the total number of pages
        total_pages = (len(user_history) + per_page - 1) // per_page

        # Create the inline keyboard with pagination buttons
        keyboard = types.InlineKeyboardMarkup()
        prev_button = types.InlineKeyboardButton(text='‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è', callback_data=f'history_{user_id}_prev_{current_page}')
        next_button = types.InlineKeyboardButton(text='–°–ª–µ–¥—É—â–∞—è ‚ñ∂Ô∏è', callback_data=f'history_{user_id}_next_{current_page}')

        if current_page > 1 and end_index < total_pages:
            keyboard.row(prev_button, next_button)
        elif current_page > 1:
            keyboard.row(prev_button)
        elif current_page < total_pages:
            keyboard.row(next_button)
        back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ ü•è', callback_data='profile_edit')
        keyboard.row(back)

        # Send or edit the message with pagination
        reply = await bot.edit_message_text(result_message, callback_query.message.chat.id,
                                            callback_query.message.message_id, parse_mode="Markdown", reply_markup=keyboard)
        profile_messages.append(reply.message_id)
    else:
        result_message = "*üìí –£ –≤–∞—Å –Ω–µ –±—ã–ª–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —É—á–∞—Å—Ç–∏–π!*"
        keyboard = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ ü•è', callback_data='profile_edit')
        keyboard.row(back)

        # Send or edit the message with pagination
        reply = await bot.edit_message_text(result_message, callback_query.message.chat.id,
                                            callback_query.message.message_id, parse_mode="Markdown", reply_markup=keyboard)
        profile_messages.append(reply.message_id)

async def promo_members(chat_id, promo, current_page):
    # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
    promo_code = await promo_collection.find_one({"_id": promo})

    members = promo_code.get("active_members")
    result_message = f"<b>üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞</b> <code>{promo}</code>:\n\n" \
                     f"                                   <b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}</b>\n\n"

    keyboard = types.InlineKeyboardMarkup()

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    per_page = 25
    start_index = (current_page - 1) * per_page
    end_index = current_page * per_page
    page_members = members[start_index:end_index] if start_index < len(members) else []
    for idx, user_id in enumerate(page_members, start=start_index + 1):
        username = await get_username(user_id)
        if username:
            username = username.replace("_", "&#95;")
        result_message += f"<b>{idx}.</b> @{username} <b>(</b><code>{user_id}</code><b>)</b>\n"

    # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è
    prev_button = types.InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=f'promo_{promo}_prev_{current_page}')
    next_button = types.InlineKeyboardButton(text='–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è', callback_data=f'promo_{promo}_next_{current_page}')
    back = types.InlineKeyboardButton(text='–í—ã–ø–æ–ª–µ–Ω–µ–Ω–æ ‚úÖ', callback_data='done')

    # Add both buttons if there are both previous and next pages
    if current_page > 1 and end_index < len(members):
        keyboard.row(prev_button, next_button)
    # Add only the previous button if there are no more pages
    elif current_page > 1:
        keyboard.row(prev_button)
    # Add only the next button if this is the first page
    elif end_index < len(members):
        keyboard.row(next_button)
    keyboard.row(back)
    uses = promo_code.get("uses")
    result_message += f"\n\n<b>üß™ –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π:</b> <code>{uses}</code>"
    # Send the formatted message with the keyboard
    reply = await bot.send_message(chat_id, result_message,
                                   parse_mode="HTML",
                                   reply_markup=keyboard)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    promo_message_id.append(reply.message_id)

async def handle_promo_code(promo_code: str, user_id: int):
    promo = await promo_collection.find_one({"_id": promo_code})

    if promo:
        active_members = promo.get("active_members", [])

        if user_id in active_members:
            await bot.send_message(user_id, "*‚ùå –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥.*", parse_mode="Markdown")
        else:
            uses = promo.get("uses", 0)
            if uses > 0:
                await activate_promo_code(promo_code, user_id)
            else:
                await bot.send_message(user_id, "*‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.*", parse_mode="Markdown")
    else:
        await bot.send_message(user_id, "*–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. ‚ùå*", parse_mode="Markdown")

async def create_promo_codes(promo_name: str, quantity: int, visible: str, prize: str, user_id: int):
    promo_code = generate_promo_code()

    existing_promo = await promo_collection.find_one({"_id": promo_name})
    if existing_promo:
        await bot.send_message(user_id, f"*‚ùå –ü—Ä–æ–º–æ–∫–æ–¥* `{promo_name}` *—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!*", parse_mode="Markdown")
        return

    if promo_name == "random":
        promo = {
            "_id": promo_code,
            "user_id": user_id,
            "uses": quantity,
            "prize": prize,
            "active_members": [],
            "visible": visible
        }
        if visible == "False":
            message = f"*üß™ –ü—Ä–æ–º–æ–∫–æ–¥* `{promo_code}` *–±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*\n" \
                      f"*üé¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:* `{quantity}`\n"\
                      f"*ü§´ –°—Ç–∞—Ç—É—Å:* `—Å–∫—Ä—ã—Ç`\n"
            if prize == "key":
                message = f"*üß™ –ü—Ä–æ–º–æ–∫–æ–¥* `{promo_code}` *–±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*\n" \
                       f"*üé¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:* `{quantity}`\n" \
                       f"*ü§´ –°—Ç–∞—Ç—É—Å:* `—Å–∫—Ä—ã—Ç`\n" \
                       f"*üéÅ –ù–∞–≥—Ä–∞–¥–∞:* `+1 –∫–ª—é—á`"
            else:
                message = f"*üß™ –ü—Ä–æ–º–æ–∫–æ–¥* `{promo_code}` *–±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*\n" \
                       f"*üé¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:* `{quantity}`\n"
        else:
            if prize == "key":
                message = f"*üß™ –ü—Ä–æ–º–æ–∫–æ–¥* `{promo_code}` *–±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*\n" \
                       f"*üé¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:* `{quantity}`\n" \
                       f"*ü§´ –°—Ç–∞—Ç—É—Å:* `—Å–∫—Ä—ã—Ç`\n" \
                       f"*üéÅ –ù–∞–≥—Ä–∞–¥–∞:* `+1 –∫–ª—é—á`"
            else:
                message = f"*üß™ –ü—Ä–æ–º–æ–∫–æ–¥* `{promo_code}` *–±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*\n" \
                       f"*üé¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:* `{quantity}`\n"
    else:
        promo = {
            "_id": promo_name,
            "user_id": user_id,
            "uses": quantity,
            "prize": prize,
            "active_members": [],
            "visible": visible
        }
        if visible == "False":
            message = f"*üß™ –ü—Ä–æ–º–æ–∫–æ–¥* `{promo_name}` *–±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*\n" \
                      f"*üé¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:* `{quantity}`\n"\
                      f"*ü§´ –°—Ç–∞—Ç—É—Å:* `—Å–∫—Ä—ã—Ç`\n"
            if prize == "key":
                message = f"*üß™ –ü—Ä–æ–º–æ–∫–æ–¥* `{promo_name}` *–±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*\n" \
                       f"*üé¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:* `{quantity}`\n" \
                       f"*ü§´ –°—Ç–∞—Ç—É—Å:* `—Å–∫—Ä—ã—Ç`\n" \
                       f"*üéÅ –ù–∞–≥—Ä–∞–¥–∞:* `+1 –∫–ª—é—á`"
            else:
                message = f"*üß™ –ü—Ä–æ–º–æ–∫–æ–¥* `{promo_name}` *–±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*\n" \
                       f"*üé¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:* `{quantity}`\n"
        else:
            if prize == "key":
                message = f"*üß™ –ü—Ä–æ–º–æ–∫–æ–¥* `{promo_name}` *–±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*\n" \
                       f"*üé¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:* `{quantity}`\n" \
                       f"*ü§´ –°—Ç–∞—Ç—É—Å:* `—Å–∫—Ä—ã—Ç`\n" \
                       f"*üéÅ –ù–∞–≥—Ä–∞–¥–∞:* `+1 –∫–ª—é—á`"
            else:
                message = f"*üß™ –ü—Ä–æ–º–æ–∫–æ–¥* `{promo_name}` *–±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*\n" \
                       f"*üé¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:* `{quantity}`\n"


    await promo_collection.insert_one(promo)

    await bot.send_message(user_id, text=message, parse_mode="Markdown")

async def get_active_promo_codes():
    active_promos = await promo_collection.find({"visible": "True"}).to_list(length=None)

    if active_promos:
        promo_ids = [f"*{idx + 1}.* `{promo['_id']}`" for idx, promo in enumerate(active_promos)]
        promo_list = "\n".join(promo_ids)
        return promo_list
    else:
        return None

async def activate_promo_code(promo_code: str, user_id: int):
    await promo_collection.update_one({"_id": promo_code}, {"$push": {"active_members": user_id}})
    await promo_collection.update_one({"_id": promo_code}, {"$inc": {"uses": -1}})

    promo = await promo_collection.find_one({"_id": promo_code})
    prize = promo.get("prize")
    if prize == "None":
        pass
    elif prize == "key":
        await user_collections.update_one({"_id": user_id}, {"$inc": {"keys": 1}})
    else:
        pass
    await bot.send_message(user_id, f"*–ü—Ä–æ–º–æ–∫–æ–¥* `{promo_code}` *–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. ‚úÖ*", parse_mode="Markdown")

def generate_promo_code():
    promo_length = 8  # –î–ª–∏–Ω–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    allowed_characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    return ''.join(random.choices(allowed_characters, k=promo_length))

# –û–±—ä—è–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
contest_name = None
contest_id = None
contest_description = None
winners = None
end_date = None

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π
profile_messages = []
generate_message = []
contest_messages = []
change_message_id = []
permanent_message_id = []
promo_message_id = []

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    if message.chat.type != 'private':
        await bot.send_message(message.chat.id, "*‚ùå –ö–æ–º–∞–Ω–¥–∞ /start –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.*", parse_mode="Markdown")
        return

    user_id = message.from_user.id
    existing_user = await user_collections.find_one({"_id": user_id})

    if existing_user:
        # –ö–æ–¥ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        contest_id = message.get_args()
        if contest_id:
            contest = await contests_collection.find_one({"_id": int(contest_id)})
            if contest:
                owner_id = contest.get("owner_id")
                owner_data = await user_collections.find_one({"_id": int(owner_id)})

            if contest:
                ended = contest.get("ended")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ "ended", –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False

                if ended == "True":
                    # –ö–æ–¥, –µ—Å–ª–∏ –∫–æ–Ω–∫—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω
                    end_message = await message.reply("*–£–ø—Å... –ö–æ–Ω–∫—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω‚ùóÔ∏è*", parse_mode="Markdown")
                    await asyncio.sleep(3.5)
                    await bot.delete_message(chat_id=message.chat.id, message_id=end_message.message_id)
                else:
                    if user_id in contest['members']:
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ–Ω–∫—É—Ä—Å–µ
                        registered = await message.reply("*‚ÄºÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –∫–æ–Ω–∫—É—Ä—Å–µ.*",
                                                         parse_mode="Markdown")
                        await asyncio.sleep(3.5)
                        await bot.delete_message(chat_id=message.chat.id, message_id=registered.message_id)
                        keyboard = types.InlineKeyboardMarkup()
                        active_drawings = types.InlineKeyboardButton(text='üîã –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏',
                                                                     callback_data='active_drawings')
                        profile = types.InlineKeyboardButton(text='ü•Ç –ü—Ä–æ—Ñ–∏–ª—å', callback_data='profile')
                        support = types.InlineKeyboardButton(text='üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='support')
                        keyboard.row(active_drawings, support)
                        keyboard.row(profile)

                        await message.reply(
                            "*üé≠ –†–∞–¥—ã –≤–∞—Å —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å!*\n\n*ü™∂ –ö–∞–∫ –≤—Å–µ–≥–¥–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:*",
                            parse_mode="Markdown", reply_markup=keyboard)
                    elif user_id in contest['ban_members']:
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ–Ω–∫—É—Ä—Å–µ
                        await message.reply("*‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –∫–æ–Ω–∫—É—Ä—Å–µ.*",
                                                    parse_mode="Markdown")
                    elif user_id in owner_data['ban_members']:
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ–Ω–∫—É—Ä—Å–µ
                        await message.reply("*‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.*",
                                                    parse_mode="Markdown")
                    else:
                        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
                        await update_contest_members(contest_id, user_id)
                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è participation –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        await user_collections.update_one({"_id": user_id}, {"$inc": {"participation": 1}})
                        # –ö–æ–¥ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω–∫—É—Ä—Å
                        keyboard = types.InlineKeyboardMarkup()
                        active_drawings = types.InlineKeyboardButton(text='üîã –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏', callback_data='active_drawings')
                        profile = types.InlineKeyboardButton(text='ü•Ç –ü—Ä–æ—Ñ–∏–ª—å', callback_data='profile')
                        support = types.InlineKeyboardButton(text='üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='support')
                        keyboard.row(active_drawings, support)
                        keyboard.row(profile)

                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        await update_status(user_id)
                        await update_contest_date(contest_id)
                        await message.reply(
                            f"*üé≠ –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–Ω–∫—É—Ä—Å* `{contest_id}`*!*\n\n"
                            "*ü™∂ –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:*",
                            parse_mode="Markdown", reply_markup=keyboard
                        )
                    return
            else:
                # –ö–æ–¥, –µ—Å–ª–∏ –∫–æ–Ω–∫—É—Ä—Å —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω
                true_contest = await message.reply("*–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. ‚ùå*",
                                                   parse_mode="Markdown")
                await asyncio.sleep(3)
                await bot.delete_message(chat_id=message.chat.id, message_id=true_contest.message_id)

        keyboard = types.InlineKeyboardMarkup()
        active_drawings = types.InlineKeyboardButton(text='üîã –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏', callback_data='active_drawings')
        profile = types.InlineKeyboardButton(text='ü•Ç –ü—Ä–æ—Ñ–∏–ª—å', callback_data='profile')
        support = types.InlineKeyboardButton(text='üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='support')
        keyboard.row(active_drawings, support)
        keyboard.row(profile)

        await message.reply(
            "*üé≠ –†–∞–¥—ã –≤–∞—Å —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å!*\n\n*ü™∂ –ö–∞–∫ –≤—Å–µ–≥–¥–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:*",
            parse_mode="Markdown", reply_markup=keyboard)
    else:
        await add_user(user_id)
        # –ö–æ–¥ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        contest_id = message.get_args()
        if contest_id:
            contest = await contests_collection.find_one({"_id": contest_id})
            if contest:
                if user_id in contest['members']:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ–Ω–∫—É—Ä—Å–µ
                    registered = await message.reply("*‚ÄºÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –∫–æ–Ω–∫—É—Ä—Å–µ.*", parse_mode="Markdown")
                    await asyncio.sleep(3.5)
                    await bot.delete_message(chat_id=message.chat.id, message_id=registered.message_id)
                elif user_id in contest['ban_members']:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ–Ω–∫—É—Ä—Å–µ
                    await message.reply("*‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –∫–æ–Ω–∫—É—Ä—Å–µ.*",
                                                parse_mode="Markdown")
                else:
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
                    await update_contest_members(contest_id, user_id)
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è participation –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await user_collections.update_one({"_id": user_id}, {"$inc": {"participation": 1}})
                    # –ö–æ–¥ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω–∫—É—Ä—Å
                    keyboard = types.InlineKeyboardMarkup()
                    active_drawings = types.InlineKeyboardButton(text='üîã –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏', callback_data='active_drawings')
                    profile = types.InlineKeyboardButton(text='ü•Ç –ü—Ä–æ—Ñ–∏–ª—å', callback_data='profile')
                    support = types.InlineKeyboardButton(text='üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='support')
                    keyboard.row(active_drawings, support)
                    keyboard.row(profile)

                    await message.reply(
                        f"*üé≠ –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–Ω–∫—É—Ä—Å* `{contest_id}`*!*\n\n"
                        "*ü™∂ –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:*",
                        parse_mode="Markdown", reply_markup=keyboard
                    )
                    await update_status(user_id)
                    await update_contest_date(contest_id)
                    return
            else:
                # –ö–æ–¥, –µ—Å–ª–∏ –∫–æ–Ω–∫—É—Ä—Å —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω
                true_contest = await message.reply("*–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. ‚ùå*", parse_mode="Markdown")
                await asyncio.sleep(3.5)
                await bot.delete_message(chat_id=message.chat.id, message_id=true_contest.message_id)

        keyboard = types.InlineKeyboardMarkup()
        active_drawings = types.InlineKeyboardButton(text='üîã –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏', callback_data='active_drawings')
        profile = types.InlineKeyboardButton(text='ü•Ç –ü—Ä–æ—Ñ–∏–ª—å', callback_data='profile')
        support = types.InlineKeyboardButton(text='üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='support')
        keyboard.row(active_drawings, support)
        keyboard.row(profile)

        await message.reply(
            "*üé≠ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–Ω–∫—É—Ä—Å –±–æ—Ç–∞!*\n\n*ü™∂ –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:*",
            parse_mode="Markdown", reply_markup=keyboard)

# –í–µ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞
@dp.message_handler(commands=['generate'])
async def generate_command(message: types.Message):

    if message.chat.type != 'private':
        await bot.send_message(message.chat.id, "*‚ùå –ö–æ–º–∞–Ω–¥–∞ /generate –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.*", parse_mode="Markdown")
        return

    user_id = message.from_user.id
    user_data = await user_collections.find_one({"_id": user_id})

    if user_data and ("status" in user_data and user_data["status"] in ["–ê–¥–º–∏–Ω üöó", "–°–æ–∑–¥–∞—Ç–µ–ª—å üé≠"]):
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º (—á–∏—Å–ª–æ–º)
        if len(message.get_args()) > 0:
            arg = message.get_args()
            if re.match("^[0-9]+$", arg):
                uses = int(arg)
                if uses >= 0 and uses <= 100:
                    key = generate_key()

                    await add_key(key, uses)

                    await message.reply(f"*üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–ª—é—á:* `{key}`\n*üß¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:* `{uses}`",
                                        parse_mode="Markdown")
                else:
                    int_digit = await bot.send_message(message.chat.id,
                                                       "*‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100.*",
                                                       parse_mode="Markdown")
                    await asyncio.sleep(3)
                    await bot.delete_message(chat_id=message.chat.id, message_id=int_digit.message_id)
                    return
            else:
                int_digit = await bot.send_message(message.chat.id,
                                                   "*‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.*",
                                                   parse_mode="Markdown")
                await asyncio.sleep(3)
                await bot.delete_message(chat_id=message.chat.id, message_id=int_digit.message_id)
                return
        else:
            reply = await message.reply("*–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ:* `–û—Ç–º–µ–Ω–∞`\n\n*ü¶¥ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∫–ª—é—á–∞:*", parse_mode="Markdown")

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            generate_message.append(reply.message_id)

            await MenuCategories.uses.set()
    else:
        # # –ö–æ–¥ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # keyboard = types.InlineKeyboardMarkup()
        # buy_key = types.InlineKeyboardButton(text='–ö—É–ø–∏—Ç—å –∫–ª—é—á üîë', callback_data='buy_key')
        # keyboard.row(buy_key)

        await message.reply("*–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π. üö´*", parse_mode="Markdown", reply_markup=keyboard)

@dp.message_handler(state=MenuCategories.uses)
async def process_uses(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞" or message.text == "–û—Ç–º–µ–Ω–∞":
        await state.finish()
        await bot.send_message(message.chat.id, "*‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.*", parse_mode="Markdown")
        return
    global generate_message

    arg = message.text

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.delete_message(message.chat.id, message.message_id)

    if re.match("^[0-9]+$", arg):
        uses = int(arg)
        if uses >= 0 and uses <= 100:
            key = generate_key()

            await state.finish()

            await add_key(key, uses)

            # Get the message ID from the contest_messages list
            message_id = generate_message[-1]
            text = f"*üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–ª—é—á:* `{key}`\n*üß¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:* `{uses}`"

            await bot.edit_message_text(text, message.chat.id, message_id, parse_mode="Markdown")
        else:
            int_digit = await bot.send_message(message.chat.id,
                                               "*‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100.*",
                                               parse_mode="Markdown")
            await asyncio.sleep(3)
            await bot.delete_message(chat_id=message.chat.id, message_id=int_digit.message_id)
            return
    else:
        int_digit = await bot.send_message(message.chat.id,
                                           "*‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.*",
                                           parse_mode="Markdown")
        await asyncio.sleep(3)
        await bot.delete_message(chat_id=message.chat.id, message_id=int_digit.message_id)
        return

# –í–µ—Ç–∫–∞ –∫–æ–Ω–∫—É—Ä—Å–æ–≤
@dp.message_handler(commands=['contest'])
async def start_contest_command(message: types.Message):
    if message.chat.type != 'private':
        await bot.send_message(message.chat.id, "*‚ùå –ö–æ–º–∞–Ω–¥–∞ /contest –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.*", parse_mode="Markdown")
        return

    global contest_messages

    user_id = message.from_user.id
    user_data = await user_collections.find_one({"_id": user_id})

    if user_data and (("status" in user_data and user_data["status"] in ["–¢–µ—Å—Ç–µ—Ä ‚ú®", "–ê–¥–º–∏–Ω üöó", "–°–æ–∑–¥–∞—Ç–µ–ª—å üé≠"]) or int(user_data.get("keys", 0)) > 0):

        # –ö–æ–¥ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard = types.InlineKeyboardMarkup()
        search = types.InlineKeyboardButton(text='üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data='search')
        create = types.InlineKeyboardButton(text='üé´ –°–æ–∑–¥–∞—Ç—å', callback_data='create')
        change = types.InlineKeyboardButton(text='üç≠ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data='change')
        keyboard.row(change, search)
        keyboard.row(create)

        reply = await message.reply(
            "*üç° –†–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞–º–∏!*\n\n*‚ú® –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–æ–º –∏–ª–∏ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è:*",
            parse_mode="Markdown", reply_markup=keyboard)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        contest_messages.append(reply.message_id)
    else:
        # –ö–æ–¥ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard = types.InlineKeyboardMarkup()
        input_key = types.InlineKeyboardButton(text='üîë –í–≤–µ—Å—Ç–∏ –∫–ª—é—á', callback_data='input_key')
        keyboard.row(input_key)

        reply = await message.reply(
            "*üëÄ –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –∏ –≤–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ–Ω–∫—É—Ä—Å–æ–≤:*",
            parse_mode="Markdown", reply_markup=keyboard)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        contest_messages.append(reply.message_id)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'input_key')
async def input_key_callback(callback_query: types.CallbackQuery, state: FSMContext):
    keyboard = types.InlineKeyboardMarkup()
    input_key_decline = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data='input_key_decline')
    keyboard.row(input_key_decline)

    # Get the message ID from the contest_messages list
    message_id = contest_messages[-1]
    text = "*üîë –í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ–Ω–∫—É—Ä—Å–æ–≤:*"

    reply = await bot.edit_message_text(text, callback_query.message.chat.id, message_id, parse_mode="Markdown",
                                reply_markup=keyboard)

    # Store the message ID in the contest_messages list
    contest_messages.append(reply.message_id)

    # Set the state to waiting_for_key
    await MenuCategories.waiting_for_key.set()

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'input_key_decline', state=MenuCategories.waiting_for_key)
async def input_key_decline_callback(callback_query: types.CallbackQuery, state: FSMContext):
    global contest_messages

    # Clear the waiting state
    await state.finish()

    user_id = callback_query.from_user.id
    user_data = await user_collections.find_one({"_id": user_id})

    if user_data and (("status" in user_data and user_data["status"] in ["–¢–µ—Å—Ç–µ—Ä ‚ú®", "–ê–¥–º–∏–Ω üöó", "–°–æ–∑–¥–∞—Ç–µ–ª—å üé≠"]) or int(
            user_data.get("keys", 0)) > 0):
        # Code for existing user
        keyboard = types.InlineKeyboardMarkup()
        search = types.InlineKeyboardButton(text='üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data='search')
        create = types.InlineKeyboardButton(text='üé´ –°–æ–∑–¥–∞—Ç—å', callback_data='create')
        change = types.InlineKeyboardButton(text='üç≠ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data='change')
        keyboard.row(change, search)
        keyboard.row(create)

        # Get the message ID from the contest_messages list
        message_id = contest_messages[-1]
        text = "*üç° –†–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞–º–∏!*\n\n*‚ú® –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–æ–º –∏–ª–∏ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è:*"

        reply = await bot.edit_message_text(text, callback_query.message.chat.id, message_id, parse_mode="Markdown",
                                            reply_markup=keyboard)

        # Update the message ID in the contest_messages list
        contest_messages[-1] = reply.message_id
    else:
        # Code for existing user
        keyboard = types.InlineKeyboardMarkup()
        input_key = types.InlineKeyboardButton(text='üîë –í–≤–µ—Å—Ç–∏ –∫–ª—é—á', callback_data='input_key')
        keyboard.row(input_key)

        # Get the message ID from the contest_messages list
        message_id = contest_messages[-1]
        text = "*üëÄ –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –∏ –≤–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ–Ω–∫—É—Ä—Å–æ–≤:*"

        reply = await bot.edit_message_text(text, callback_query.message.chat.id, message_id, parse_mode="Markdown",
                                            reply_markup=keyboard)

        # Update the message ID in the contest_messages list
        contest_messages[-1] = reply.message_id

@dp.message_handler(state=MenuCategories.waiting_for_key)
async def process_key(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–ª—é—á–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    key = message.text

    user_id = message.from_user.id  # Obtain the user ID from the message object

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.delete_message(message.chat.id, message.message_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    key_data = await key_collection.find_one({"key": key})

    if key_data:
        uses = key_data.get("uses", 0)
        if uses > 0:
            # –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è uses –Ω–∞ 1
            await key_collection.update_one({"key": key}, {"$inc": {"uses": -1}})

            # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è keys –Ω–∞ 1 –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ user_collections
            user = await user_collections.find_one({"_id": user_id})
            if user and isinstance(user.get("keys"), int):
                await user_collections.update_one({"_id": user_id}, {"$inc": {"keys": 1}})
            else:
                await user_collections.update_one({"_id": user_id}, {"$set": {"keys": 1}})

            # –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            message_id = contest_messages[-1]

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = types.InlineKeyboardMarkup()
            search = types.InlineKeyboardButton(text='üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data='search')
            create = types.InlineKeyboardButton(text='üé´ –°–æ–∑–¥–∞—Ç—å', callback_data='create')
            change = types.InlineKeyboardButton(text='üç≠ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data='change')
            keyboard.row(change, search)
            keyboard.row(create)
            text = "*üç° –†–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞–º–∏!*\n\n*‚ú® –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–æ–º –∏–ª–∏ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è:*"

            await bot.edit_message_text(text, message.chat.id, message_id, parse_mode="Markdown", reply_markup=keyboard)
        else:
            wrong_key = await bot.send_message(message.chat.id, "*‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —ç—Ç–æ–≥–æ –∫–ª—é—á–∞ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–ª—é—á.*", parse_mode="Markdown")
            await asyncio.sleep(5)
            await bot.delete_message(chat_id=message.chat.id, message_id=wrong_key.message_id)
    else:
        wrong_key = await bot.send_message(message.chat.id, "*‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.*", parse_mode="Markdown")
        await asyncio.sleep(3)
        await bot.delete_message(chat_id=message.chat.id, message_id=wrong_key.message_id)

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–ª—é—á–∞
    await state.finish()

@dp.callback_query_handler(lambda query: query.data == 'continue_create')
async def continue_create_callback(query: types.CallbackQuery, state: FSMContext):
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º
    create_text = "*ü™Å –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–Ω–∫—É—Ä—Å–∞:*"

    keyboard = types.InlineKeyboardMarkup()
    skip_name = types.InlineKeyboardButton(text=' –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üö©', callback_data='skip_name')
    keyboard.row(skip_name)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ contest_messages
    message_id = contest_messages[-1]

    await bot.edit_message_text(create_text, query.message.chat.id, message_id, parse_mode="Markdown", reply_markup=keyboard)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∫–æ–Ω–∫—É—Ä—Å–∞
    await CreateContestState.name.set()

@dp.message_handler(state=CreateContestState.name)
async def process_name(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–º–µ–Ω–∏ –∫–æ–Ω–∫—É—Ä—Å–∞
    contest_name = message.text

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.delete_message(message.chat.id, message.message_id)

    if not contest_name:
        # –ï—Å–ª–∏ –∏–º—è –∫–æ–Ω–∫—É—Ä—Å–∞ –Ω–µ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è
        contest_name = str(random.randint(100000000, 999999999))

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∫–æ–Ω–∫—É—Ä—Å–∞
    contest_id = str(random.randint(100000000, 999999999))

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∫–æ–Ω–∫—É—Ä—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö)
    await state.update_data(contest_name=contest_name)
    await state.update_data(contest_id=contest_id)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —Ç–µ–∫—Å—Ç–æ–º
    skip_name_text = f"*üéóÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞:*"

    keyboard = types.InlineKeyboardMarkup()
    skip_description = types.InlineKeyboardButton(text=' –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üö©', callback_data='skip_description')
    keyboard.add(skip_description)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ contest_messages
    message_id = contest_messages[-1]

    await bot.edit_message_text(skip_name_text, message.chat.id, message_id, parse_mode="Markdown", reply_markup=keyboard)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞
    await CreateContestState.description.set()

@dp.callback_query_handler(lambda query: query.data == 'skip_name', state=CreateContestState.name)
async def skip_name_callback(query: types.CallbackQuery, state: FSMContext):
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∫–æ–Ω–∫—É—Ä—Å–∞
    contest_name = str(random.randint(100000000, 999999999))
    contest_id = contest_name

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∫–æ–Ω–∫—É—Ä—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö)
    await state.update_data(contest_name=contest_name)
    await state.update_data(contest_id=contest_id)
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —Ç–µ–∫—Å—Ç–æ–º
    skip_name_text = f"*üéóÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞:*"

    keyboard = types.InlineKeyboardMarkup()
    skip_description = types.InlineKeyboardButton(text=' –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üö©', callback_data='skip_description')
    keyboard.add(skip_description)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ contest_messages
    message_id = contest_messages[-1]

    await bot.edit_message_text(skip_name_text, query.message.chat.id, message_id, parse_mode="Markdown", reply_markup=keyboard)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞
    await CreateContestState.description.set()

@dp.message_handler(state=CreateContestState.description)
async def process_description(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞
    contest_description = message.text

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.delete_message(message.chat.id, message.message_id)

    if not contest_description:
        contest_description = "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç üö´"
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π)
    await state.update_data(description=contest_description)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —Ç–µ–∫—Å—Ç–æ–º
    skip_winners_text = f"*üéñÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤ –∫–æ–Ω–∫—É—Ä—Å–µ:*"

    keyboard = types.InlineKeyboardMarkup()
    skip_winners = types.InlineKeyboardButton(text=' –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üö©', callback_data='skip_winners')
    keyboard.add(skip_winners)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ contest_messages
    message_id = contest_messages[-1]

    await bot.edit_message_text(skip_winners_text, message.chat.id, message_id, parse_mode="Markdown", reply_markup=keyboard)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞
    await CreateContestState.winners.set()

@dp.callback_query_handler(lambda query: query.data == 'skip_description', state=CreateContestState.description)
async def skip_name_callback(query: types.CallbackQuery, state: FSMContext):
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞
    contest_description = "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç üö´"

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–æ–Ω–∫—É—Ä—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π)
    await state.update_data(description=contest_description)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —Ç–µ–∫—Å—Ç–æ–º
    skip_winners_text = f"*üéñÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤ –∫–æ–Ω–∫—É—Ä—Å–µ:*"

    keyboard = types.InlineKeyboardMarkup()
    skip_winners = types.InlineKeyboardButton(text=' –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üö©', callback_data='skip_winners')
    keyboard.add(skip_winners)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ contest_messages
    message_id = contest_messages[-1]

    await bot.edit_message_text(skip_winners_text, query.message.chat.id, message_id, parse_mode="Markdown", reply_markup=keyboard)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞
    await CreateContestState.winners.set()

@dp.message_handler(state=CreateContestState.winners)
async def process_description(message: types.Message, state: FSMContext):
    winners = message.text

    await bot.delete_message(message.chat.id, message.message_id)

    if not winners.isdigit():
        int_digit = await bot.send_message(message.chat.id, "*–ù—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! ‚ùå*", parse_mode="Markdown")
        await asyncio.sleep(3)
        await bot.delete_message(chat_id=message.chat.id, message_id=int_digit.message_id)
        return

    winners = int(winners)
    if winners <= 0 or winners > 25:
        invalid_value = await bot.send_message(message.chat.id, "*–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 25. ‚ùå*", parse_mode="Markdown")
        await asyncio.sleep(3)
        await bot.delete_message(chat_id=message.chat.id, message_id=invalid_value.message_id)
        return

    if not winners:
        winners = 1

    await state.update_data(winners=winners)
    message_id = contest_messages[-1]

    date_text = f"*üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):*"
    keyboard = types.InlineKeyboardMarkup()
    skip_date = types.InlineKeyboardButton(text=' –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üö©', callback_data='skip_date')
    keyboard.add(skip_date)

    await bot.edit_message_text(date_text, message.chat.id, message_id, parse_mode="Markdown", reply_markup=keyboard)

    await CreateContestState.end_date.set()

@dp.callback_query_handler(lambda query: query.data == 'skip_winners', state=CreateContestState.winners)
async def skip_name_callback(query: types.CallbackQuery, state: FSMContext):
    winners = 1

    await state.update_data(winners=winners)
    message_id = contest_messages[-1]

    date_text = f"*üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):*"
    keyboard = types.InlineKeyboardMarkup()
    skip_date = types.InlineKeyboardButton(text=' –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üö©', callback_data='skip_date')
    keyboard.add(skip_date)

    await bot.edit_message_text(date_text, query.message.chat.id, message_id, parse_mode="Markdown", reply_markup=keyboard)

    await CreateContestState.end_date.set()

@dp.message_handler(state=CreateContestState.end_date)
async def process_description(message: types.Message, state: FSMContext):
    global contest_name, contest_id, contest_description, winners, end_date

    end_date_str = message.text

    await bot.delete_message(message.chat.id, message.message_id)
    message_id = contest_messages[-1]

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (offset-aware)
    today = datetime.now(timezone)

    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ê–°:–ú–ò–ù–£–¢–´ (offset-aware)
        end_date = datetime.strptime(end_date_str, "%d.%m.%Y %H:%M")
    except ValueError:
        try:
            # If the above parsing fails, try parsing the date without time
            end_date = datetime.strptime(end_date_str, "%d.%m.%Y")
            # Set the time to midnight (00:00)
            end_date = end_date.replace(hour=0, minute=0)
        except ValueError:
            # If both parsing attempts fail, it means the date format is incorrect
            wrong_date_format = await bot.send_message(message.chat.id, "*–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ* `–î–î.–ú–ú.–ì–ì–ì–ì.` *–∏–ª–∏* `–î–î.–ú–ú.–ì–ì–ì–ì. –ß–ê–°:–ú–ò–ù–£–¢–´` ‚ùå", parse_mode="Markdown")
            await asyncio.sleep(3)
            await bot.delete_message(chat_id=message.chat.id, message_id=wrong_date_format.message_id)
            return

    # Making end_date offset-aware using the same timezone
    end_date = timezone.localize(end_date)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    if end_date <= today:
        old_date = await bot.send_message(message.chat.id, "*–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏.* üò∂", parse_mode="Markdown")
        await asyncio.sleep(3)
        await bot.delete_message(chat_id=message.chat.id, message_id=old_date.message_id)
        return

    if not end_date_str:
        end_date_str = "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞. üö´"
    else:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç datetime –≤ —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ê–°:–ú–ò–ù–£–¢–´
        end_date_str = end_date.strftime("%d.%m.%Y %H:%M")

    await state.update_data(end_date=end_date_str)

    data = await state.get_data()

    end_date = data.get('end_date')
    contest_name = data.get('contest_name')
    contest_id = data.get('contest_id')
    contest_description = data.get('description')
    winners = data.get('winners')

    confirmation_text = f"*üí† –î–∞–Ω–Ω—ã–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!*\n\n*ü™Å –ò–º—è:* `{contest_name}`\n*üßä –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:* `{contest_id}`\n*üéóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:* _{contest_description}_\n*üéñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:* `{winners}`\n*üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:* `{end_date}`"

    keyboard = types.InlineKeyboardMarkup()
    confirm_create = types.InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ', callback_data='confirm_create')
    decline_create = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå', callback_data='decline_create')
    keyboard.add(decline_create, confirm_create)

    await bot.edit_message_text(confirmation_text, message.chat.id, message_id, parse_mode="Markdown", reply_markup=keyboard)

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–ª—é—á–∞
    await state.finish()

@dp.callback_query_handler(lambda query: query.data == 'skip_date', state=CreateContestState.end_date)
async def skip_date_callback(query: types.CallbackQuery, state: FSMContext):
    global contest_name, contest_id, contest_description, winners, end_date

    end_date = "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞. üö´"

    await state.update_data(end_date=end_date)

    data = await state.get_data()
    message_id = contest_messages[-1]

    contest_name = data.get('contest_name')
    contest_id = data.get('contest_id')
    contest_description = data.get('description')
    winners = data.get('winners')
    end_date = data.get('end_date')

    confirmation_text = f"*üí† –î–∞–Ω–Ω—ã–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!*\n\n" \
                        f"*ü™Å –ò–º—è:* `{contest_name}`\n" \
                        f"*üßä –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:* `{contest_id}`\n" \
                        f"*üéóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:* _{contest_description}_\n" \
                        f"*üéñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:* `{winners}`\n" \
                        f"*üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:* `{end_date}`"

    keyboard = types.InlineKeyboardMarkup()
    confirm_create = types.InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ', callback_data='confirm_create')
    decline_create = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå', callback_data='decline_create')

    keyboard.add(decline_create, confirm_create)

    await bot.edit_message_text(confirmation_text, query.message.chat.id, message_id, parse_mode="Markdown", reply_markup=keyboard)

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–ª—é—á–∞
    await state.finish()

@dp.callback_query_handler(lambda query: query.data == 'confirm_create', state='*')
async def confirm_create_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await button_click(callback_query, state)

# –í–µ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—É—Ä—Å–∞
@dp.callback_query_handler(text='decline_search', state=MenuCategories.search)
async def decline_search_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    prev_message_id = (await state.get_data()).get('prev_message_id')
    if prev_message_id:
        await bot.delete_message(callback_query.message.chat.id, prev_message_id)
    await state.finish()

    global contest_messages

    message_id = contest_messages[-1]

    user_id = callback_query.from_user.id
    user_data = await user_collections.find_one({"_id": user_id})

    if user_data and (("status" in user_data and user_data["status"] in ["–¢–µ—Å—Ç–µ—Ä ‚ú®", "–ê–¥–º–∏–Ω üöó", "–°–æ–∑–¥–∞—Ç–µ–ª—å üé≠"]) or int(user_data.get("keys", 0)) > 0):

        # –ö–æ–¥ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard = types.InlineKeyboardMarkup()
        search = types.InlineKeyboardButton(text='üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data='search')
        create = types.InlineKeyboardButton(text='üé´ –°–æ–∑–¥–∞—Ç—å', callback_data='create')
        change = types.InlineKeyboardButton(text='üç≠ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data='change')
        keyboard.row(change, search)
        keyboard.row(create)

        confirmation_text = "*üç° –†–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞–º–∏!*\n\n*‚ú® –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–æ–º –∏–ª–∏ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è:*"

        reply = await bot.edit_message_text(confirmation_text, callback_query.message.chat.id, message_id, parse_mode="Markdown",
                                    reply_markup=keyboard)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        contest_messages.append(reply.message_id)

    else:
        # –ö–æ–¥ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard = types.InlineKeyboardMarkup()
        input_key = types.InlineKeyboardButton(text='üîë –í–≤–µ—Å—Ç–∏ –∫–ª—é—á', callback_data='input_key')
        keyboard.row(input_key)

        confirmation_text = "*üëÄ –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –∏ –≤–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ–Ω–∫—É—Ä—Å–æ–≤:*"

        reply = await bot.edit_message_text(confirmation_text, callback_query.message.chat.id, message_id, parse_mode="Markdown",
                                    reply_markup=keyboard)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        contest_messages.append(reply.message_id)

@dp.message_handler(state=MenuCategories.search)
async def process_search(message: types.Message, state: FSMContext):
    await bot.delete_message(message.chat.id, message.message_id)

    if not message.text.isdigit():
        int_digit = await bot.send_message(message.chat.id, "*‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–Ω–∫—É—Ä—Å–∞.*", parse_mode="Markdown")
        await asyncio.sleep(3)
        await bot.delete_message(chat_id=message.chat.id, message_id=int_digit.message_id)
        return

    global contest_messages

    search_id = int(message.text)

    # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
    contest = await contests_collection.find_one({"_id": search_id})

    # –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    result = await bot.send_message(message.chat.id, "*üïå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—É—Ä—Å–∞...*", parse_mode="Markdown")
    await asyncio.sleep(2)
    await bot.delete_message(chat_id=message.chat.id, message_id=result.message_id)
    message_id = contest_messages[-1]

    if contest:
        contest_id = contest.get("_id")
        contest_name = contest.get("contest_name")
        owner_id = contest.get("owner_id")
        contest_description = contest.get("contest_description")
        members = contest.get("members")
        end_date = contest.get("end_date")
        members_message = len(members)
        winners = contest.get("winners", 0)
        contest_winners = contest.get("contest_winners")
        ended = contest.get("ended")
        if ended == "True":
            contest_status = "<b>‚ùå –°—Ç–∞—Ç—É—Å:</b> –ó–∞–≤–µ—Ä—à—ë–Ω."
        else:
            contest_status = "<b>‚úÖ –°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–µ–Ω."

        if contest_winners:

            contest_winners_list = "\n".join(
                [f"<b>{idx}.</b> @{await get_username_winners(user)} ‚Äî <code>{user}</code>" for idx, user in
                 enumerate(contest_winners, start=1)])
            result_message = f"<b>üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—É—Ä—Å–∞ </b> <code>{contest_id}</code><b>:</b>\n\n" \
                             f"<b>üçô –ê–≤—Ç–æ—Ä:</b> <code>{owner_id}</code>\n" \
                             f"<b>üßä –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:</b> <code>{contest_id}</code>\n" \
                             f"<b>ü™Å –ò–º—è:</b> <code>{contest_name}</code>\n" \
                             f"<b>üéóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:</b> <i>{contest_description}</i>\n" \
                             f"<b>üéñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:</b> <code>{winners}</code>\n" \
                             f"<b>üë§ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> <code>{members_message}</code>\n" \
                             f"<b>üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:</b> \n{contest_winners_list}\n" \
                             f"<b>üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> <code>{end_date}</code>\n\n" \
                             f"{contest_status}"
        else:
            result_message = f"<b>üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—É—Ä—Å–∞ </b> <code>{contest_id}</code><b>:</b>\n\n" \
                             f"<b>üçô –ê–≤—Ç–æ—Ä:</b> <code>{owner_id}</code>\n" \
                             f"<b>üßä –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:</b> <code>{contest_id}</code>\n" \
                             f"<b>ü™Å –ò–º—è:</b> <code>{contest_name}</code>\n" \
                             f"<b>üéóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:</b> <i>{contest_description}</i>\n" \
                             f"<b>üéñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:</b> <code>{winners}</code>\n" \
                             f"<b>üë§ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> <code>{members_message}</code>\n" \
                             f"<b>üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> <code>{end_date}</code>\n\n" \
                             f"{contest_status}"

        keyboard = types.InlineKeyboardMarkup()
        input_id = types.InlineKeyboardButton(text='–ù–ê–ó–ê–î ‚ùå', callback_data='decline_search')
        search = types.InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å üîé', callback_data='search')
        keyboard.row(search)
        keyboard.row(input_id)

        reply = await bot.edit_message_text(result_message, message.chat.id, message_id, parse_mode="HTML", reply_markup=keyboard)
        await state.finish()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        contest_messages.append(reply.message_id)
    else:
        int_digit = await bot.send_message(message.chat.id, "*‚ùå –ö–æ–Ω–∫—É—Ä—Å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∞–π–¥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.*", parse_mode="Markdown")
        await asyncio.sleep(4)
        await bot.delete_message(chat_id=message.chat.id, message_id=int_digit.message_id)

@dp.callback_query_handler(text='search')
async def search_callback(callback_query: types.CallbackQuery, state: FSMContext):
    search_text = "*üîé –ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∫–æ–Ω–∫—É—Ä—Å, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∞–π–¥–∏:*"
    keyboard = types.InlineKeyboardMarkup()
    input_id = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data='decline_search')
    keyboard.row(input_id)

    await bot.edit_message_text(search_text, callback_query.message.chat.id, callback_query.message.message_id,
                                parse_mode="Markdown", reply_markup=keyboard)
    await MenuCategories.search.set()
    await state.update_data(prev_message_id=callback_query.message.message_id)

# –í–µ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query_handler(text='decline_id_check', state=MenuCategories.id_check)
async def decline_search_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await state.finish()

    user_id = callback_query.from_user.id
    user_data = await user_collections.find_one({"_id": user_id})

    if user_data:
        username = callback_query.from_user.username
        wins = user_data.get("wins", 0)
        participation = user_data.get("participation", 0)
        creation_date = user_data.get("creation_date", "")
        status = user_data.get("status", "")

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
        profile = f'*üçπ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* `{username}`:\n\n*üçß –°—Ç–∞—Ç—É—Å:* `{status}`\n\n*üèÖ –ü–æ–±–µ–¥—ã –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö:* `{wins}`\n*üçÄ –£—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö:* `{participation}`\n*üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* `{creation_date}`'
        keyboard = types.InlineKeyboardMarkup()
        history = types.InlineKeyboardButton(text='–ò—Å—Ç–æ—Ä–∏—è —É—á–∞—Å—Ç–∏–π üìî', callback_data='history')
        id_check = types.InlineKeyboardButton(text='–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ü•è', callback_data='id_check')
        done = types.InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ ‚úÖ', callback_data='done')
        keyboard.add(history, id_check)
        keyboard.add(done)

        reply = await bot.edit_message_text(profile, callback_query.message.chat.id,
                                            callback_query.message.message_id, parse_mode="Markdown",
                                            reply_markup=keyboard)
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        reply = await message.reply("‚ò†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    profile_messages.append(reply.message_id)

@dp.message_handler(state=MenuCategories.id_check)
async def process_search(message: types.Message, state: FSMContext):
    await bot.delete_message(message.chat.id, message.message_id)

    if not message.text.isdigit():
        int_digit = await bot.send_message(message.chat.id, "*‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.*", parse_mode="Markdown")
        await asyncio.sleep(3)
        await bot.delete_message(chat_id=message.chat.id, message_id=int_digit.message_id)
        return

    global profile_messages

    user_id = int(message.text)

    # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
    user = await user_collections.find_one({"_id": user_id})

    # –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    result = await bot.send_message(message.chat.id, "*üèØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...*", parse_mode="Markdown")
    await asyncio.sleep(2)
    await bot.delete_message(chat_id=message.chat.id, message_id=result.message_id)
    message_id = profile_messages[-1]

    if user:
        wins = user.get("wins", 0)
        participation = user.get("participation", 0)
        creation_date = user.get("creation_date", "")
        status = user.get("status", "")

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
        profile = f'*üçπ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* `{user_id}`:\n\n*üçß –°—Ç–∞—Ç—É—Å:* `{status}`\n\n*üèÖ –ü–æ–±–µ–¥—ã –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö:* `{wins}`\n*üçÄ –£—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö:* `{participation}`\n*üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* `{creation_date}`'
        keyboard = types.InlineKeyboardMarkup()
        id_check = types.InlineKeyboardButton(text='–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ü•è', callback_data='id_check')
        done = types.InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ ‚úÖ', callback_data='done')
        keyboard.add(id_check)
        keyboard.add(done)

        reply = await bot.edit_message_text(profile, message.chat.id, message_id, parse_mode="Markdown",
                                    reply_markup=keyboard)
        await state.finish()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        profile_messages.append(reply.message_id)
    else:
        int_digit = await bot.send_message(message.chat.id, "*‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∞–π–¥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.*", parse_mode="Markdown")
        await asyncio.sleep(4)
        await bot.delete_message(chat_id=message.chat.id, message_id=int_digit.message_id)

@dp.callback_query_handler(text='id_check')
async def search_callback(callback_query: types.CallbackQuery, state: FSMContext):
    search_text = "*üîé –ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∞–π–¥–∏:*"
    keyboard = types.InlineKeyboardMarkup()
    input_id = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data='decline_id_check')
    keyboard.row(input_id)

    await bot.edit_message_text(search_text, callback_query.message.chat.id, callback_query.message.message_id,
                                parse_mode="Markdown", reply_markup=keyboard)
    await MenuCategories.id_check.set()
    await state.update_data(prev_message_id=callback_query.message.message_id)

## –í–µ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω–∫—É—Ä—Å–µ
@dp.callback_query_handler(text='decline_contest_profile_search', state=MenuCategories.contest_search_profile)
async def decline_search_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await state.finish()
    prev_message_id = (await state.get_data()).get('prev_message_id')
    if prev_message_id:
        await bot.delete_message(callback_query.message.chat.id, prev_message_id)

    global contest_messages

    user_id = callback_query.from_user.id

    # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
    contests = await contests_collection.find({"owner_id": user_id}).to_list(length=None)
    message_id = contest_messages[-1]
    if contests:
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–æ–Ω–∫—É—Ä—Å–∞–º–∏
        result_message = "*üéØ –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã:*\n\n"

        # –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É –∫–æ–Ω–∫—É—Ä—Å—É
        for contest in contests:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
            contest_id = contest.get("_id")
            contest_name = contest.get("contest_name")
            members = contest.get("members")
            ended = contest.get("ended")
            if ended == "True":
                pass
            else:
                if members:
                    members_count = len(members)
                else:
                    members_count = 0

                if members_count > 0:
                    members_message = f"{members_count}"
                else:
                    members_message = "0"

                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–Ω–∫—É—Ä—Å–∞
                result_message += f"*ü™Å –ò–º—è:* `{contest_name}`\n" \
                                  f"*üßä –ê–π–¥–∏ –∫–æ–Ω–∫—É—Ä—Å–∞* `{contest_id}`*:*\n" \
                                  f"*üèØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* `{members_message}`" \
                                  f"*¬∑*\n"

        keyboard = types.InlineKeyboardMarkup()
        decline_create = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data='decline_create')
        contest_check = types.InlineKeyboardButton(text='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ üßß', callback_data='contest_check')
        keyboard.row(contest_check)
        keyboard.row(decline_create)

        reply = await bot.edit_message_text(result_message, callback_query.message.chat.id, message_id,
                                            parse_mode="Markdown",
                                            reply_markup=keyboard)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        change_message_id.append(reply.message_id)
    else:
        keyboard = types.InlineKeyboardMarkup()
        decline_create = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data='decline_create')
        keyboard.row(decline_create)

        int_digit = await bot.edit_message_text("*–£ –≤–∞—Å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤‚ÄºÔ∏è*",
                                                callback_query.message.chat.id, message_id,
                                                parse_mode="Markdown",
                                                reply_markup=keyboard)
        change_message_id.append(int_digit.message_id)

@dp.message_handler(state=MenuCategories.contest_search_profile)
async def process_search(message: types.Message, state: FSMContext):
    await bot.delete_message(message.chat.id, message.message_id)

    if not message.text.isdigit():
        int_digit = await bot.send_message(message.chat.id, "*‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.*", parse_mode="Markdown")
        await asyncio.sleep(3)
        await bot.delete_message(chat_id=message.chat.id, message_id=int_digit.message_id)
        return

    global change_message_id
    contest_id = (await state.get_data()).get('contest_id')

    search_user_id = int(message.text)

    # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
    contest = await contests_collection.find_one({"_id": int(contest_id)})

    if contest:
        members = contest.get("members")
        ban_members = contest.get("ban_members")
        join_date = contest.get("join_date")

        if int(search_user_id) in members:
            user_index = members.index(search_user_id)
            blocked = "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!" if search_user_id in ban_members else "–î—É—à–µ–≤–Ω–æ–µ!"

            # –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            result = await bot.send_message(message.chat.id, "*üïå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞...*", parse_mode="Markdown")
            await asyncio.sleep(2)
            await bot.delete_message(chat_id=message.chat.id, message_id=result.message_id)
            message_id = change_message_id[-1]

            username = await get_username(search_user_id)
            if username:
                username = username.replace("_", "&#95;")
            if search_user_id in ban_members:
                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                result_message = f"<b>üß∂–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>{search_user_id}</code>\n" \
                                 f"<b>ü™ê –Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{username}\n" \
                                 f"<b>‚ÄºÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> <code>{blocked}</code>"
                block = types.InlineKeyboardButton(text='–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å ‚ùé',
                                                   callback_data=f'unblock_profile_{search_user_id}_{contest_id}')
            else:
                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                result_message = f"<b>üß∂–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>{search_user_id}</code>\n" \
                                 f"<b>ü™ê –Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{username}\n" \
                                 f"<b>üìÖ –î–∞—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:</b> <code>{join_date[user_index]}</code>\n\n" \
                                 f"<b>‚ùé –°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> <code>{blocked}</code>"
                block = types.InlineKeyboardButton(text='–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å üö´',
                                                   callback_data=f'block_profile_{search_user_id}_{contest_id}')

            keyboard = types.InlineKeyboardMarkup()
            kick = types.InlineKeyboardButton(text='–ò—Å–∫–ª—é—á–∏—Ç—å üéá',
                                               callback_data=f'kick_profile_{search_user_id}_{contest_id}')
            back_search = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data='contest_check')
            input_id = types.InlineKeyboardButton(text='–ò—Å–∫–∞—Ç—å –µ—â—ë üîé', callback_data=f'contest_search_profile_{contest_id}')
            keyboard.row(input_id)
            keyboard.row(kick, block)
            keyboard.row(back_search)
            reply = await bot.edit_message_text(result_message, message.chat.id, message_id, parse_mode="HTML",
                                                reply_markup=keyboard)
            await state.finish()

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            change_message_id.append(reply.message_id)
        elif int(search_user_id) in ban_members:
            message_id = change_message_id[-1]

            username = await get_username(search_user_id)
            if username:
                username = username.replace("_", "&#95;")

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result_message = f"<b>üß∂–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>{search_user_id}</code>\n" \
                             f"<b>ü™ê –Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{username}\n" \
                             f"<b>‚ÄºÔ∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:</b> <code>–î–∞ üî®</code>"
            unblock = types.InlineKeyboardButton(text='–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å ‚ùé',
                                                 callback_data=f'unblock_profile_{search_user_id}_{contest_id}')

            keyboard = types.InlineKeyboardMarkup()
            back_search = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data='contest_check')
            input_id = types.InlineKeyboardButton(text='–ò—Å–∫–∞—Ç—å –µ—â—ë üîé',
                                                  callback_data=f'contest_search_profile_{contest_id}')
            keyboard.row(input_id)
            keyboard.row(unblock)
            keyboard.row(back_search)
            await state.finish()

            reply = await bot.edit_message_text(result_message, message.chat.id, message_id, parse_mode="HTML",
                                                reply_markup=keyboard)
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            change_message_id.append(reply.message_id)
        else:
            int_digit = await bot.send_message(message.chat.id, "*‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω.*", parse_mode="Markdown")
            await asyncio.sleep(4)
            await bot.delete_message(chat_id=message.chat.id, message_id=int_digit.message_id)
    else:
        int_digit = await bot.send_message(message.chat.id, "*‚ùå –ö–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.*", parse_mode="Markdown")
        await asyncio.sleep(4)
        await bot.delete_message(chat_id=message.chat.id, message_id=int_digit.message_id)

@dp.callback_query_handler(lambda c: c.data.startswith('contest_search_profile'))
async def search_callback(callback_query: types.CallbackQuery, state: FSMContext):

    button_text = callback_query.data
    contest_id = button_text.split('_')[3]

    search_text = "*üß∂ –í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*"
    keyboard = types.InlineKeyboardMarkup()
    input_id = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data='decline_contest_profile_search')
    keyboard.row(input_id)

    await bot.edit_message_text(search_text, callback_query.message.chat.id, callback_query.message.message_id,
                                parse_mode="Markdown", reply_markup=keyboard)
    await MenuCategories.contest_search_profile.set()
    await state.update_data(contest_id=contest_id)
    await state.update_data(prev_message_id=callback_query.message.message_id)

## –í–µ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–Ω–∫—É—Ä—Å–µ
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏
@dp.callback_query_handler(text='decline_name_change', state=ChangeContestState.name_change)
async def decline_search_callback(callback_query: types.CallbackQuery, state: FSMContext):
    contest_id = (await state.get_data()).get('contest_id')

    await callback_query.answer()
    await state.finish()
    prev_message_id = (await state.get_data()).get('prev_message_id')
    if prev_message_id:
        await bot.delete_message(callback_query.message.chat.id, prev_message_id)

    global contest_messages

    # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
    contest = await contests_collection.find_one({"_id": int(contest_id)})

    if contest:
        message_id = change_message_id[-1]

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
        contest_id = contest.get("_id")
        contest_name = contest.get("contest_name")
        contest_description = contest.get("contest_description")
        winners = contest.get("winners")
        members = contest.get("members")
        end_date = contest.get("end_date")

        if members:
            members_count = len(members)
        else:
            members_count = 0

        if members_count > 0:
            members_message = f"{members_count}"
        else:
            members_message = "0"

        result_message = f"*üèÜ –†–µ–¥–∞–∫—Ü–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞* `{contest_id}`*:*\n\n" \
                         f"*ü™Å –ò–º—è:* `{contest_name}`\n" \
                         f"*üßä –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:* `{contest_id}`\n" \
                         f"*üéóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:* _{contest_description}_\n" \
                         f"*üéñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:* `{winners}`\n" \
                         f"*üèØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* `{members_message}`\n" \
                         f"*üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:* `{end_date}`"

        keyboard = types.InlineKeyboardMarkup()
        name_change = types.InlineKeyboardButton(text='–ò–º—è  Ô∏èü™Å', callback_data=f'name_change_{contest_id}')
        description_change = types.InlineKeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ üéóÔ∏èÔ∏è',
                                                        callback_data=f'description_change_{contest_id}')
        winners_change = types.InlineKeyboardButton(text='–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ üéñÔ∏è', callback_data=f'winners_change_{contest_id}')
        date_change = types.InlineKeyboardButton(text='–î–∞—Ç–∞  Ô∏èüìÜ', callback_data=f'date_change_{contest_id}')
        back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data=f'change')
        keyboard.row(name_change)
        keyboard.row(description_change)
        keyboard.row(winners_change)
        keyboard.row(date_change)
        keyboard.row(back)

        reply = await bot.edit_message_text(result_message, callback_query.message.chat.id, message_id,
                                            parse_mode="Markdown",
                                            reply_markup=keyboard)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        change_message_id.append(reply.message_id)
    else:
        int_digit = await bot.edit_message_text("*–£ –≤–∞—Å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤‚ÄºÔ∏è*",
                                                callback_query.message.chat.id, message_id,
                                                parse_mode="Markdown",
                                                reply_markup=keyboard)
        change_message_id.append(int_digit.message_id)

@dp.message_handler(state=ChangeContestState.name_change)
async def process_search(message: types.Message, state: FSMContext):
    await bot.delete_message(message.chat.id, message.message_id)

    global change_message_id
    contest_id = (await state.get_data()).get('contest_id')

    new_name = message.text
    await contests_collection.update_one({"_id": int(contest_id)},
                                      {"$set": {"contest_name": new_name}})
    # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
    contest = await contests_collection.find_one({"_id": int(contest_id)})

    if contest:
        message_id = change_message_id[-1]

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
        contest_id = contest.get("_id")
        contest_name = contest.get("contest_name")
        contest_description = contest.get("contest_description")
        winners = contest.get("winners")
        members = contest.get("members")
        end_date = contest.get("end_date")

        if members:
            members_count = len(members)
        else:
            members_count = 0

        if members_count > 0:
            members_message = f"{members_count}"
        else:
            members_message = "0"

        result_message = f"*üèÜ –†–µ–¥–∞–∫—Ü–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞* `{contest_id}`*:*\n\n" \
                         f"*ü™Å –ò–º—è:* `{contest_name}`\n" \
                         f"*üßä –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:* `{contest_id}`\n" \
                         f"*üéóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:* _{contest_description}_\n" \
                         f"*üéñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:* `{winners}`\n" \
                         f"*üèØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* `{members_message}`\n" \
                         f"*üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:* `{end_date}`"

        keyboard = types.InlineKeyboardMarkup()
        name_change = types.InlineKeyboardButton(text='–ò–º—è  Ô∏èü™Å', callback_data=f'name_change_{contest_id}')
        description_change = types.InlineKeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ üéóÔ∏èÔ∏è',
                                                        callback_data=f'description_change_{contest_id}')
        winners_change = types.InlineKeyboardButton(text='–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ üéñÔ∏è', callback_data=f'winners_change_{contest_id}')
        date_change = types.InlineKeyboardButton(text='–î–∞—Ç–∞  Ô∏èüìÜ', callback_data=f'date_change_{contest_id}')
        back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data=f'change')
        keyboard.row(name_change)
        keyboard.row(description_change)
        keyboard.row(winners_change)
        keyboard.row(date_change)
        keyboard.row(back)

        reply = await bot.edit_message_text(result_message, message.chat.id, message_id, parse_mode="Markdown",
                                                reply_markup=keyboard)
        await state.finish()
    else:
        int_digit = await bot.send_message(message.chat.id, "*‚ùå –ö–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.*", parse_mode="Markdown")
        await asyncio.sleep(4)
        await bot.delete_message(chat_id=message.chat.id, message_id=int_digit.message_id)

@dp.callback_query_handler(lambda c: c.data.startswith('name_change'))
async def search_callback(callback_query: types.CallbackQuery, state: FSMContext):

    button_text = callback_query.data
    contest_id = button_text.split('_')[2]

    search_text = "*ü™Å –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∫–æ–Ω–∫—É—Ä—Å–∞:*"
    keyboard = types.InlineKeyboardMarkup()
    input_id = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data='decline_name_change')
    keyboard.row(input_id)

    await bot.edit_message_text(search_text, callback_query.message.chat.id, callback_query.message.message_id,
                                parse_mode="Markdown", reply_markup=keyboard)
    await ChangeContestState.name_change.set()
    await state.update_data(contest_id=contest_id)
    await state.update_data(prev_message_id=callback_query.message.message_id)

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
@dp.callback_query_handler(text='decline_description_change', state=ChangeContestState.description_change)
async def decline_search_callback(callback_query: types.CallbackQuery, state: FSMContext):
    contest_id = (await state.get_data()).get('contest_id')

    await callback_query.answer()
    await state.finish()
    prev_message_id = (await state.get_data()).get('prev_message_id')
    if prev_message_id:
        await bot.delete_message(callback_query.message.chat.id, prev_message_id)

    global contest_messages

    # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
    contest = await contests_collection.find_one({"_id": int(contest_id)})

    if contest:
        message_id = change_message_id[-1]

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
        contest_id = contest.get("_id")
        contest_name = contest.get("contest_name")
        contest_description = contest.get("contest_description")
        winners = contest.get("winners")
        members = contest.get("members")
        end_date = contest.get("end_date")

        if members:
            members_count = len(members)
        else:
            members_count = 0

        if members_count > 0:
            members_message = f"{members_count}"
        else:
            members_message = "0"

        result_message = f"*üèÜ –†–µ–¥–∞–∫—Ü–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞* `{contest_id}`*:*\n\n" \
                         f"*ü™Å –ò–º—è:* `{contest_name}`\n" \
                         f"*üßä –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:* `{contest_id}`\n" \
                         f"*üéóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:* _{contest_description}_\n" \
                         f"*üéñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:* `{winners}`\n" \
                         f"*üèØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* `{members_message}`\n" \
                         f"*üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:* `{end_date}`"

        keyboard = types.InlineKeyboardMarkup()
        name_change = types.InlineKeyboardButton(text='–ò–º—è  Ô∏èü™Å', callback_data=f'name_change_{contest_id}')
        description_change = types.InlineKeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ üéóÔ∏èÔ∏è',
                                                        callback_data=f'description_change_{contest_id}')
        winners_change = types.InlineKeyboardButton(text='–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ üéñÔ∏è', callback_data=f'winners_change_{contest_id}')
        date_change = types.InlineKeyboardButton(text='–î–∞—Ç–∞  Ô∏èüìÜ', callback_data=f'date_change_{contest_id}')
        back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data=f'change')
        keyboard.row(name_change)
        keyboard.row(description_change)
        keyboard.row(winners_change)
        keyboard.row(date_change)
        keyboard.row(back)

        reply = await bot.edit_message_text(result_message, callback_query.message.chat.id, message_id,
                                            parse_mode="Markdown",
                                            reply_markup=keyboard)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        change_message_id.append(reply.message_id)
    else:
        int_digit = await bot.edit_message_text("*–£ –≤–∞—Å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤‚ÄºÔ∏è*",
                                                callback_query.message.chat.id, message_id,
                                                parse_mode="Markdown",
                                                reply_markup=keyboard)
        change_message_id.append(int_digit.message_id)

@dp.message_handler(state=ChangeContestState.description_change)
async def process_search(message: types.Message, state: FSMContext):
    await bot.delete_message(message.chat.id, message.message_id)

    global change_message_id
    contest_id = (await state.get_data()).get('contest_id')

    new_description = message.text
    await contests_collection.update_one({"_id": int(contest_id)},
                                      {"$set": {"contest_description": new_description}})
    # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
    contest = await contests_collection.find_one({"_id": int(contest_id)})

    if contest:
        message_id = change_message_id[-1]

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
        contest_id = contest.get("_id")
        contest_name = contest.get("contest_name")
        contest_description = contest.get("contest_description")
        winners = contest.get("winners")
        members = contest.get("members")
        end_date = contest.get("end_date")

        if members:
            members_count = len(members)
        else:
            members_count = 0

        if members_count > 0:
            members_message = f"{members_count}"
        else:
            members_message = "0"

        result_message = f"*üèÜ –†–µ–¥–∞–∫—Ü–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞* `{contest_id}`*:*\n\n" \
                         f"*ü™Å –ò–º—è:* `{contest_name}`\n" \
                         f"*üßä –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:* `{contest_id}`\n" \
                         f"*üéóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:* _{contest_description}_\n" \
                         f"*üéñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:* `{winners}`\n" \
                         f"*üèØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* `{members_message}`\n" \
                         f"*üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:* `{end_date}`"

        keyboard = types.InlineKeyboardMarkup()
        name_change = types.InlineKeyboardButton(text='–ò–º—è  Ô∏èü™Å', callback_data=f'name_change_{contest_id}')
        description_change = types.InlineKeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ üéóÔ∏èÔ∏è',
                                                        callback_data=f'description_change_{contest_id}')
        winners_change = types.InlineKeyboardButton(text='–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ üéñÔ∏è', callback_data=f'winners_change_{contest_id}')
        date_change = types.InlineKeyboardButton(text='–î–∞—Ç–∞  Ô∏èüìÜ', callback_data=f'date_change_{contest_id}')
        back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data=f'change')
        keyboard.row(name_change)
        keyboard.row(description_change)
        keyboard.row(winners_change)
        keyboard.row(date_change)
        keyboard.row(back)

        reply = await bot.edit_message_text(result_message, message.chat.id, message_id, parse_mode="Markdown",
                                                reply_markup=keyboard)
        await state.finish()
    else:
        int_digit = await bot.send_message(message.chat.id, "*‚ùå –ö–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.*", parse_mode="Markdown")
        await asyncio.sleep(4)
        await bot.delete_message(chat_id=message.chat.id, message_id=int_digit.message_id)

@dp.callback_query_handler(lambda c: c.data.startswith('description_change'))
async def search_callback(callback_query: types.CallbackQuery, state: FSMContext):

    button_text = callback_query.data
    contest_id = button_text.split('_')[2]

    search_text = "*üéóÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞:*"
    keyboard = types.InlineKeyboardMarkup()
    input_id = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data='decline_description_change')
    keyboard.row(input_id)

    await bot.edit_message_text(search_text, callback_query.message.chat.id, callback_query.message.message_id,
                                parse_mode="Markdown", reply_markup=keyboard)
    await ChangeContestState.description_change.set()
    await state.update_data(contest_id=contest_id)
    await state.update_data(prev_message_id=callback_query.message.message_id)

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
@dp.callback_query_handler(text='decline_winners_change', state=ChangeContestState.winners_change)
async def decline_search_callback(callback_query: types.CallbackQuery, state: FSMContext):
    contest_id = (await state.get_data()).get('contest_id')

    await callback_query.answer()
    await state.finish()
    prev_message_id = (await state.get_data()).get('prev_message_id')
    if prev_message_id:
        await bot.delete_message(callback_query.message.chat.id, prev_message_id)

    global contest_messages

    # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
    contest = await contests_collection.find_one({"_id": int(contest_id)})

    if contest:
        message_id = change_message_id[-1]

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
        contest_id = contest.get("_id")
        contest_name = contest.get("contest_name")
        contest_description = contest.get("contest_description")
        winners = contest.get("winners")
        members = contest.get("members")
        end_date = contest.get("end_date")

        if members:
            members_count = len(members)
        else:
            members_count = 0

        if members_count > 0:
            members_message = f"{members_count}"
        else:
            members_message = "0"

        result_message = f"*üèÜ –†–µ–¥–∞–∫—Ü–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞* `{contest_id}`*:*\n\n" \
                         f"*ü™Å –ò–º—è:* `{contest_name}`\n" \
                         f"*üßä –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:* `{contest_id}`\n" \
                         f"*üéóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:* _{contest_description}_\n" \
                         f"*üéñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:* `{winners}`\n" \
                         f"*üèØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* `{members_message}`\n" \
                         f"*üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:* `{end_date}`"

        keyboard = types.InlineKeyboardMarkup()
        name_change = types.InlineKeyboardButton(text='–ò–º—è  Ô∏èü™Å', callback_data=f'name_change_{contest_id}')
        description_change = types.InlineKeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ üéóÔ∏èÔ∏è',
                                                        callback_data=f'description_change_{contest_id}')
        winners_change = types.InlineKeyboardButton(text='–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ üéñÔ∏è', callback_data=f'winners_change_{contest_id}')
        date_change = types.InlineKeyboardButton(text='–î–∞—Ç–∞  Ô∏èüìÜ', callback_data=f'date_change_{contest_id}')
        back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data=f'change')
        keyboard.row(name_change)
        keyboard.row(description_change)
        keyboard.row(winners_change)
        keyboard.row(date_change)
        keyboard.row(back)

        reply = await bot.edit_message_text(result_message, callback_query.message.chat.id, message_id,
                                            parse_mode="Markdown",
                                            reply_markup=keyboard)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        change_message_id.append(reply.message_id)
    else:
        int_digit = await bot.edit_message_text("*–£ –≤–∞—Å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤‚ÄºÔ∏è*",
                                                callback_query.message.chat.id, message_id,
                                                parse_mode="Markdown",
                                                reply_markup=keyboard)
        change_message_id.append(int_digit.message_id)

@dp.message_handler(state=ChangeContestState.winners_change)
async def process_search(message: types.Message, state: FSMContext):
    await bot.delete_message(message.chat.id, message.message_id)

    global change_message_id
    contest_id = (await state.get_data()).get('contest_id')

    new_winners = message.text
    if not new_winners.isdigit():
        int_digit = await bot.send_message(message.chat.id, "*–ù—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! ‚ùå*", parse_mode="Markdown")
        await asyncio.sleep(3)
        await bot.delete_message(chat_id=message.chat.id, message_id=int_digit.message_id)
        return

    winners = int(new_winners)
    if winners <= 0 or winners > 25:
        invalid_value = await bot.send_message(message.chat.id, "*–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 25. ‚ùå*", parse_mode="Markdown")
        await asyncio.sleep(3)
        await bot.delete_message(chat_id=message.chat.id, message_id=invalid_value.message_id)
        return

    await contests_collection.update_one({"_id": int(contest_id)},
                                      {"$set": {"winners": int(new_winners)}})
    # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
    contest = await contests_collection.find_one({"_id": int(contest_id)})

    if contest:
        message_id = change_message_id[-1]

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
        contest_id = contest.get("_id")
        contest_name = contest.get("contest_name")
        contest_description = contest.get("contest_description")
        winners = contest.get("winners")
        members = contest.get("members")
        end_date = contest.get("end_date")

        if members:
            members_count = len(members)
        else:
            members_count = 0

        if members_count > 0:
            members_message = f"{members_count}"
        else:
            members_message = "0"

        result_message = f"*üèÜ –†–µ–¥–∞–∫—Ü–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞* `{contest_id}`*:*\n\n" \
                         f"*ü™Å –ò–º—è:* `{contest_name}`\n" \
                         f"*üßä –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:* `{contest_id}`\n" \
                         f"*üéóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:* _{contest_description}_\n" \
                         f"*üéñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:* `{winners}`\n" \
                         f"*üèØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* `{members_message}`\n" \
                         f"*üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:* `{end_date}`"

        keyboard = types.InlineKeyboardMarkup()
        name_change = types.InlineKeyboardButton(text='–ò–º—è  Ô∏èü™Å', callback_data=f'name_change_{contest_id}')
        description_change = types.InlineKeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ üéóÔ∏èÔ∏è',
                                                        callback_data=f'description_change_{contest_id}')
        winners_change = types.InlineKeyboardButton(text='–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ üéñÔ∏è', callback_data=f'winners_change_{contest_id}')
        date_change = types.InlineKeyboardButton(text='–î–∞—Ç–∞  Ô∏èüìÜ', callback_data=f'date_change_{contest_id}')
        back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data=f'change')
        keyboard.row(name_change)
        keyboard.row(description_change)
        keyboard.row(winners_change)
        keyboard.row(date_change)
        keyboard.row(back)

        reply = await bot.edit_message_text(result_message, message.chat.id, message_id, parse_mode="Markdown",
                                                reply_markup=keyboard)
        await state.finish()
    else:
        int_digit = await bot.send_message(message.chat.id, "*‚ùå –ö–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.*", parse_mode="Markdown")
        await asyncio.sleep(4)
        await bot.delete_message(chat_id=message.chat.id, message_id=int_digit.message_id)

@dp.callback_query_handler(lambda c: c.data.startswith('winners_change'))
async def search_callback(callback_query: types.CallbackQuery, state: FSMContext):

    button_text = callback_query.data
    contest_id = button_text.split('_')[2]

    search_text = "*ü•á –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–µ—Ç–µ–ª–µ–π:*"
    keyboard = types.InlineKeyboardMarkup()
    input_id = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data='decline_winners_change')
    keyboard.row(input_id)

    await bot.edit_message_text(search_text, callback_query.message.chat.id, callback_query.message.message_id,
                                parse_mode="Markdown", reply_markup=keyboard)
    await ChangeContestState.winners_change.set()
    await state.update_data(contest_id=contest_id)
    await state.update_data(prev_message_id=callback_query.message.message_id)

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã
@dp.callback_query_handler(text='decline_date_change', state=ChangeContestState.date_change)
async def decline_search_callback(callback_query: types.CallbackQuery, state: FSMContext):
    contest_id = (await state.get_data()).get('contest_id')

    await callback_query.answer()
    await state.finish()
    prev_message_id = (await state.get_data()).get('prev_message_id')
    if prev_message_id:
        await bot.delete_message(callback_query.message.chat.id, prev_message_id)

    global contest_messages

    # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
    contest = await contests_collection.find_one({"_id": int(contest_id)})

    if contest:
        message_id = change_message_id[-1]

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
        contest_id = contest.get("_id")
        contest_name = contest.get("contest_name")
        contest_description = contest.get("contest_description")
        winners = contest.get("winners")
        members = contest.get("members")
        end_date = contest.get("end_date")

        if members:
            members_count = len(members)
        else:
            members_count = 0

        if members_count > 0:
            members_message = f"{members_count}"
        else:
            members_message = "0"

        result_message = f"*üèÜ –†–µ–¥–∞–∫—Ü–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞* `{contest_id}`*:*\n\n" \
                         f"*ü™Å –ò–º—è:* `{contest_name}`\n" \
                         f"*üßä –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:* `{contest_id}`\n" \
                         f"*üéóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:* _{contest_description}_\n" \
                         f"*üéñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:* `{winners}`\n" \
                         f"*üèØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* `{members_message}`\n" \
                         f"*üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:* `{end_date}`"

        keyboard = types.InlineKeyboardMarkup()
        name_change = types.InlineKeyboardButton(text='–ò–º—è  Ô∏èü™Å', callback_data=f'name_change_{contest_id}')
        description_change = types.InlineKeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ üéóÔ∏èÔ∏è',
                                                        callback_data=f'description_change_{contest_id}')
        winners_change = types.InlineKeyboardButton(text='–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ üéñÔ∏è', callback_data=f'winners_change_{contest_id}')
        date_change = types.InlineKeyboardButton(text='–î–∞—Ç–∞  Ô∏èüìÜ', callback_data=f'date_change_{contest_id}')
        back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data=f'change')
        keyboard.row(name_change)
        keyboard.row(description_change)
        keyboard.row(winners_change)
        keyboard.row(date_change)
        keyboard.row(back)

        reply = await bot.edit_message_text(result_message, callback_query.message.chat.id, message_id,
                                            parse_mode="Markdown",
                                            reply_markup=keyboard)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        change_message_id.append(reply.message_id)
    else:
        int_digit = await bot.edit_message_text("*–£ –≤–∞—Å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤‚ÄºÔ∏è*",
                                                callback_query.message.chat.id, message_id,
                                                parse_mode="Markdown",
                                                reply_markup=keyboard)
        change_message_id.append(int_digit.message_id)

@dp.message_handler(state=ChangeContestState.date_change)
async def process_search(message: types.Message, state: FSMContext):
    await bot.delete_message(message.chat.id, message.message_id)

    global change_message_id
    contest_id = (await state.get_data()).get('contest_id')

    new_date_str = message.text

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    today = datetime.now(timezone)

    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ê–°:–ú–ò–ù–£–¢–´ (offset-aware)
        new_date = datetime.strptime(new_date_str, "%d.%m.%Y %H:%M")
    except ValueError:
        try:
            # If the above parsing fails, try parsing the date without time
            new_date = datetime.strptime(new_date_str, "%d.%m.%Y")
            # Set the time to midnight (00:00)
            new_date = new_date.replace(hour=0, minute=0)
        except ValueError:
            # If both parsing attempts fail, it means the date format is incorrect
            wrong_date_format = await bot.send_message(message.chat.id, "*–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ* `–î–î.–ú–ú.–ì–ì–ì–ì.` *–∏–ª–∏* `–î–î.–ú–ú.–ì–ì–ì–ì. –ß–ê–°:–ú–ò–ù–£–¢–´` ‚ùå", parse_mode="Markdown")
            await asyncio.sleep(3)
            await bot.delete_message(chat_id=message.chat.id, message_id=wrong_date_format.message_id)
            return

    # Making end_date offset-aware using the same timezone
    new_date = timezone.localize(new_date)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    if new_date <= today:
        old_date = await bot.send_message(message.chat.id, "*–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏.* üò∂", parse_mode="Markdown")
        await asyncio.sleep(3)
        await bot.delete_message(chat_id=message.chat.id, message_id=old_date.message_id)
        return

    if not new_date_str:
        new_date_str = "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞. üö´"
    else:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç datetime –≤ —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ê–°:–ú–ò–ù–£–¢–´
        new_date_str = new_date.strftime("%d.%m.%Y %H:%M")

    await contests_collection.update_one({"_id": int(contest_id)},
                                      {"$set": {"end_date": new_date_str}})
    # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
    contest = await contests_collection.find_one({"_id": int(contest_id)})

    if contest:
        message_id = change_message_id[-1]

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
        contest_id = contest.get("_id")
        contest_name = contest.get("contest_name")
        contest_description = contest.get("contest_description")
        winners = contest.get("winners")
        members = contest.get("members")
        end_date = contest.get("end_date")

        if members:
            members_count = len(members)
        else:
            members_count = 0

        if members_count > 0:
            members_message = f"{members_count}"
        else:
            members_message = "0"

        result_message = f"*üèÜ –†–µ–¥–∞–∫—Ü–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞* `{contest_id}`*:*\n\n" \
                         f"*ü™Å –ò–º—è:* `{contest_name}`\n" \
                         f"*üßä –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:* `{contest_id}`\n" \
                         f"*üéóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:* _{contest_description}_\n" \
                         f"*üéñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:* `{winners}`\n" \
                         f"*üèØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* `{members_message}`\n" \
                         f"*üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:* `{end_date}`"

        keyboard = types.InlineKeyboardMarkup()
        name_change = types.InlineKeyboardButton(text='–ò–º—è  Ô∏èü™Å', callback_data=f'name_change_{contest_id}')
        description_change = types.InlineKeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ üéóÔ∏èÔ∏è',
                                                        callback_data=f'description_change_{contest_id}')
        winners_change = types.InlineKeyboardButton(text='–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ üéñÔ∏è', callback_data=f'winners_change_{contest_id}')
        date_change = types.InlineKeyboardButton(text='–î–∞—Ç–∞  Ô∏èüìÜ', callback_data=f'date_change_{contest_id}')
        back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data=f'change')
        keyboard.row(name_change)
        keyboard.row(description_change)
        keyboard.row(winners_change)
        keyboard.row(date_change)
        keyboard.row(back)

        reply = await bot.edit_message_text(result_message, message.chat.id, message_id, parse_mode="Markdown",
                                                reply_markup=keyboard)
        await state.finish()
    else:
        int_digit = await bot.send_message(message.chat.id, "*‚ùå –ö–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.*", parse_mode="Markdown")
        await asyncio.sleep(4)
        await bot.delete_message(chat_id=message.chat.id, message_id=int_digit.message_id)

@dp.callback_query_handler(lambda c: c.data.startswith('date_change'))
async def search_callback(callback_query: types.CallbackQuery, state: FSMContext):

    button_text = callback_query.data
    contest_id = button_text.split('_')[2]

    search_text = "*üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É:*"
    keyboard = types.InlineKeyboardMarkup()
    input_id = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data='decline_date_change')
    keyboard.row(input_id)

    await bot.edit_message_text(search_text, callback_query.message.chat.id, callback_query.message.message_id,
                                parse_mode="Markdown", reply_markup=keyboard)
    await ChangeContestState.date_change.set()
    await state.update_data(contest_id=contest_id)
    await state.update_data(prev_message_id=callback_query.message.message_id)

# –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
@dp.message_handler(commands=['search'])
async def process_search_command(message: types.Message, state: FSMContext):
    args = message.get_args()

    if message.reply_to_message:
        replied_user = message.reply_to_message.from_user
        user_id = replied_user.id
    elif args:
        user_id = args
    else:
        await bot.send_message(message.chat.id, "*‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.*", parse_mode="Markdown")
        return

    try:
        user_id = int(user_id)
    except ValueError:
        await bot.send_message(message.chat.id, "*‚ùå –í–≤–µ–¥–µ–Ω–Ω—ã–π –∞–π–¥–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.*", parse_mode="Markdown")
        return

    user_data = await user_collections.find_one({"_id": user_id})

    if user_data:
        wins = user_data.get("wins", 0)
        participation = user_data.get("participation", 0)
        creation_date = user_data.get("creation_date", "")
        status = user_data.get("status", "")

        profile = f'*üçπ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* `{user_id}`:\n\n*üçß –°—Ç–∞—Ç—É—Å:* `{status}`\n\n*üèÖ –ü–æ–±–µ–¥—ã –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö:* `{wins}`\n*üçÄ –£—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö:* `{participation}`\n*üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* `{creation_date}`'
        await bot.send_chat_action(user_id, action="typing")
        await asyncio.sleep(0.5)
        await bot.send_message(message.chat.id, profile, parse_mode="Markdown")
        await state.finish()
    else:
        if args:
            search_id = int(message.text.split(' ')[1])  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–π–¥–∏ –∫–æ–Ω–∫—É—Ä—Å–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            contest = await contests_collection.find_one({"_id": search_id})

            if contest:
                contest_id = contest.get("_id")
                contest_name = contest.get("contest_name")
                owner_id = contest.get("owner_id")
                contest_description = contest.get("contest_description")
                members = contest.get("members")
                end_date = contest.get("end_date")
                members_message = len(members)
                winners = contest.get("winners", 0)
                contest_winners = contest.get("contest_winners")

                if contest_winners:

                    contest_winners_list = "\n".join(
                        [f"<b>{idx}.</b> @{await get_username_winners(user)} ‚Äî <code>{user}</code>" for idx, user in
                         enumerate(contest_winners, start=1)])
                    result_message = f"<b>üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—É—Ä—Å–∞ </b> <code>{contest_id}</code><b>:</b>\n\n" \
                                     f"<b>üçô –ê–≤—Ç–æ—Ä:</b> <code>{owner_id}</code>\n" \
                                     f"<b>üßä –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:</b> <code>{contest_id}</code>\n" \
                                     f"<b>ü™Å –ò–º—è:</b> <code>{contest_name}</code>\n" \
                                     f"<b>üéóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:</b> <i>{contest_description}</i>\n" \
                                     f"<b>üéñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:</b> <code>{winners}</code>\n" \
                                     f"<b>üë§ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> <code>{members_message}</code>\n" \
                                     f"<b>üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:</b> \n{contest_winners_list}\n" \
                                     f"<b>üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> <code>{end_date}</code>"
                else:
                    result_message = f"<b>üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—É—Ä—Å–∞ </b> <code>{contest_id}</code><b>:</b>\n\n" \
                                     f"<b>üçô –ê–≤—Ç–æ—Ä:</b> <code>{owner_id}</code>\n" \
                                     f"<b>üßä –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:</b> <code>{contest_id}</code>\n" \
                                     f"<b>ü™Å –ò–º—è:</b> <code>{contest_name}</code>\n" \
                                     f"<b>üéóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:</b> <i>{contest_description}</i>\n" \
                                     f"<b>üéñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:</b> <code>{winners}</code>\n" \
                                     f"<b>üë§ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> <code>{members_message}</code>\n" \
                                     f"<b>üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> <code>{end_date}</code>"
                user_id = message.from_user.id
                await bot.send_chat_action(user_id, action="typing")
                await asyncio.sleep(0.5)
                await bot.send_message(message.chat.id, result_message, parse_mode="HTML")
            else:
                await bot.send_message(message.chat.id,
                                       "*‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –∞–π–¥–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã* /search `{–∞–π–¥–∏}`",
                                       parse_mode="Markdown")
        else:
            await bot.send_message(message.chat.id,
                                    "*‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –∞–π–¥–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã* /search `{–∞–π–¥–∏}`",
                                    parse_mode="Markdown")

# –ü—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
@dp.message_handler(commands=['profile'])
async def start_contest_command(message: types.Message):
        global profile_messages

        user_id = message.from_user.id

        # –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_data = await user_collections.find_one({"_id": user_id})

        if user_data:
            username = message.from_user.username  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            wins = user_data.get("wins", 0)
            participation = user_data.get("participation", 0)
            creation_date = user_data.get("creation_date", "")
            status = user_data.get("status", "")

            # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
            profile = f'*üçπ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* `{username}`:\n\n*üçß –°—Ç–∞—Ç—É—Å:* `{status}`\n\n*üèÖ –ü–æ–±–µ–¥—ã –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö:* `{wins}`\n*üçÄ –£—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö:* `{participation}`\n*üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* `{creation_date}`'
            await bot.send_chat_action(user_id, action="typing")
            await asyncio.sleep(0.5)
            reply = await message.reply(profile, parse_mode="Markdown")
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            reply = await message.reply("‚ò†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        profile_messages.append(reply.message_id)

# # –ü–µ—Ä–º–∞–Ω–Ω–µ–Ω—Ç–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∞–∫–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
# @dp.message_handler(commands=['permanent'])
# async def process_search_command(message: types.Message, state: FSMContext):
#     args = message.get_args()
#
#     global permanent_message_id
#
#     profile_user_id = message.from_user.id
#     user_data = await user_collections.find_one({"_id": profile_user_id})
#     ban_members = user_data.get("ban_members")
#
#     if not args and not message.reply_to_message:
#         if ban_members:
#             result_message = "<b>‚ôæÔ∏è –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:</b>\n\n"
#             for idx, banned_user_id in enumerate(ban_members, start=1):
#                 username = await get_ban_username(banned_user_id)
#                 if username:
#                     username = username.replace("_", "&#95;")
#                 result_message += f"{idx}. @{username} (<code>{banned_user_id}</code>)\n"
#         else:
#             result_message = "<b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç. üö´</b>\n"
#
#         result_message += "\n<b>üìõ –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n" \
#                           "/permanent <code>{id}</code>"
#
#         await bot.send_message(message.chat.id, result_message, parse_mode="HTML")
#         return
#
#     if args:
#         user_id = args
#     elif message.reply_to_message:
#         replied_user = message.reply_to_message.from_user
#         user_id = replied_user.id
#     else:
#         user_id = profile_user_id
#
#     if isinstance(user_id, int):
#         user_id = str(user_id)
#
#     try:
#         user_id = int(user_id)
#     except ValueError:
#         await bot.send_message(message.chat.id, "*‚ùå –í–≤–µ–¥–µ–Ω–Ω—ã–π –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.*", parse_mode="Markdown")
#         return
#
#     if args and user_data and user_id == profile_user_id:
#         await bot.send_message(message.chat.id, "*‚ùå –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.*", parse_mode="Markdown")
#         return
#
#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     try:
#         await bot.get_chat_member(message.chat.id, user_id)
#     except Exception:
#         await bot.send_message(message.chat.id, "*‚ùå –¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.*", parse_mode="Markdown")
#         return
#
#     if not args:
#         if ban_members:
#             result_message = "<b>‚ôæÔ∏è –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:</b>\n\n"
#             for idx, banned_user_id in enumerate(ban_members, start=1):
#                 username = await get_ban_username(banned_user_id)
#                 if username:
#                     username = username.replace("_", "&#95;")
#                 result_message += f"{idx}. @{username} (<code>{banned_user_id}</code>)\n"
#         else:
#             result_message = "<b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç. üö´</b>\n"
#
#         result_message += "\n<b>üìõ –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n" \
#                           "/permanent <code>{id}</code>"
#
#         await bot.send_message(message.chat.id, result_message, parse_mode="HTML")
#         return
#
#     if user_id in ban_members:
#         await del_profile_ban_members(profile_user_id, user_id)
#
            # username = await get_username(user_id)
            # if username:
            #     username = username.replace("_", "&#95;")
#
#         profile = f'<b>üçÅ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b> @{username} (<code>{user_id}</code>) <b>–±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è!</b>\n\n' \
#                   f'<b>‚ôæÔ∏è –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞–ø–∏—à–∏—Ç–µ /permanent</b>'
#         await bot.send_message(message.chat.id, profile, parse_mode="HTML")
#         await state.finish()
#     else:
#         await update_profile_ban_members(profile_user_id, user_id)
#
        # username = await get_username(user_id)
        # if username:
        #     username = username.replace("_", "&#95;")
#
#         profile = f'<b>üçÅ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b> @{username} (<code>{user_id}</code>) <b>–±—ã–ª –≤–Ω–µ—Å–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è!</b>\n\n' \
#                   f'<b>‚ôæÔ∏è –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞–ø–∏—à–∏—Ç–µ /permanent</b>'
#         await bot.send_message(message.chat.id, profile, parse_mode="HTML")
#         await state.finish()

# –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥

@dp.message_handler(commands=['promo'])
async def process_promo_command(message: types.Message):
    args = message.get_args()

    parts = args.split(' ')
    if args:
        user_data = await user_collections.find_one({"_id": message.from_user.id})
        status = user_data.get("status")
        if status == "–°–æ–∑–¥–∞—Ç–µ–ª—å üé≠" or status == "–ê–¥–º–∏–Ω üöó":
            if len(parts) == 1:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /promo (—Å–∞–º –ø—Ä–æ–º–æ–∫–æ–¥)
                promo_code = args
                await handle_promo_code(promo_code, message.from_user.id)
            if len(parts) == 2:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /promo (–Ω–∞–∑–≤–∞–Ω–∏–µ) (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
                promo_name = parts[0]
                quantity = int(parts[1])
                visible = "True"
                prize = "None"
                await create_promo_codes(promo_name, quantity, visible, prize, message.from_user.id)
            elif len(parts) == 3:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /promo (–Ω–∞–∑–≤–∞–Ω–∏–µ) (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ) (–≤–∏–¥–∏–º–æ—Å—Ç—å)
                promo_name = parts[0]
                quantity = int(parts[1])
                visible = parts[2]
                if visible == "False":
                    visible = "False"
                else:
                    visible = "True"
                prize = "None"
                await create_promo_codes(promo_name, quantity, visible, prize, message.from_user.id)
            if status == "–°–æ–∑–¥–∞—Ç–µ–ª—å üé≠":
                if len(parts) == 4:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /promo (–Ω–∞–∑–≤–∞–Ω–∏–µ) (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ) (–≤–∏–¥–∏–º–æ—Å—Ç—å) (–Ω–∞–≥—Ä–∞–¥–∞)
                    promo_name = parts[0]
                    quantity = int(parts[1])
                    visible = parts[2]
                    if visible == "False":
                        visible = "False"
                    else:
                        visible = "True"
                    prize = parts[3]
                    await create_promo_codes(promo_name, quantity, visible, prize, message.from_user.id)
            else:
                pass
        else:
            if len(parts) == 1:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /promo (—Å–∞–º –ø—Ä–æ–º–æ–∫–æ–¥)
                promo_code = args
                await handle_promo_code(promo_code, message.from_user.id)
    else:
        active_promos = await get_active_promo_codes()
        if active_promos:
            await message.reply(f"*üìΩÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:*\n{active_promos}\n\n"
                                "*üß™ –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞* /promo `{–ø—Ä–æ–º–æ–∫–æ–¥}`", parse_mode="Markdown")
        else:
            await message.reply("*ü§´ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!*\n\n"
                                "*üß™ –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞* /promo `{–ø—Ä–æ–º–æ–∫–æ–¥}`", parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥
@dp.message_handler(commands=['promo_list'])
async def process_promo_list_command(message: types.Message):
    promo_id = message.get_args()
    user_data = await user_collections.find_one({"_id": message.from_user.id})
    status = user_data.get("status")
    current_page = 1
    if status == "–°–æ–∑–¥–∞—Ç–µ–ª—å üé≠" or status == "–ê–¥–º–∏–Ω üöó":
        if promo_id:
            promo = await promo_collection.find_one({"_id": promo_id})
            if promo:
                active_members = promo.get("active_members", [])
                uses = promo.get("uses")
                if active_members:
                    await promo_members(message.chat.id, promo_id, current_page)
                else:
                    await message.reply(f"*üìã –ü—Ä–æ–º–æ–∫–æ–¥* `{promo_id}` *–Ω–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∏ –æ–¥–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.*",
                                        parse_mode="Markdown")
            else:
                await message.reply("*‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.*", parse_mode="Markdown")
        else:
            await message.reply("*‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–∞.*", parse_mode="Markdown")

@dp.message_handler(commands=['help'])
async def start_contest_command(message: types.Message):
    user_id = message.from_user.id

    await bot.send_chat_action(user_id, action="typing")
    await asyncio.sleep(0.7)
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    profile = f'*–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –±–æ—Ç—É üí§*\n\n' \
              f'/start - üé≠ –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é, –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É `–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üÜò`.\n' \
              f'/search - üîé –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è –µ–≥–æ –∞–π–¥–∏.\n' \
              f'/profile - üë§ –ß–∞—Ç-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.\n' \
              f'/promo - üß™ –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤, —Ç–∞–∫–∂–µ –∏—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏—è!\n' \
              f'/contest - üéñ –ú–µ–Ω—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—à–∏—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –∏–º–∏, –¥–æ—Å—Ç—É–ø –∫ –º–µ–Ω—é –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ `–∫–ª—é—á üîë`.\n' \
              f'/generate - üóùÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ/–ø–æ–∫—É–ø–∫–∞ (–≤ –±—É–¥—É—â–µ–º) –∫–ª—é—á–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–æ–≤!\n\n'

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏ "–î–µ—Ç–∞–ª—å–Ω–µ–µ"
    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.add(types.InlineKeyboardButton(text="–î–µ—Ç–∞–ª—å–Ω–µ–µ ‚ùî", url="https://teletype.in/@kpyr/Flame"))

    await message.reply(profile, parse_mode="Markdown", reply_markup=inline_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
@dp.message_handler(commands=['clear_all_chats'])
async def clear_all_user_chats(message: types.Message):
    # Get all _id users from the database
    all_user_data = await user_collections.find(projection={"_id": 1}).to_list(length=None)

    if all_user_data:
        chat_id_list = [user_data["_id"] for user_data in all_user_data]

        for chat_id in chat_id_list:
            # Wait a while before deleting the next chat (about 1 second)
            await asyncio.sleep(0.1)

            try:
                # You need to keep track of the message_id when the bot sends a message
                # Here messages is a list or other data structure that holds all the stored message IDs
                messages = get_list_of_message_ids_for_this_chat_id(chat_id)
                for msg_id in messages:
                    await bot.delete_message(chat_id, msg_id)
            except Exception as e:
                print(f"Failed to delete messages in chat {chat_id}: {e}")

@dp.message_handler(commands=['id'])
async def get_user_profile(message: types.Message):
    # Get the user ID from the command arguments
    args = message.get_args()
    if not args:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –∞–π–¥–∏. –ü—Ä–∏–º–µ—Ä: /id <–∞–π–¥–∏>")
        return

    try:
        user_id = int(args)
    except ValueError:
        await message.reply("–ò–Ω–≤–∞–ª–∏–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–π–¥–∏.")
        return

    try:
        # Get the user information using the provided user ID
        user = await bot.get_chat(user_id)
        username = user.username
        first_name = user.first_name
        last_name = user.last_name

        # Create the message showing the user profile
        if username:
            result_message = f"–ü—Ä–æ—Ñ–∏–ª—å üìí\n" \
                             f"–¢—ç–≥: @{username}\n"
        else:
            result_message = "–Æ–∑–µ—Ä–Ω–µ–π–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚ùå\n\n"

        # Add first name and last name if available
        if first_name:
            result_message += f"–ò–º—è: {first_name}"
        if last_name:
            result_message += f" {last_name}"

        await message.reply(result_message)
    except Exception as e:
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–π–¥–∏.")

# –ö–Ω–æ–ø–∫–∏
@dp.callback_query_handler(lambda callback_query: True)
async def button_click(callback_query: types.CallbackQuery, state: FSMContext):
    global contest_name, contest_id, contest_description, winners, end_date
    global profile_messages
    global change_message_id
    global promo_message_id

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
    button_text = callback_query.data
    user_id = callback_query.from_user.id

    emojis = ["üéâ", "üéà", "üéÅ", "üèÜ", "üéñÔ∏è", "üèÖ", "üçô", "üé´", "üéóÔ∏è", "üçø", "üéÄ", "üéüÔ∏è", "üß£", "üéí", "üì£", "üì¢", "üåü", "‚ú®", "üî•", "üéµ",
              "üé∂", "üíÉ", "üï∫", "üéØ", "üìö", "üí°", "üñåÔ∏è", "üì∏", "üé•", "üñºÔ∏è", "üé®", "üíé", "üåπ", "üåº", "üå∫", "üå∑", "üå∏", "üåï", "üåô", "‚≠ê", "üåà", "‚òÄÔ∏è"]

    keyboard = None  # –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π keyboard

    if button_text == 'active_drawings':
        active_drawings = ["*ü´ß –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:*\n"]

        all_contests = contests_collection.find()

        active_contests_found = False  # –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ —Ç–æ, –±—ã–ª–∏ –ª–∏ –Ω–∞–π–¥–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã

        async for contest in all_contests:
            contest_id = contest["_id"]
            members_count = len(contest.get("members", []))
            ended = contest.get("ended")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ "ended", –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False

            if ended == "False":
                message_text = f"*üç≠ –ö–æ–Ω–∫—É—Ä—Å:* `{contest_id}`\n*üèØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* `{members_count}`\n"
                active_drawings.append(message_text)
                active_contests_found = True

        if active_contests_found:
            active_drawings_text = "\n".join(active_drawings)

            # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = types.InlineKeyboardMarkup()
            # statistic = types.InlineKeyboardButton(text='ü™° –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', callback_data='statistic')
            # history = types.InlineKeyboardButton(text='üìú –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é', callback_data='drawings_history')
            done = types.InlineKeyboardButton(text='–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ', callback_data='done')
            # keyboard.add(history, statistic)
            keyboard.add(done)

            await bot.send_message(callback_query.message.chat.id, text=active_drawings_text, parse_mode="Markdown",
                                   reply_markup=keyboard)
        else:
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = types.InlineKeyboardMarkup()
            # statistic = types.InlineKeyboardButton(text='ü™° –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', callback_data='statistic')
            # history = types.InlineKeyboardButton(text='üìú –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é', callback_data='drawings_history')
            done = types.InlineKeyboardButton(text='–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ', callback_data='done')
            # keyboard.add(history, statistic)
            keyboard.add(done)

            await bot.send_message(callback_query.message.chat.id, "*ü´ß –£–ø—Å... –°–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!*",
                                   parse_mode="Markdown", reply_markup=keyboard)

    elif button_text == 'profile':
        global profile_messages

        user_id = callback_query.from_user.id

        # –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_data = await user_collections.find_one({"_id": user_id})

        if user_data:
            username = callback_query.from_user.username
            wins = user_data.get("wins", 0)
            participation = user_data.get("participation", 0)
            creation_date = user_data.get("creation_date", "")
            status = user_data.get("status", "")

            # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
            profile = f'*üçπ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* `{username}`:\n\n*üçß –°—Ç–∞—Ç—É—Å:* `{status}`\n\n*üèÖ –ü–æ–±–µ–¥—ã –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö:* `{wins}`\n*üçÄ –£—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö:* `{participation}`\n*üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* `{creation_date}`'
            keyboard = types.InlineKeyboardMarkup()
            history = types.InlineKeyboardButton(text='–ò—Å—Ç–æ—Ä–∏—è —É—á–∞—Å—Ç–∏–π üìî', callback_data=f'history_{user_id}_None_1')
            id_check = types.InlineKeyboardButton(text='–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ü•è', callback_data='id_check')
            done = types.InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ ‚úÖ', callback_data='done')
            keyboard.add(history, id_check)
            keyboard.add(done)

            reply = await bot.send_message(callback_query.message.chat.id, text=profile, parse_mode="Markdown",
                                           reply_markup=keyboard)
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            reply = await bot.send_message(callback_query.message.chat.id, "‚ò†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        profile_messages.append(reply.message_id)

    elif button_text == 'profile_edit':

        user_id = callback_query.from_user.id

        # –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_data = await user_collections.find_one({"_id": user_id})

        username = callback_query.from_user.username
        wins = user_data.get("wins", 0)
        participation = user_data.get("participation", 0)
        creation_date = user_data.get("creation_date", "")
        status = user_data.get("status", "")

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
        profile = f'*üçπ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* `{username}`:\n\n*üçß –°—Ç–∞—Ç—É—Å:* `{status}`\n\n*üèÖ –ü–æ–±–µ–¥—ã –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö:* `{wins}`\n*üçÄ –£—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö:* `{participation}`\n*üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* `{creation_date}`'
        keyboard = types.InlineKeyboardMarkup()
        history = types.InlineKeyboardButton(text='–ò—Å—Ç–æ—Ä–∏—è —É—á–∞—Å—Ç–∏–π üìî', callback_data=f'history_{user_id}_None_1')
        id_check = types.InlineKeyboardButton(text='–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ü•è', callback_data='id_check')
        done = types.InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ ‚úÖ', callback_data='done')
        keyboard.add(history, id_check)
        keyboard.add(done)

        # Send or edit the message with pagination
        await bot.edit_message_text(profile, callback_query.message.chat.id,
                                                callback_query.message.message_id, parse_mode="Markdown",
                                                reply_markup=keyboard)

    elif button_text == 'support':

        creator_username = "[@Kpyr](https://t.me/Kpyr_uy)"
        support = f"üÜî –í–∞—à id: `{user_id}`\n\n/help - –ü–æ–º–æ—â—å –≤ –±–æ—Ç–µ. üíæ\n\n*üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:*\n\n*üé≠ –°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞:* {creator_username}"

        await callback_query.message.answer(text=support, parse_mode="Markdown")

    elif button_text == 'create':

        # Update the message with new buttons
        keyboard = types.InlineKeyboardMarkup()
        continue_create = types.InlineKeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚úÖ', callback_data='continue_create')
        decline_create = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data='decline_create')
        keyboard.add(decline_create, continue_create)
        create_text = f"*üí† –ï—Å–ª–∏ –≤—ã —Å–æ–∑–¥–∞–¥–∏—Ç–µ –∫–æ–Ω–∫—É—Ä—Å –≤–∞—à —Ä–∞–Ω–µ–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –ø–æ—Ç—Ä–∞—Ç–∏—Ç—Å—è –∏ –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã –¥–æ –º–æ–º–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞, –≤—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?*"

        # Get the message ID from the contest_messages list
        message_id = contest_messages[-1]

        # Update the message with new text and buttons
        await bot.edit_message_text(create_text, callback_query.message.chat.id, message_id, parse_mode="Markdown",
                                    reply_markup=keyboard)

    elif button_text == 'decline_create':

        # Clear the waiting state
        await state.finish()

        user_id = callback_query.from_user.id
        user_data = await user_collections.find_one({"_id": user_id})

        if user_data and (
                ("status" in user_data and user_data["status"] in ["–¢–µ—Å—Ç–µ—Ä ‚ú®", "–ê–¥–º–∏–Ω üöó", "–°–æ–∑–¥–∞—Ç–µ–ª—å üé≠"]) or int(
                user_data.get("keys", 0)) > 0):
            # Code for existing user
            keyboard = types.InlineKeyboardMarkup()
            search = types.InlineKeyboardButton(text='üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data='search')
            create = types.InlineKeyboardButton(text='üé´ –°–æ–∑–¥–∞—Ç—å', callback_data='create')
            change = types.InlineKeyboardButton(text='üç≠ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data='change')
            keyboard.row(change, search)
            keyboard.row(create)

            # Get the message ID from the contest_messages list
            message_id = contest_messages[-1]
            text = "*üç° –†–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞–º–∏!*\n\n*‚ú® –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–æ–º –∏–ª–∏ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è:*"

            reply = await bot.edit_message_text(text, callback_query.message.chat.id, message_id, parse_mode="Markdown",
                                                reply_markup=keyboard)

            # Update the message ID in the contest_messages list
            contest_messages[-1] = reply.message_id
        else:
            # Code for existing user
            keyboard = types.InlineKeyboardMarkup()
            input_key = types.InlineKeyboardButton(text='üîë –í–≤–µ—Å—Ç–∏ –∫–ª—é—á', callback_data='input_key')
            keyboard.row(input_key)

            # Get the message ID from the contest_messages list
            message_id = contest_messages[-1]
            text = "*üëÄ –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –∏ –≤–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ–Ω–∫—É—Ä—Å–æ–≤:*"

            reply = await bot.edit_message_text(text, callback_query.message.chat.id, message_id, parse_mode="Markdown",
                                                reply_markup=keyboard)

            # Update the message ID in the contest_messages list
            contest_messages[-1] = reply.message_id

    elif button_text == 'continue_create':

        # Update the message with new text
        create_text = "*ü™Å –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–Ω–∫—É—Ä—Å–∞:*"

        keyboard = types.InlineKeyboardMarkup()
        input_key = types.InlineKeyboardButton(text=' –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üö©', callback_data='skip_name')
        keyboard.row(input_key)

        # Get the message ID from the contest_messages list
        message_id = contest_messages[-1]

        await bot.edit_message_text(create_text, callback_query.message.chat.id, message_id, parse_mode="Markdown", reply_markup=keyboard)

        # Set the waiting state to capture the user's input
        await CreateContestState.name.set()

    elif button_text == 'confirm_create':

        user_id = callback_query.from_user.id
        user_data = await user_collections.find_one({"_id": user_id})

        if user_data and ("status" in user_data and user_data["status"] in ["–¢–µ—Å—Ç–µ—Ä ‚ú®", "–ê–¥–º–∏–Ω üöó", "–°–æ–∑–¥–∞—Ç–µ–ª—å üé≠"]):
            pass
        else:
            await user_collections.update_one({"_id": user_id}, {"$inc": {"keys": -1}})

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –∑–∞–ø—É—Å–∫–∞
        start_link = await generate_start_link(contest_id)

        confirmation_text = f"*üç≠ –ö–æ–Ω–∫—É—Ä—Å* `{contest_id}` *–±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*\n*üó∫Ô∏è –¢–∞–∫–∂–µ, –¥–µ—Ä–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* `{start_link}`"

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞
        await create_contest(contest_id, user_id, contest_name, contest_description, int(winners), end_date, start_link)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ contest_messages
        message_id = contest_messages[-1]

        await bot.edit_message_text(confirmation_text, callback_query.message.chat.id, message_id,
                                    parse_mode="Markdown", reply_markup=keyboard)

    elif button_text == 'back_search':

        message_id = contest_messages[-1]

        user_id = callback_query.from_user.id
        user_data = await user_collections.find_one({"_id": user_id})

        if user_data and (
                ("status" in user_data and user_data["status"] in ["–¢–µ—Å—Ç–µ—Ä ‚ú®", "–ê–¥–º–∏–Ω üöó", "–°–æ–∑–¥–∞—Ç–µ–ª—å üé≠"]) or int(
                user_data.get("keys", 0)) > 0):

            # –ö–æ–¥ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            keyboard = types.InlineKeyboardMarkup()
            search = types.InlineKeyboardButton(text='üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data='search')
            create = types.InlineKeyboardButton(text='üé´ –°–æ–∑–¥–∞—Ç—å', callback_data='create')
            change = types.InlineKeyboardButton(text='üç≠ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data='change')
            keyboard.row(change, search)
            keyboard.row(create)

            confirmation_text = "*üç° –†–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞–º–∏!*\n\n*‚ú® –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–æ–º –∏–ª–∏ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è:*"

            reply = await bot.edit_message_text(confirmation_text, callback_query.message.chat.id, message_id,
                                                parse_mode="Markdown",
                                                reply_markup=keyboard)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            contest_messages.append(reply.message_id)

        else:
            # –ö–æ–¥ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            keyboard = types.InlineKeyboardMarkup()
            input_key = types.InlineKeyboardButton(text='üîë –í–≤–µ—Å—Ç–∏ –∫–ª—é—á', callback_data='input_key')
            keyboard.row(input_key)

            confirmation_text = "*üëÄ –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –∏ –≤–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ–Ω–∫—É—Ä—Å–æ–≤:*"

            reply = await bot.edit_message_text(confirmation_text, callback_query.message.chat.id, message_id,
                                                parse_mode="Markdown",
                                                reply_markup=keyboard)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            contest_messages.append(reply.message_id)

    elif button_text.startswith('history'):
        user_id = callback_query.from_user.id

        parts = button_text.split('_')
        if user_id:
            pass
        else:
            user_id = int(parts[1])
        action = parts[2]
        current_page = int(parts[3])

        if action == 'prev':
            current_page -= 1
        elif action == 'next':
            current_page += 1
        else:
            current_page = 1

        await show_user_history(callback_query, user_id, current_page)

    elif button_text == 'back_history':

        user_id = callback_query.from_user.id

        message_id = profile_messages[-1]

        # –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_data = await user_collections.find_one({"_id": user_id})

        if user_data:
            username = callback_query.from_user.username
            wins = user_data.get("wins", 0)
            participation = user_data.get("participation", 0)
            creation_date = user_data.get("creation_date", "")
            status = user_data.get("status", "")

            # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
            profile = f'*üçπ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* `{username}`:\n\n*üçß –°—Ç–∞—Ç—É—Å:* `{status}`\n\n*üèÖ –ü–æ–±–µ–¥—ã –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö:* `{wins}`\n*üçÄ –£—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö:* `{participation}`\n*üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* `{creation_date}`'
            keyboard = types.InlineKeyboardMarkup()
            history = types.InlineKeyboardButton(text='–ò—Å—Ç–æ—Ä–∏—è —É—á–∞—Å—Ç–∏–π üìî', callback_data='history')
            id_check = types.InlineKeyboardButton(text='–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ü•è', callback_data='id_check')
            done = types.InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ ‚úÖ', callback_data='done')
            keyboard.add(history, id_check)
            keyboard.add(done)

            reply = await bot.edit_message_text(profile, callback_query.message.chat.id, message_id,
                                                parse_mode="Markdown",
                                                reply_markup=keyboard)
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            reply = await bot.send_message(callback_query.message.chat.id, "‚ò†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        profile_messages.append(reply.message_id)

    elif button_text == 'change':

        user_id = callback_query.from_user.id

        # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
        contests = await contests_collection.find({"owner_id": user_id}).to_list(length=None)

        message_id = contest_messages[-1]

        if contests:
            # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–æ–Ω–∫—É—Ä—Å–∞–º–∏
            result_message = "*üéØ –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã:*\n\n"

            # –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É –∫–æ–Ω–∫—É—Ä—Å—É —Å –ø–æ–º–æ—â—å—é enumerate
            for idx, contest in enumerate(contests, start=1):
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
                contest_id = contest.get("_id")
                contest_name = contest.get("contest_name")
                members = contest.get("members")
                ended = contest.get("ended")

                if ended == "True":
                    pass
                else:
                    if members:
                        members_count = len(members)
                    else:
                        members_count = 0
                    if members_count > 0:
                        members_message = f"{members_count}"
                    else:
                        members_message = "0"

                    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–Ω–∫—É—Ä—Å–∞ –∏ –≤–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
                    result_message += f"                            *= {idx} =*\n" \
                                      f"*ü™Å –ò–º—è:* `{contest_name}`\n" \
                                      f"*üßä –ê–π–¥–∏ –∫–æ–Ω–∫—É—Ä—Å–∞* `{contest_id}`*:*\n" \
                                      f"*üèØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* `{members_message}`\n\n"
        else:
            result_message = "*–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤ ‚ùå*"

        keyboard = types.InlineKeyboardMarkup()
        decline_create = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data='decline_create')
        contest_check = types.InlineKeyboardButton(text='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ üßß', callback_data='contest_check')

        keyboard.row(contest_check)
        keyboard.row(decline_create)

        reply = await bot.edit_message_text(result_message, callback_query.message.chat.id, message_id,
                                            parse_mode="Markdown",
                                            reply_markup=keyboard)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        change_message_id.append(reply.message_id)

    elif button_text == 'contest_check':

        user_id = callback_query.from_user.id

        # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
        contests = await contests_collection.find({"owner_id": user_id}).to_list(length=None)
        message_id = contest_messages[-1]

        if contests:

            # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–æ–Ω–∫—É—Ä—Å–∞–º–∏
            result_message = "*üßß –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—É—Ä—Å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:*\n\n"

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫–æ–Ω–∫—É—Ä—Å–æ–≤
            keyboard = types.InlineKeyboardMarkup()

            # –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É –∫–æ–Ω–∫—É—Ä—Å—É
            for contest in contests:

                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
                contest_id = contest.get("_id")
                ended = contest.get("ended")
                if ended == "True":
                    pass
                else:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–º–æ–¥–∑–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
                    random_emoji = random.choice(emojis)

                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞ —Å —ç–º–æ–¥–∑–∏
                    contest_button = types.InlineKeyboardButton(text=f'{contest_id} {random_emoji} ',
                                                                callback_data=f'contest_button_{contest_id}')
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    keyboard.row(contest_button)

            decline_create = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø',
                                                        callback_data="decline_create")
            keyboard.row(decline_create)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–æ–Ω–∫—É—Ä—Å–∞–º–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            reply = await bot.edit_message_text(result_message, callback_query.message.chat.id, message_id,
                                                parse_mode="Markdown",
                                                reply_markup=keyboard)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            change_message_id.append(reply.message_id)

        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            no_contests_message = "*–£ –≤–∞—Å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤‚ÄºÔ∏è*"
            int_digit = await bot.edit_message_text(no_contests_message, callback_query.message.chat.id, message_id,
                                                    parse_mode="Markdown")
            change_message_id.append(int_digit.message_id)

    elif button_text.startswith('contest_button'):

        contest_id = button_text.split('_')[2]

        # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
        contest = await contests_collection.find_one({"_id": int(contest_id)})
        message_id = change_message_id[-1]

        if contest:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
            contest_id = contest.get("_id")
            contest_name = contest.get("contest_name")
            contest_description = contest.get("contest_description")
            winners = contest.get("winners")
            members = contest.get("members")
            end_date = contest.get("end_date")

            if members:
                members_count = len(members)
            else:
                members_count = 0

            if members_count > 0:
                members_message = f"{members_count}"
            else:
                members_message = "0"

            result_message = f"*üèÜ –†–µ–¥–∞–∫—Ü–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞* `{contest_id}`*:*\n\n" \
                                f"*ü™Å –ò–º—è:* `{contest_name}`\n" \
                                f"*üßä –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:* `{contest_id}`\n" \
                                f"*üéóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:* _{contest_description}_\n" \
                                f"*üéñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:* `{winners}`\n" \
                                f"*üèØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* `{members_message}`\n" \
                                f"*üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:* `{end_date}`"

            keyboard = types.InlineKeyboardMarkup()
            contest_change = types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–µ–Ω–∏–µ ü•®', callback_data=f'contest_change_{contest_id}')
            winner = types.InlineKeyboardButton(text='–í—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç. üèÜ', callback_data=f'winner_refining_{contest_id}')
            members = types.InlineKeyboardButton(text='–£—á–∞—Å—Ç–∏–Ω–∫–∏ üèØ', callback_data=f'members_{contest_id}_None_1')
            back_search = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data='change')
            keyboard.row(contest_change, winner)
            keyboard.row(members)
            keyboard.row(back_search)

            reply = await bot.edit_message_text(result_message, callback_query.message.chat.id, message_id, parse_mode="Markdown",
                                                reply_markup=keyboard)
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            change_message_id.append(reply.message_id)
        else:
            int_digit = await bot.send_message(callback_query.message.chat.id, "*‚ùå –ö–æ–Ω–∫—É—Ä—Å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∞–π–¥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.*",
                                               parse_mode="Markdown")
            await asyncio.sleep(4)
            await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=int_digit.message_id)

    elif button_text.startswith('contest_change'):

        contest_id = button_text.split('_')[2]

        # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
        contest = await contests_collection.find_one({"_id": int(contest_id)})
        message_id = change_message_id[-1]

        if contest:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
            contest_id = contest.get("_id")
            contest_name = contest.get("contest_name")
            contest_description = contest.get("contest_description")
            winners = contest.get("winners")
            members = contest.get("members")
            end_date = contest.get("end_date")

            if members:
                members_count = len(members)
            else:
                members_count = 0

            if members_count > 0:
                members_message = f"{members_count}"
            else:
                members_message = "0"

            result_message = f"*üèÜ –†–µ–¥–∞–∫—Ü–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞* `{contest_id}`*:*\n\n" \
                                f"*ü™Å –ò–º—è:* `{contest_name}`\n" \
                                f"*üßä –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:* `{contest_id}`\n" \
                                f"*üéóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:* _{contest_description}_\n" \
                                f"*üéñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:* `{winners}`\n" \
                                f"*üèØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* `{members_message}`\n" \
                                f"*üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:* `{end_date}`"

            keyboard = types.InlineKeyboardMarkup()
            name_change = types.InlineKeyboardButton(text='–ò–º—è  Ô∏èü™Å', callback_data=f'name_change_{contest_id}')
            description_change = types.InlineKeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ üéóÔ∏èÔ∏è', callback_data=f'description_change_{contest_id}')
            winners_change = types.InlineKeyboardButton(text='–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ üéñÔ∏è', callback_data=f'winners_change_{contest_id}')
            date_change = types.InlineKeyboardButton(text='–î–∞—Ç–∞  Ô∏èüìÜ', callback_data=f'date_change_{contest_id}')
            back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data=f'change')
            keyboard.row(name_change)
            keyboard.row(description_change)
            keyboard.row(winners_change)
            keyboard.row(date_change)
            keyboard.row(back)

            reply = await bot.edit_message_text(result_message, callback_query.message.chat.id, message_id, parse_mode="Markdown",
                                                reply_markup=keyboard)
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            change_message_id.append(reply.message_id)
        else:
            int_digit = await bot.send_message(callback_query.message.chat.id, "*‚ùå –ö–æ–Ω–∫—É—Ä—Å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∞–π–¥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.*",
                                               parse_mode="Markdown")
            await asyncio.sleep(4)
            await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=int_digit.message_id)

    elif button_text.startswith('winner_refining'):

        contest_id = button_text.split('_')[2]

        # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
        contest = await contests_collection.find_one({"_id": int(contest_id)})
        members = contest.get("members")
        winners = contest.get("winners")
        message_id = change_message_id[-1]

        if int(winners) > len(members):
            result_message = f"‚ùå *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞* `{contest_id}`*:*\n\n" \
                             f"*ü•á –£–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:* `{winners}`\n" \
                             f"*üë§ –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* `{len(members)}`"
            keyboard = types.InlineKeyboardMarkup()
            winner_decline = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data='change')
            keyboard.row(winner_decline)
        else:
            result_message = f"üèÜ *–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å* `{contest_id}`*?*"
            keyboard = types.InlineKeyboardMarkup()
            winner = types.InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ', callback_data=f'winner_{contest_id}')
            winner_decline = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data='change')
            keyboard.row(winner_decline, winner)

        reply = await bot.edit_message_text(result_message, callback_query.message.chat.id, message_id, parse_mode="Markdown",
                                                reply_markup=keyboard)
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        change_message_id.append(reply.message_id)

    elif button_text.startswith('winner'):

        contest_id = button_text.split('_')[1]

        # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
        contest = await contests_collection.find_one({"_id": int(contest_id)})
        winners = contest.get("winners")
        members = contest.get("members")

        message_id = change_message_id[-1]

        if len(members) < int(winners):
            await bot.edit_message_text("*‚ùå –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ–Ω—å—à–µ, —á–µ–º –∑–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π.*\n\n"
                                        f"ü•á –ß–∏—Å–ª–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {winners}"
                                        f"üë§ –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ {len(members)}",
                                        callback_query.message.chat.id, message_id, parse_mode="Markdown")
            return

        # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
        random_winners = random.sample(members, int(winners))
        result_message = f"<b>üèÜ –ö–æ–Ω–∫—É—Ä—Å</b> <code>{contest_id}</code> <b>–±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"

        if int(winners) > 1:
            result_message += "<b>üéñÔ∏è –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:</b>\n"
            share_message = f"** - –ö–æ–Ω–∫—É—Ä—Å –±–æ—Ç üé≠**\n\n**üéñÔ∏è –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –∫–æ–Ω–∫—É—Ä—Å–∞** `{contest_id}`:\n"

            for idx, winner in enumerate(random_winners, start=1):
                user_id = winner
                username = await get_username(user_id)
                if username:
                    formatted_username = username.replace("_", "&#95;")
                else:
                    formatted_username = "None"
                result_message += f"<b>{idx}.</b> @{formatted_username} <b>‚Äî</b> <code>{winner}</code>\n"
                share_message += f"**{idx}.** @{username} ‚Äî `{user_id}`\n"

                # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–±–µ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_data = await user_collections.find_one({"_id": user_id})

                if user_data:
                    wins = user_data.get("wins", 0)
                    wins += 1
                    await update_status(user_id)
                    await user_collections.update_one({"_id": user_id}, {"$set": {"wins": wins}}, upsert=True)
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–æ–±–µ–¥–µ
                    winner_message = f"*ü•á –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å—Ç–∞–ª–∏ –æ–¥–Ω–∏–º –∏–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∫–æ–Ω–∫—É—Ä—Å–∞* `{contest_id}`*!*"
                    await bot.send_message(user_id, winner_message, parse_mode="Markdown")
                if contest:
                    ended = "True"
                    await contests_collection.update_one({"_id": int(contest_id)}, {"$set": {"ended": ended}}, upsert=True)
                await update_win_contest_members(contest_id, user_id)

        else:
            result_message += "<b>üéñÔ∏è –ü–æ–±–µ–¥–∏—Ç–µ–ª—å:</b>\n"

            user_id = random_winners[0]

            username = await get_username(user_id)
            if username:
                formatted_username = username.replace("_", "&#95;")
            else:
                formatted_username = "None"

            result_message += f"@{formatted_username} <b>‚Äî</b> <code>{user_id}</code>"
            share_message = f"** - –ö–æ–Ω–∫—É—Ä—Å –±–æ—Ç üé≠**\n\n**üéñÔ∏è –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∫–æ–Ω–∫—É—Ä—Å–∞** `{contest_id}`:\n" \
                            f"@{username} ‚Äî `{user_id}`"

            # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–±–µ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = await user_collections.find_one({"_id": user_id})

            if user_data:
                wins = user_data.get("wins", 0)
                wins += 1
                await update_status(user_id)
                await user_collections.update_one({"_id": user_id}, {"$set": {"wins": wins}}, upsert=True)
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–æ–±–µ–¥–µ
                winner_message = f"*ü•á –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å—Ç–∞–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –∫–æ–Ω–∫—É—Ä—Å–∞* `{contest_id}`*!*"
                await bot.send_message(user_id, winner_message, parse_mode="Markdown")
            if contest:
                ended = "True"
                await contests_collection.update_one({"_id": int(contest_id)}, {"$set": {"ended": ended}}, upsert=True)
            await update_win_contest_members(contest_id, user_id)

        markup = types.InlineKeyboardMarkup()
        share_button = types.InlineKeyboardButton(text='–ü–æ–¥–µ–ª–∏—Ç—å—Å—è ü´¥', switch_inline_query=f'{share_message}')
        markup.add(share_button)

        reply = await bot.edit_message_text(result_message, callback_query.message.chat.id, message_id,
                                            parse_mode="HTML",
                                            reply_markup=markup)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        change_message_id.append(reply.message_id)

    elif button_text.startswith('members'):

        parts = button_text.split('_')
        contest_id = int(parts[1])
        action = parts[2]
        current_page = int(parts[3])

        if action == 'prev':
            current_page -= 1

        elif action == 'next':
            current_page += 1

        await show_members(callback_query, contest_id, current_page)

    elif button_text.startswith('ban_members'):

        parts = button_text.split('_')
        contest_id = parts[2]
        action = parts[3]
        current_page = int(parts[4])

        if action == 'prev':
            current_page -= 1

        elif action == 'next':
            current_page += 1

        await show_ban_members(callback_query, contest_id, current_page)

    elif button_text.startswith('block_profile'):

        parts = button_text.split('_')
        search_user_id = parts[2]
        contest_id = parts[3]

        # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
        contest = await contests_collection.find_one({"_id": int(contest_id)})
        user_data = await user_collections.find_one({"_id": int(search_user_id)})
        participation = user_data.get("participation")

        if contest:
            members = contest.get("members")
            ban_members = contest.get("ban_members")
            join_date = contest.get("join_date")

            if int(search_user_id) in members or int(search_user_id) in ban_members:
                user_index = members.index(int(search_user_id))

                await bot.answer_callback_query(callback_query.id, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω! ‚úîÔ∏è")

                # –£–¥–∞–ª–µ–Ω–∏–µ search_user_id –∏–∑ members
                members.remove(int(search_user_id))

                # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ join_date
                join_date.pop(user_index)

                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ search_user_id –≤ ban_members
                ban_members.append(int(search_user_id))

                if participation > 0:
                    # –£–º–µ–Ω—å—à–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏–π –Ω–∞ 1
                    participation_result = int(participation) - 1

                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ participation –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await user_collections.update_one({"_id": int(search_user_id)},
                                                      {"$set": {"participation": participation_result}})
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await contests_collection.update_one({"_id": int(contest_id)}, {
                    "$set": {"members": members, "join_date": join_date, "ban_members": ban_members}})

                message_id = change_message_id[-1]

                username = await get_username(search_user_id)
                if username:
                    username = username.replace("_", "&#95;")

                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                result_message = f"<b>üß∂–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>{search_user_id}</code>\n" \
                                 f"<b>ü™ê –Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{username}\n" \
                                 f"<b>‚ÄºÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> <code>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</code>"
                unblock = types.InlineKeyboardButton(text='–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å ‚ùé',
                                                     callback_data=f'unblock_profile_{search_user_id}_{contest_id}')

                keyboard = types.InlineKeyboardMarkup()
                back_search = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data='contest_check')
                input_id = types.InlineKeyboardButton(text='–ò—Å–∫–∞—Ç—å –µ—â—ë üîé',
                                                      callback_data=f'contest_search_profile_{contest_id}')
                keyboard.row(input_id)
                keyboard.row(unblock)
                keyboard.row(back_search)

                reply = await bot.edit_message_text(result_message, callback_query.message.chat.id, message_id,
                                                    parse_mode="HTML",
                                                    reply_markup=keyboard)

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                change_message_id.append(reply.message_id)
            else:
                int_digit = await bot.send_message(callback_query.message.chat.id, "*‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω.*",
                                                   parse_mode="Markdown")
                await asyncio.sleep(4)
                await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=int_digit.message_id)
        else:
            int_digit = await bot.send_message(callback_query.message.chat.id, "*‚ùå –ö–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.*",
                                               parse_mode="Markdown")
            await asyncio.sleep(4)
            await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=int_digit.message_id)

    elif button_text.startswith('unblock_profile'):

        parts = button_text.split('_')
        search_user_id = parts[2]
        contest_id = parts[3]

        # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
        contest = await contests_collection.find_one({"_id": int(contest_id)})

        if contest:

            members = contest.get("members")
            ban_members = contest.get("ban_members")

            if int(search_user_id) in members or int(search_user_id) in ban_members:

                await bot.answer_callback_query(callback_query.id, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω! ‚úîÔ∏è")

                # –£–¥–∞–ª–µ–Ω–∏–µ search_user_id –∏–∑ ban_members
                ban_members.remove(int(search_user_id))

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await contests_collection.update_one({"_id": int(contest_id)}, {
                    "$set": {"ban_members": ban_members}})

                message_id = change_message_id[-1]

                username = await get_username(search_user_id)
                if username:
                    username = username.replace("_", "&#95;")

                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                result_message = f"<b>üß∂–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>{search_user_id}</code>\n" \
                                 f"<b>ü™ê –Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{username}\n" \
                                 f"<b>‚ùé –°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> <code>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</code>"

                keyboard = types.InlineKeyboardMarkup()
                back_search = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data='contest_check')
                input_id = types.InlineKeyboardButton(text='–ò—Å–∫–∞—Ç—å –µ—â—ë üîé',
                                                      callback_data=f'contest_search_profile_{contest_id}')
                keyboard.row(input_id)
                keyboard.row(back_search)

                reply = await bot.edit_message_text(result_message, callback_query.message.chat.id, message_id,
                                                    parse_mode="HTML",
                                                    reply_markup=keyboard)

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                change_message_id.append(reply.message_id)
            else:
                int_digit = await bot.send_message(callback_query.message.chat.id, "*‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω.*",
                                                   parse_mode="Markdown")
                await asyncio.sleep(4)
                await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=int_digit.message_id)
        else:
            int_digit = await bot.send_message(callback_query.message.chat.id, "*‚ùå –ö–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.*",
                                               parse_mode="Markdown")
            await asyncio.sleep(4)
            await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=int_digit.message_id)

    elif button_text.startswith('kick_profile'):

        parts = button_text.split('_')
        search_user_id = parts[2]
        contest_id = parts[3]

        # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
        contest = await contests_collection.find_one({"_id": int(contest_id)})
        user_data = await user_collections.find_one({"_id": int(search_user_id)})
        participation = user_data.get("participation")

        if contest:
            members = contest.get("members")
            join_date = contest.get("join_date")

            if int(search_user_id) in members:
                user_index = members.index(int(search_user_id))

                await bot.answer_callback_query(callback_query.id, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω! ‚úîÔ∏è")

                # –£–¥–∞–ª–µ–Ω–∏–µ search_user_id –∏–∑ members
                members.remove(int(search_user_id))

                # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ join_date
                join_date.pop(user_index)

                if participation > 0:
                    # –£–º–µ–Ω—å—à–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏–π –Ω–∞ 1
                    participation_result = int(participation) - 1

                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ participation –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await user_collections.update_one({"_id": int(search_user_id)},
                                                          {"$set": {"participation": participation_result}})

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await contests_collection.update_one({"_id": int(contest_id)}, {
                    "$set": {"members": members, "join_date": join_date}})

                message_id = change_message_id[-1]

                username = await get_username(search_user_id)
                if username:
                    username = username.replace("_", "&#95;")

                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                result_message = f"<b>üß∂–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>{search_user_id}</code>\n" \
                                 f"<b>ü™ê –Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{username}\n" \
                                 f"<b>‚ÄºÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> <code>–ò—Å–∫–ª—é—á–µ–Ω!</code>"

                keyboard = types.InlineKeyboardMarkup()
                back_search = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data='contest_check')
                input_id = types.InlineKeyboardButton(text='–ò—Å–∫–∞—Ç—å –µ—â—ë üîé',
                                                      callback_data=f'contest_search_profile_{contest_id}')
                keyboard.row(input_id)
                keyboard.row(back_search)

                reply = await bot.edit_message_text(result_message, callback_query.message.chat.id, message_id,
                                                    parse_mode="HTML",
                                                    reply_markup=keyboard)

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                change_message_id.append(reply.message_id)
            else:
                int_digit = await bot.send_message(callback_query.message.chat.id, "*‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω.*",
                                                   parse_mode="Markdown")
                await asyncio.sleep(4)
                await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=int_digit.message_id)
        else:
            int_digit = await bot.send_message(callback_query.message.chat.id, "*‚ùå –ö–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.*",
                                               parse_mode="Markdown")
            await asyncio.sleep(4)
            await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=int_digit.message_id)

    elif button_text.startswith('promo'):

        parts = button_text.split('_')
        promo = str(parts[1])
        action = parts[2]
        current_page = int(parts[3])
        message_id = promo_message_id[-1]

        if action == 'prev':
            current_page -= 1

        elif action == 'next':
            current_page += 1

        # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
        promo_code = await promo_collection.find_one({"_id": promo})

        members = promo_code.get("active_members")
        result_message = f"<b>üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞</b> <code>{promo}</code>:\n\n" \
                         f"                                   <b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}</b>\n\n"

        keyboard = types.InlineKeyboardMarkup()

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        per_page = 25
        start_index = (current_page - 1) * per_page
        end_index = current_page * per_page
        page_members = members[start_index:end_index] if start_index < len(members) else []
        for idx, user_id in enumerate(page_members, start=start_index + 1):
            username = await get_username(user_id)
            if username:
                username = username.replace("_", "&#95;")
            result_message += f"<b>{idx}.</b> @{username} <b>(</b><code>{user_id}</code><b>)</b>\n"

        # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è
        prev_button = types.InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=f'promo_{promo}_prev_{current_page}')
        next_button = types.InlineKeyboardButton(text='–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è', callback_data=f'promo_{promo}_next_{current_page}')
        back = types.InlineKeyboardButton(text='–í—ã–ø–æ–ª–µ–Ω–µ–Ω–æ ‚úÖ', callback_data='done')

        # Add both buttons if there are both previous and next pages
        if current_page > 1 and end_index < len(members):
            keyboard.row(prev_button, next_button)
        # Add only the previous button if there are no more pages
        elif current_page > 1:
            keyboard.row(prev_button)
        # Add only the next button if this is the first page
        elif end_index < len(members):
            keyboard.row(next_button)
        keyboard.row(back)
        uses = promo_code.get("uses")
        result_message += f"\n\n<b>üß™ –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π:</b> <code>{uses}</code>"

        await bot.edit_message_text(result_message, callback_query.message.chat.id, message_id, parse_mode="HTML",
                                    reply_markup=keyboard)

    elif button_text == 'buy_key':
        result_message = "*üí≤ –¶–µ–Ω–∞ –∫–ª—é—á–∞ –Ω–∞ –æ–¥–Ω—É –∞–∫—Ç–∏–≤–∞—Ü–∏—é* `1$`\n" \
                         "*üîë –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π* /buy_key *–¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–ª—é—á–∞.*"
        await bot.edit_message_text(result_message, callback_query.message.chat.id, callback_query.message.message_id, parse_mode="Markdown",
                                    reply_markup=keyboard)

    elif button_text == 'done':

        await bot.answer_callback_query(callback_query.id, text="–ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! ‚úîÔ∏è")

        await bot.delete_message(callback_query.message.chat.id,
                                 callback_query.message.message_id)  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è

async def perform_contest_draw(contest_id):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–Ω–∫—É—Ä—Å–µ
    contest = await contests_collection.find_one({"_id": int(contest_id)})
    winners = contest.get("winners")
    members = contest.get("members")
    owner_id = contest.get("owner_id")

    if len(members) < winners:
        winners_enough_message = "*‚ùå –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ–Ω—å—à–µ, —á–µ–º –∑–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π, –¥–∞—Ç–∞ –∫–æ–Ω–∫—É—Ä—Å–∞ –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞.*\n\n" \
                                 f"*üßä –ê–π–¥–∏ –∫–æ–Ω–∫—É—Ä—Å–∞:* `{contest_id}`\n" \
                                 f"*ü•á –ß–∏—Å–ª–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:* `{winners}`\n" \
                                 f"*üë§ –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* `{len(members)}`"
        await bot.send_message(owner_id, winners_enough_message, parse_mode="Markdown")
        # Update the flag to True since the message has been sent
        await contests_collection.update_one({"_id": int(contest_id)},
                                             {"$set": {"end_date": "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞. üö´"}})
        return  # Remove this 'return' statement

    # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    random_winners = random.sample(members, winners)
    result_message = f"<b>üèÜ –ö–æ–Ω–∫—É—Ä—Å</b> <code>{contest_id}</code> <b>–±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"

    if winners > 1:
        result_message += "<b>üéñÔ∏è –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:</b>\n"
        share_message = f"** - –ö–æ–Ω–∫—É—Ä—Å –±–æ—Ç üé≠**\n\n**üéñÔ∏è –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –∫–æ–Ω–∫—É—Ä—Å–∞** `{contest_id}`:\n"

        for idx, winner in enumerate(random_winners, start=1):
            user_id = winner
            username = await get_username(user_id)
            if username:
                formatted_username = username.replace("_", "&#95;")
            else:
                formatted_username = "None"

            result_message += f"<b>{idx}.</b> @{formatted_username} <b>‚Äî</b> <code>{winner}</code>\n"
            share_message += f"**{idx}.** @{username} ‚Äî `{user_id}`\n"

            # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–±–µ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = await user_collections.find_one({"_id": user_id})

            if user_data:
                wins = user_data.get("wins", 0)
                wins += 1
                await update_status(user_id)
                await user_collections.update_one({"_id": user_id}, {"$set": {"wins": wins}}, upsert=True)
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–æ–±–µ–¥–µ
                winner_message = f"*ü•á –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å—Ç–∞–ª–∏ –æ–¥–Ω–∏–º –∏–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∫–æ–Ω–∫—É—Ä—Å–∞* `{contest_id}`*!*"
                await bot.send_message(user_id, winner_message, parse_mode="Markdown")
            await update_win_contest_members(contest_id, user_id)

        if contest:
            ended = "True"
            await contests_collection.update_one({"_id": int(contest_id)}, {"$set": {"ended": ended}}, upsert=True)
    else:
        result_message += "<b>üéñÔ∏è –ü–æ–±–µ–¥–∏—Ç–µ–ª—å:</b>\n"

        user_id = random_winners[0]

        username = await get_username(user_id)
        if username:
            formatted_username = username.replace("_", "&#95;")
        else:
            formatted_username = "None"

        result_message += f"@{formatted_username} <b>‚Äî</b> <code>{user_id}</code>"
        share_message = f"** - –ö–æ–Ω–∫—É—Ä—Å –±–æ—Ç üé≠**\n\n**üéñÔ∏è –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∫–æ–Ω–∫—É—Ä—Å–∞** `{contest_id}`:\n" \
                        f"@{username} ‚Äî `{user_id}`"

        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–±–µ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await user_collections.find_one({"_id": user_id})

        if user_data:
            wins = user_data.get("wins", 0)
            wins += 1
            await update_status(user_id)
            await user_collections.update_one({"_id": user_id}, {"$set": {"wins": wins}}, upsert=True)
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–æ–±–µ–¥–µ
            winner_message = f"*ü•á –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å—Ç–∞–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –∫–æ–Ω–∫—É—Ä—Å–∞* `{contest_id}`*!*"
            await bot.send_message(user_id, winner_message, parse_mode="Markdown")
        if contest:
            ended = "True"
            await contests_collection.update_one({"_id": int(contest_id)}, {"$set": {"ended": ended}}, upsert=True)
        await update_win_contest_members(contest_id, user_id)

    markup = types.InlineKeyboardMarkup()
    share_button = types.InlineKeyboardButton(text='–ü–æ–¥–µ–ª–∏—Ç—å—Å—è ü´¥', switch_inline_query=f'{share_message}')
    markup.add(share_button)

    reply = await bot.send_message(owner_id, result_message, parse_mode="HTML",
                                        reply_markup=markup)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    change_message_id.append(reply.message_id)

timezone = pytz.timezone('Europe/Kiev')

async def check_and_perform_contest_draw():
    while True:
        # Convert the current time to your specified timezone
        current_time = datetime.now(timezone)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤
        contests = await contests_collection.find().to_list(length=None)

        for contest in contests:
            ended = contest.get("ended")
            contest_id = contest.get("_id")
            end_date_str = contest.get("end_date")

            if ended == "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞. üö´":
                pass
            else:
                if ended == "True":
                    pass
                else:
                    try:
                        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ –æ–±—ä–µ–∫—Ç datetime —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
                        end_date = timezone.localize(datetime.strptime(str(end_date_str), "%d.%m.%Y %H:%M"))
                        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è
                        if current_time >= end_date:
                            await perform_contest_draw(contest_id)
                    except ValueError:
                        pass

        # Wait for 1 minute before checking again
        await asyncio.sleep(10)

# log
logging.basicConfig(level=logging.INFO)

# # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–ª—é—á–∞
# @dp.message_handler(commands=['buy_key'])
# async def buy_key(message: types.Message):
#     # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –µ–≥–æ —Ü–µ–Ω—ã –∏ –æ–ø–∏—Å–∞–Ω–∏—è
#     key = generate_key()
#     price = 1  # –£–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å —Ü–µ–Ω—É –∫–ª—é—á–∞
#     description = f"üîë –û–ø–ª–∞—Ç–∞ –∫–ª—é—á–∞."
#
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É
#     await bot.send_invoice(
#         chat_id=message.chat.id,
#         title="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ üî∞",
#         description=description,
#         payload=key,  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª—é—á –≤ payload, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —É–∑–Ω–∞—Ç—å, –∫–∞–∫–æ–π –∫–ª—é—á –æ–ø–ª–∞—Ç–∏–ª–∏
#         provider_token=PAYMENTS_TOKEN,
#         currency='USD',  # –í–∞–ª—é—Ç–∞ (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å)
#         prices=[
#             types.LabeledPrice(label='–ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞', amount=price * 100)  # –¶–µ–Ω–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –∫–æ–ø–µ–π–∫–∞—Ö
#         ],
#         start_parameter='buy_key',  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –æ–ø–ª–∞—Ç—ã
#         need_name=True,
#         need_phone_number=False,
#         need_email=True,
#         need_shipping_address=False,  # –ó–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ–≥–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–∞
#     )
#
# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
# @dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT)
# async def process_successful_payment(message: types.Message):
#     # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏ –ø—Ä–æ—á–∏–µ –¥–∞–Ω–Ω—ã–µ
#     key = message.successful_payment.invoice_payload
#     uses = 1
#     user_id = message.from_user.id
#
#     # –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –≤–≤–µ–¥–µ–Ω
#     if message.successful_payment.order_info and 'email' in message.successful_payment.order_info:
#         email = message.successful_payment.order_info['email']
#     else:
#         email = "Email –Ω–µ –±—ã–ª —É–∫–∞–∑–∞–Ω."
#
#     # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é buy_key —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
#     await buy_key(key, uses, email, user_id)
#
#     # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∫–∏–µ-–ª–∏–±–æ –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–ª—é—á–æ–º –∏ email
#     await message.answer(f"*‚úÖ –ü–æ–∫—É–ø–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–∞! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –∫–ª—é—á* `{key}`.\n"
#                          f"*üîë –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:* {uses}")
#
# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
# @dp.pre_checkout_query_handler(lambda query: True)
# async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
#     await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

async def main():
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling()

# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –∫–æ–Ω–∫—É—Ä—Å–æ–≤
contest_draw_loop = asyncio.get_event_loop()
contest_draw_task = contest_draw_loop.create_task(check_and_perform_contest_draw())

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
bot_loop = asyncio.get_event_loop()
bot_task = bot_loop.create_task(main())

# –ó–∞–ø—É—Å–∫ –æ–±–æ–∏—Ö –∑–∞–¥–∞—á
loop = asyncio.get_event_loop()

tasks = asyncio.gather(contest_draw_task, bot_task)
loop.run_until_complete(tasks)
