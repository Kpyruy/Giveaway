from datetime import datetime
import asyncio
import aiogram
import random
import re
import pytz
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ParseMode, ChatMember, CallbackQuery
from aiogram.types.message import ContentType
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import TelegramAPIError
import aiogram.utils.markdown as md
from aiogram.utils import executor
from configparser import ConfigParser
from pymongo import MongoClient
import motor.motor_asyncio
import json
import logging
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher.handler import CancelHandler, current_handler
import zipfile
import os
import aiohttp

logging.basicConfig(
    level=logging.DEBUG,  # Set the logging level to DEBUG to log everything
    filename='private/bot.log',   # Log everything to a file named 'bot.log'
    filemode='w',         # 'w' will overwrite the file each time the script runs, use 'a' to append instead
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# Compass - 3GuIBMmZRoJlG3OE
cluster = motor.motor_asyncio.AsyncIOMotorClient("mongodb+srv://Admin:T8Lylcpso9jNs5Yw@cluster0.1t9opzs.mongodb.net/RandomBot?retryWrites=true&w=majority")
user_collections = cluster.RandomBot.user
key_collection = cluster.RandomBot.key
contests_collection = cluster.RandomBot.contests
promo_collection = cluster.RandomBot.promo
test_collection = cluster.RandomBot.test
game_collection = cluster.RandomBot.game

timezone = pytz.timezone('Europe/Kiev')
current_time = datetime.now(timezone)
current_date_time = current_time.strftime('%Y-%m-%d %H:%M:%S')

config = ConfigParser()
config.read('private/.env')

BOT_TOKEN = config.get('BOT', 'TOKEN')
PAYMENTS_TOKEN = config.get('PAYMENTS', 'PAYMENTS_TOKEN')

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

class MenuCategories(StatesGroup):
    main_menu = State()
    key = State()
    uses = State()
    waiting_for_key = State()
    search = State()
    id_check = State()
    search_check = State()
    contest_search_profile = State()
    welcome = State()

class CreateContestState(StatesGroup):
    name = State()
    description = State()
    winners = State()
    end_date = State()

class ChangeContestState(StatesGroup):
    name_change = State()
    description_change = State()
    winners_change = State()
    date_change = State()

def format_participants(members):
    if members % 10 == 1 and members % 100 != 11:
        return "—É—á–∞—Å—Ç–Ω–∏–∫"
    elif 2 <= members % 10 <= 4 and (members % 100 < 10 or members % 100 >= 20):
        return "—É—á–∞—Å—Ç–Ω–∏–∫–∞"
    else:
        return "—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"

async def add_user(user_id):
    current_date = datetime.now(timezone).strftime("%Y-%m-%d")
    user_data = {
        "_id": user_id,
        "creation_date": current_date,
        "participation": 0,
        "wins": 0,
        "draws": 0,
        "game_participation": 0,
        "game_wins": 0,
        "status": "–ù–æ–≤–∏—á–æ–∫ üÜï",
        "keys": 0,
        "ban_members": []
    }
    user_collections.insert_one(user_data)

# Get the bot's username from the bot instance
async def get_bot_username() -> str:
    bot_info = await bot.get_me()
    return bot_info.username

# Now you can generate the start link using the bot's username
async def generate_start_link(contest_id):
    bot_username = await get_bot_username()
    start_link = f"t.me/{bot_username}?start={contest_id}"
    return start_link

async def generate_room_link(room_id):
    bot_username = await get_bot_username()
    play_link = f"t.me/{bot_username}?play={room_id}"
    return play_link

def generate_room_id(length=16):
    characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    room = ''.join(random.choice(characters) for _ in range(length))
    return room

async def create_contest(contest_id, user_id, contest_name, contest_description, winners, end_date, start_link):
    await contests_collection.insert_one({
        "_id": int(contest_id),
        "owner_id": user_id,
        "contest_name": contest_name,
        "contest_description": contest_description,
        "winners": int(winners),
        "end_date": str(end_date),
        "members": [],
        "contest_winners": [],
        "ban_members": [],
        "join_date": [],
        "start_link": start_link,
        "ended": "False"
    })

async def create_gameroom(room_id, user_id, type, formate, rounds, create_date, room_link):
    await game_collection.insert_one({
        "_id": room_id,
        "owner_id": int(user_id),
        "type": str(type),
        "format": str(formate),
        "rounds": rounds,
        "members": [],
        "winners": [],
        "draw": " ",
        "create_date": str(create_date),
        "room_link": room_link,
        "room_status": "wait",
        "ended": "False"
    })

async def update_contest_members(contest_id, user_id):
    await contests_collection.update_one(
        {"_id": int(contest_id)},
        {"$addToSet": {"members": user_id}}
    )

async def update_contest_date(contest_id):
    current_date = datetime.now(timezone).strftime("%Y-%m-%d")

    await contests_collection.update_one(
        {"_id": int(contest_id)},
        {"$addToSet": {"join_date": current_date}}
    )

async def update_contest_ban_members(contest_id, user_id):
    await contests_collection.update_one(
        {"_id": int(contest_id)},
        {"$addToSet": {"ban_members": user_id}}
    )

async def update_profile_ban_members(profile_user_id, user_id):
    await user_collections.update_one(
        {"_id": int(profile_user_id)},
        {"$addToSet": {"ban_members": user_id}}
    )

async def update_win_contest_members(contest_id, user_id):
    await contests_collection.update_one(
        {"_id": int(contest_id)},
        {"$addToSet": {"contest_winners": user_id}}
    )

async def del_profile_ban_members(profile_user_id, user_id):
    await user_collections.update_one(
        {"_id": int(profile_user_id)},
        {"$pull": {"ban_members": user_id}}
    )

def generate_key(length=16):
    characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    key = ''.join(random.choice(characters) for _ in range(length))
    return key

async def add_key(key, uses):
    key_data = {
        "key": key,
        "uses": uses,
    }
    await key_collection.insert_one(key_data)

async def add_key_to_data(key, uses, email, user_id):
    key_data = {
        "_id": key,
        "uses": int(uses),
        "email": email,
        "user_id": int(user_id),
        "buy": "True"
    }
    await key_collection.insert_one(key_data)

async def get_username(user_id):
    # Use the get_chat method to get the user's information
    user = await bot.get_chat(user_id)

    # Access the username property of the User object
    username = user.username

    return username

async def get_ban_username(banned_user_id):
    # Use the get_chat method to get the user's information
    user = await bot.get_chat(banned_user_id)

    # Access the username property of the User object
    username = user.username

    return username

async def get_username_winners(user):
    # Use the get_chat method to get the user's information
    user_name = await bot.get_chat(user)

    # Access the username property of the User object
    username = user_name.username

    return username

async def show_members(callback_query, contest_id, current_page):
    # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
    contest = await contests_collection.find_one({"_id": int(contest_id)})
    message_id = change_message_id[-1]

    members = contest.get("members")
    participants_word = format_participants(len(members))
    result_message = f"<b>üèØ –í—Å–µ–≥–æ</b> <code>{len(members)}</code> <b>{participants_word}</b> ‚Äî <b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}</b>\n\n"

    keyboard = types.InlineKeyboardMarkup()

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    per_page = 25
    start_index = (current_page - 1) * per_page
    end_index = current_page * per_page
    page_members = members[start_index:end_index] if start_index < len(members) else []
    for idx, user_id in enumerate(page_members, start=start_index + 1):
        username = await get_username(user_id)
        if username:
            username = username.replace("_", "&#95;")
        result_message += f"{idx}. @{username} (<code>{user_id}</code>)\n"

    # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è
    prev_button = types.InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=f'members_{contest_id}_prev_{current_page}')
    next_button = types.InlineKeyboardButton(text='–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è', callback_data=f'members_{contest_id}_next_{current_page}')
    contest_profile = types.InlineKeyboardButton(text='–î–µ—Ç–∞–ª—å–Ω–µ–µ üß∂', callback_data=f'contest_search_profile_{contest_id}')
    banned_members = types.InlineKeyboardButton(text='–ó–∞–±–ª–æ–∫. —É—á–∞—Å—Ç–Ω–∏–∫–∏ ‚ÄºÔ∏è', callback_data=f'ban_members_{contest_id}_None_1')
    back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data='change')

    # Add both buttons if there are both previous and next pages
    if current_page > 1 and end_index < len(members):
        keyboard.row(prev_button, next_button)
    # Add only the previous button if there are no more pages
    elif current_page > 1:
        keyboard.row(prev_button)
    # Add only the next button if this is the first page
    elif end_index < len(members):
        keyboard.row(next_button)

    if len(members) >= 1:
        keyboard.row(banned_members, contest_profile)
    keyboard.row(back)

    reply = await bot.edit_message_text(result_message, callback_query.message.chat.id, message_id,
                                        parse_mode="HTML",
                                        reply_markup=keyboard)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    change_message_id.append(reply.message_id)

async def show_ban_members(callback_query, contest_id, current_page):
    # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
    contest = await contests_collection.find_one({"_id": int(contest_id)})
    message_id = change_message_id[-1]

    ban_members = contest.get("ban_members")
    result_message = f"<b>‚ÄºÔ∏è–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ ‚Äî –°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}</b>\n\n"

    keyboard = types.InlineKeyboardMarkup()

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    per_page = 25
    start_index = (current_page - 1) * per_page
    end_index = current_page * per_page
    page_members = ban_members[start_index:end_index] if start_index < len(ban_members) else []
    for idx, user_id in enumerate(page_members, start=start_index + 1):
        username = await get_username(user_id)
        if username:
            username = username.replace("_", "&#95;")
        result_message += f"{idx}. @{username} (<code>{user_id}</code>)\n"

    # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è
    prev_button = types.InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=f'members_{contest_id}_prev_{current_page}')
    next_button = types.InlineKeyboardButton(text='–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è', callback_data=f'members_{contest_id}_next_{current_page}')
    contest_profile = types.InlineKeyboardButton(text='–î–µ—Ç–∞–ª—å–Ω–µ–µ üß∂', callback_data=f'contest_search_profile_{contest_id}')
    back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data='change')

    # Add both buttons if there are both previous and next pages
    if current_page > 1 and end_index < len(ban_members):
        keyboard.row(prev_button, next_button)
    # Add only the previous button if there are no more pages
    elif current_page > 1:
        keyboard.row(prev_button)
    # Add only the next button if this is the first page
    elif end_index < len(ban_members):
        keyboard.row(next_button)

    if len(ban_members) < 1:
        result_message += "<code>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ‚ÄºÔ∏è</code>"
    else:
        keyboard.row(contest_profile)
    keyboard.row(back)

    reply = await bot.edit_message_text(result_message, callback_query.message.chat.id, message_id,
                                        parse_mode="HTML",
                                        reply_markup=keyboard)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    change_message_id.append(reply.message_id)

async def show_user_history(callback_query, user_id, current_page):
    # Retrieve contests where the user with the specified user_id was a member
    user_history = await contests_collection.find({"members": user_id}).to_list(length=None)

    if user_history:
        # Your logic to display user history based on the current_page
        per_page = 5
        start_index = (current_page - 1) * per_page
        end_index = current_page * per_page
        page_history = user_history[start_index:end_index] if start_index < len(user_history) else []
        all_pages = len(user_history) // per_page

        if all_pages == 0:
            all_pages = 1
        else:
            pass
        # Create the message containing the user history for the current page
        result_message = f"*üìí –ò—Å—Ç–æ—Ä–∏—è —É—á–∞—Å—Ç–∏–π - –°—Ç—Ä–∞–Ω–∏—Ü–∞* `{current_page}` –∏–∑ `{all_pages}`:\n\n"
        for idx, contest in enumerate(page_history, start=start_index + 1):
            # Extract relevant information about the contest, e.g., its title, end date, etc.
            contest_name = contest.get("contest_name")
            contest_id = contest.get("_id")
            contest_end_date = contest.get("end_date")
            contest_members = contest.get("members")
            ended = contest.get("ended")

            if ended == "True":
                if contest_name == str(contest_id):
                    # Format the contest information as needed
                    result_message += f"                            *= {idx} =*\n" \
                                      f"*ü™Å –ò–º—è:* `{contest_name}`\n" \
                                      f"*üë§ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* `{len(contest_members)}`\n" \
                                      f"*üóìÔ∏è –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:* `{contest_end_date}`\n\n"
                else:
                    # Format the contest information as needed
                    result_message += f"                            *= {idx} =*\n" \
                                      f"*ü™Å –ò–º—è:* `{contest_name}`\n" \
                                      f"*üßä –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:* `{contest_id}`\n" \
                                      f"*üë§ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* `{len(contest_members)}`\n" \
                                      f"*üóìÔ∏è –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:* `{contest_end_date}`\n\n"
            else:
                continue

        # Calculate the total number of pages
        total_pages = (len(user_history) + per_page - 1) // per_page

        # Create the inline keyboard with pagination buttons
        keyboard = types.InlineKeyboardMarkup()
        prev_button = types.InlineKeyboardButton(text='‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è', callback_data=f'history_{user_id}_prev_{current_page}')
        next_button = types.InlineKeyboardButton(text='–°–ª–µ–¥—É—â–∞—è ‚ñ∂Ô∏è', callback_data=f'history_{user_id}_next_{current_page}')

        if current_page > 1 and end_index < total_pages:
            keyboard.row(prev_button, next_button)
        elif current_page > 1:
            keyboard.row(prev_button)
        elif current_page < total_pages:
            keyboard.row(next_button)
        back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ ü•è', callback_data='profile_edit')
        keyboard.row(back)

        # Send or edit the message with pagination
        reply = await bot.edit_message_text(result_message, callback_query.message.chat.id,
                                            callback_query.message.message_id, parse_mode="Markdown", reply_markup=keyboard)
        profile_messages.append(reply.message_id)
    else:
        result_message = "*üìí –£ –≤–∞—Å –Ω–µ –±—ã–ª–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —É—á–∞—Å—Ç–∏–π!*"
        keyboard = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ ü•è', callback_data='profile_edit')
        keyboard.row(back)

        # Send or edit the message with pagination
        reply = await bot.edit_message_text(result_message, callback_query.message.chat.id,
                                            callback_query.message.message_id, parse_mode="Markdown", reply_markup=keyboard)
        profile_messages.append(reply.message_id)

async def show_user_permanent(callback_query, user_id, current_page):
    # Retrieve contests where the user with the specified user_id was a member
    user_history = await user_collections.find({"_id": user_id}).to_list(length=None)

    # Check if there are any results
    if user_history:
        user_data = user_history[0]  # Get the first dictionary from the list
        banned_members = user_data.get("ban_members")

        if banned_members:
            # Your logic to display user history based on the current_page
            per_page = 20
            start_index = (current_page - 1) * per_page
            end_index = current_page * per_page
            page_history = banned_members[start_index:end_index] if start_index < len(banned_members) else []
            all_pages = len(banned_members) // per_page

            if len(banned_members) % per_page != 0:  # Check if there are any remaining items for an extra page
                all_pages += 1

            # Create the message containing the user history for the current page
            result_message = f"<b>‚ôæÔ∏è –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ ‚Äî –°—Ç—Ä–∞–Ω–∏—Ü–∞</b> <code>{current_page}</code> <b>–∏–∑</b> <code>{all_pages}</code>:\n\n"
            for idx, banned_member in enumerate(page_history, start=start_index + 1):
                username = await get_ban_username(banned_member)
                if username:
                    username = username.replace("_", "&#95;")
                result_message += f"{idx}. @{username} (<code>{banned_member}</code>)\n"
            result_message += "\n<b>üìõ –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> /permanent <code>{id}</code>"
            # Create the inline keyboard with pagination buttons
            keyboard = types.InlineKeyboardMarkup()
            prev_button = types.InlineKeyboardButton(text='‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è',
                                                     callback_data=f'permanent_{user_id}_prev_{current_page}')
            next_button = types.InlineKeyboardButton(text='–°–ª–µ–¥—É—â–∞—è ‚ñ∂Ô∏è',
                                                     callback_data=f'permanent_{user_id}_next_{current_page}')

            if current_page > 1 and end_index < all_pages:
                keyboard.row(prev_button, next_button)
            elif current_page > 1:
                keyboard.row(prev_button)
            elif current_page < all_pages:
                keyboard.row(next_button)
            back = types.InlineKeyboardButton(text='–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ', callback_data='done')
            keyboard.row(back)

            # Send or edit the message with pagination
            await bot.edit_message_text(result_message, callback_query.message.chat.id,
                                                callback_query.message.message_id, parse_mode="HTML",
                                                reply_markup=keyboard)
    else:
        result_message = "*–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç. üö´*"
        keyboard = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton(text='–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ', callback_data='done')
        keyboard.row(back)

        # Send or edit the message with pagination
        await bot.edit_message_text(result_message, callback_query.message.chat.id,
                                            callback_query.message.message_id, parse_mode="Markdown",
                                            reply_markup=keyboard)

async def promo_members(chat_id, promo, current_page):
    # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
    promo_code = await promo_collection.find_one({"_id": promo})

    members = promo_code.get("active_members")
    result_message = f"<b>üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞</b> <code>{promo}</code>:\n\n" \
                     f"                                   <b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}</b>\n\n"

    keyboard = types.InlineKeyboardMarkup()

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    per_page = 25
    start_index = (current_page - 1) * per_page
    end_index = current_page * per_page
    page_members = members[start_index:end_index] if start_index < len(members) else []
    for idx, user_id in enumerate(page_members, start=start_index + 1):
        username = await get_username(user_id)
        if username:
            username = username.replace("_", "&#95;")
        result_message += f"<b>{idx}.</b> @{username} <b>(</b><code>{user_id}</code><b>)</b>\n"

    # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è
    prev_button = types.InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=f'promo_{promo}_prev_{current_page}')
    next_button = types.InlineKeyboardButton(text='–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è', callback_data=f'promo_{promo}_next_{current_page}')
    promo_list_update = types.InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å üåÄ',
                                                   callback_data=f'list_update_{promo}_{current_page}')
    back = types.InlineKeyboardButton(text='–í—ã–ø–æ–ª–µ–Ω–µ–Ω–æ ‚úÖ', callback_data='done')

    # Add both buttons if there are both previous and next pages
    if current_page > 1 and end_index < len(members):
        keyboard.row(prev_button, next_button)
    # Add only the previous button if there are no more pages
    elif current_page > 1:
        keyboard.row(prev_button)
    # Add only the next button if this is the first page
    elif end_index < len(members):
        keyboard.row(next_button)
    keyboard.row(promo_list_update)
    keyboard.row(back)
    uses = promo_code.get("uses")
    result_message += f"\n\n<b>üß™ –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π:</b> <code>{uses}</code>"
    # Send the formatted message with the keyboard
    reply = await bot.send_message(chat_id, result_message,
                                   parse_mode="HTML",
                                   reply_markup=keyboard)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    promo_message_id.append(reply.message_id)

async def update_promo_members(promo, current_page, chat_id, message_id):
    # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
    promo_code = await promo_collection.find_one({"_id": promo})

    members = promo_code.get("active_members")
    result_message = f"<b>üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞</b> <code>{promo}</code>:\n\n" \
                     f"                                   <b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}</b>\n\n"

    keyboard = types.InlineKeyboardMarkup()

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    per_page = 25
    start_index = (current_page - 1) * per_page
    end_index = current_page * per_page
    page_members = members[start_index:end_index] if start_index < len(members) else []
    for idx, user_id in enumerate(page_members, start=start_index + 1):
        username = await get_username(user_id)
        if username:
            username = username.replace("_", "&#95;")
        result_message += f"<b>{idx}.</b> @{username} <b>(</b><code>{user_id}</code><b>)</b>\n"

    # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è
    prev_button = types.InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=f'promo_{promo}_prev_{current_page}')
    next_button = types.InlineKeyboardButton(text='–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è', callback_data=f'promo_{promo}_next_{current_page}')
    promo_list_update = types.InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å üåÄ',
                                                   callback_data=f'list_update_{promo}_{current_page}')
    back = types.InlineKeyboardButton(text='–í—ã–ø–æ–ª–µ–Ω–µ–Ω–æ ‚úÖ', callback_data='done')

    # Add both buttons if there are both previous and next pages
    if current_page > 1 and end_index < len(members):
        keyboard.row(prev_button, next_button)
    # Add only the previous button if there are no more pages
    elif current_page > 1:
        keyboard.row(prev_button)
    # Add only the next button if this is the first page
    elif end_index < len(members):
        keyboard.row(next_button)
    keyboard.row(promo_list_update)
    keyboard.row(back)
    uses = promo_code.get("uses")
    result_message += f"\n\n<b>üß™ –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π:</b> <code>{uses}</code>"
    # Send the formatted message with the keyboard
    # Send or edit the message with pagination
    await bot.edit_message_text(result_message, chat_id,
                                message_id, parse_mode="HTML",
                                reply_markup=keyboard)

# Add this at the beginning of your script to enable logging
logging.basicConfig(level=logging.INFO)

async def handle_promo_code(promo_code: str, user_id: int, chat_id):
    try:
        promo = await promo_collection.find_one({"_id": promo_code})

        if promo:
            active_members = promo.get("active_members", [])

            if user_id in active_members:
                logging.info(f"{chat_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                await bot.send_message(chat_id, "*‚ùå –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥.*", parse_mode="Markdown")
            else:
                uses = promo.get("uses", 0)
                if uses > 0:
                    await activate_promo_code(promo_code, user_id, chat_id)
                else:
                    logging.info(f"{chat_id} –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
                    await bot.send_message(chat_id, "*‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.*", parse_mode="Markdown")
        else:
            logging.info(f"{chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await bot.send_message(chat_id, "*–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. ‚ùå*", parse_mode="Markdown")
    except Exception as e:
        logging.error(f"Error in handle_promo_code: {str(e)}")
        await bot.send_message(chat_id, "*‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.*", parse_mode="Markdown")

async def create_promo_codes(promo_name: str, quantity: int, visible: str, prize: str, user_id: int):
    promo_code = generate_promo_code()

    existing_promo = await promo_collection.find_one({"_id": promo_name})
    if existing_promo:
        await bot.send_message(user_id, f"*‚ùå –ü—Ä–æ–º–æ–∫–æ–¥* `{promo_name}` *—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!*", parse_mode="Markdown")
        return

    if promo_name == "random":
        promo = {
            "_id": promo_code,
            "user_id": user_id,
            "uses": quantity,
            "prize": prize,
            "active_members": [],
            "visible": visible
        }
        if visible == "False":
            message = f"*üß™ –ü—Ä–æ–º–æ–∫–æ–¥* `{promo_code}` *–±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*\n" \
                      f"*üé¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:* `{quantity}`\n"\
                      f"*ü§´ –°—Ç–∞—Ç—É—Å:* `—Å–∫—Ä—ã—Ç`\n"
            if prize == "key":
                message = f"*üß™ –ü—Ä–æ–º–æ–∫–æ–¥* `{promo_code}` *–±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*\n" \
                       f"*üé¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:* `{quantity}`\n" \
                       f"*ü§´ –°—Ç–∞—Ç—É—Å:* `—Å–∫—Ä—ã—Ç`\n" \
                       f"*üéÅ –ù–∞–≥—Ä–∞–¥–∞:* `+1 –∫–ª—é—á`"
            else:
                message = f"*üß™ –ü—Ä–æ–º–æ–∫–æ–¥* `{promo_code}` *–±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*\n" \
                       f"*üé¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:* `{quantity}`\n"
        else:
            if prize == "key":
                message = f"*üß™ –ü—Ä–æ–º–æ–∫–æ–¥* `{promo_code}` *–±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*\n" \
                       f"*üé¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:* `{quantity}`\n" \
                       f"*ü§´ –°—Ç–∞—Ç—É—Å:* `—Å–∫—Ä—ã—Ç`\n" \
                       f"*üéÅ –ù–∞–≥—Ä–∞–¥–∞:* `+1 –∫–ª—é—á`"
            else:
                message = f"*üß™ –ü—Ä–æ–º–æ–∫–æ–¥* `{promo_code}` *–±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*\n" \
                       f"*üé¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:* `{quantity}`\n"
    else:
        promo = {
            "_id": promo_name,
            "user_id": user_id,
            "uses": quantity,
            "prize": prize,
            "active_members": [],
            "visible": visible
        }
        if visible == "False":
            message = f"*üß™ –ü—Ä–æ–º–æ–∫–æ–¥* `{promo_name}` *–±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*\n" \
                      f"*üé¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:* `{quantity}`\n"\
                      f"*ü§´ –°—Ç–∞—Ç—É—Å:* `—Å–∫—Ä—ã—Ç`\n"
            if prize == "key":
                message = f"*üß™ –ü—Ä–æ–º–æ–∫–æ–¥* `{promo_name}` *–±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*\n" \
                       f"*üé¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:* `{quantity}`\n" \
                       f"*ü§´ –°—Ç–∞—Ç—É—Å:* `—Å–∫—Ä—ã—Ç`\n" \
                       f"*üéÅ –ù–∞–≥—Ä–∞–¥–∞:* `+1 –∫–ª—é—á`"
            else:
                message = f"*üß™ –ü—Ä–æ–º–æ–∫–æ–¥* `{promo_name}` *–±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*\n" \
                       f"*üé¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:* `{quantity}`\n"
        else:
            if prize == "key":
                message = f"*üß™ –ü—Ä–æ–º–æ–∫–æ–¥* `{promo_name}` *–±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*\n" \
                       f"*üé¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:* `{quantity}`\n" \
                       f"*ü§´ –°—Ç–∞—Ç—É—Å:* `—Å–∫—Ä—ã—Ç`\n" \
                       f"*üéÅ –ù–∞–≥—Ä–∞–¥–∞:* `+1 –∫–ª—é—á`"
            else:
                message = f"*üß™ –ü—Ä–æ–º–æ–∫–æ–¥* `{promo_name}` *–±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*\n" \
                       f"*üé¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:* `{quantity}`\n"


    await promo_collection.insert_one(promo)

    await bot.send_message(user_id, text=message, parse_mode="Markdown")

async def get_active_promo_codes():
    active_promos = await promo_collection.find({"visible": "True"}).to_list(length=None)

    if active_promos:
        promo_ids = [f"*{idx + 1}.* `{promo['_id']}`" for idx, promo in enumerate(active_promos)]
        promo_list = "\n".join(promo_ids)
        return promo_list
    else:
        return None

async def activate_promo_code(promo_code: str, user_id: int, chat_id: int):
    try:

        await promo_collection.update_one({"_id": promo_code}, {"$push": {"active_members": user_id}})
        await promo_collection.update_one({"_id": promo_code}, {"$inc": {"uses": -1}})

        promo = await promo_collection.find_one({"_id": promo_code})
        prize = promo.get("prize")
        if prize == "None":
            pass
        elif prize == "key":
            await user_collections.update_one({"_id": user_id}, {"$inc": {"keys": 1}})
        else:
            pass
        logging.info(f"{chat_id} —É—Å–ø–µ—à–Ω–æ")
        await bot.send_message(chat_id, f"*–ü—Ä–æ–º–æ–∫–æ–¥* `{promo_code}` *–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. ‚úÖ*", parse_mode="Markdown")
    except Exception as e:
        logging.error(f"Error in handle_promo_code: {str(e)}")
        await bot.send_message(chat_id, "*‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.*",
                               parse_mode="Markdown")

def generate_promo_code():
    promo_length = 8  # –î–ª–∏–Ω–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    allowed_characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    return ''.join(random.choices(allowed_characters, k=promo_length))

async def send_profile(username, user_id, chat_id):
    # –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user_data = await user_collections.find_one({"_id": user_id})

    wins = user_data.get("wins", 0)
    participation = user_data.get("participation", 0)

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø–æ–±–µ–¥
    win_percentage = (wins / participation) * 100 if participation > 0 else 0
    creation_date = user_data.get("creation_date", "")
    status = user_data.get("status", "")

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    profile = f'*üçπ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* `{username}`:\n\n' \
              f'*üçß –°—Ç–∞—Ç—É—Å:* `{status}`\n\n' \
              f'*üçÄ –£—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö:* `{participation}`\n' \
              f'*üèÖ –ü–æ–±–µ–¥—ã –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö:* `{wins}`\n' \
              f'*üèÜ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥:* `{win_percentage:.2f}%`\n\n' \
              f'*üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* `{creation_date}`'
    keyboard = types.InlineKeyboardMarkup()
    game_profile = types.InlineKeyboardButton(text='–ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å üéÆ', callback_data=f'game_profile_{user_id}_buttons')
    history = types.InlineKeyboardButton(text='–ò—Å—Ç–æ—Ä–∏—è —É—á–∞—Å—Ç–∏–π üìî', callback_data=f'history_{user_id}_None_1')
    active_history_drawings = types.InlineKeyboardButton(text='–ê–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–∏—è ü¶™', callback_data=f'active_{user_id}_None_1')
    id_check = types.InlineKeyboardButton(text='–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ü•è', callback_data='id_check')
    done = types.InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ ‚úÖ', callback_data='done')
    keyboard.add(game_profile)
    keyboard.add(history, active_history_drawings)
    keyboard.add(id_check)
    keyboard.add(done)

    await bot.send_message(chat_id, text=profile, parse_mode="Markdown",
                                   reply_markup=keyboard)

async def show_profile(username, user_id, chat_id, message_id):
    # –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user_data = await user_collections.find_one({"_id": user_id})

    wins = user_data.get("wins", 0)
    participation = user_data.get("participation", 0)

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø–æ–±–µ–¥
    win_percentage = (wins / participation) * 100 if participation > 0 else 0
    creation_date = user_data.get("creation_date", "")
    status = user_data.get("status", "")

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    profile = f'*üçπ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* `{username}`:\n\n' \
              f'*üçß –°—Ç–∞—Ç—É—Å:* `{status}`\n\n' \
              f'*üçÄ –£—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö:* `{participation}`\n' \
              f'*üèÖ –ü–æ–±–µ–¥—ã –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö:* `{wins}`\n' \
              f'*üèÜ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥:* `{win_percentage:.2f}%`\n\n' \
              f'*üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* `{creation_date}`'
    keyboard = types.InlineKeyboardMarkup()
    game_profile = types.InlineKeyboardButton(text='–ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å üéÆ', callback_data=f'game_profile_{user_id}_buttons')
    history = types.InlineKeyboardButton(text='–ò—Å—Ç–æ—Ä–∏—è —É—á–∞—Å—Ç–∏–π üìî', callback_data=f'history_{user_id}_None_1')
    active_history_drawings = types.InlineKeyboardButton(text='–ê–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–∏—è ü¶™', callback_data=f'active_{user_id}_None_1')
    id_check = types.InlineKeyboardButton(text='–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ü•è', callback_data='id_check')
    done = types.InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ ‚úÖ', callback_data='done')
    keyboard.add(game_profile)
    keyboard.add(history, active_history_drawings)
    keyboard.add(id_check)
    keyboard.add(done)

    # Send or edit the message with pagination
    reply = await bot.edit_message_text(profile, chat_id,
                                message_id, parse_mode="Markdown",
                                reply_markup=keyboard)
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    profile_messages.append(reply.message_id)

async def show_user_drawings(callback_query, user_id, current_page):
    # Retrieve contests where the user with the specified user_id was a member
    user_history = await contests_collection.find({"members": user_id}).to_list(length=None)

    # Check if there are any active contests for the user
    active_contests_exist = any(contest.get("ended", "True") == "False" for contest in user_history)

    if user_history and active_contests_exist:
        # Your logic to display user history based on the current_page
        per_page = 3
        start_index = (current_page - 1) * per_page
        end_index = current_page * per_page
        page_history = user_history[start_index:end_index] if start_index < len(user_history) else []
        all_pages = len(user_history) // per_page

        if all_pages == 0:
            all_pages = 1
        else:
            pass
        # Create the message containing the user history for the current page
        result_message = f"*ü¶™ –£—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö - –°—Ç—Ä–∞–Ω–∏—Ü–∞* `{current_page}` –∏–∑ `{all_pages}`:\n\n"
        for idx, contest in enumerate(page_history, start=start_index + 1):
            # Extract relevant information about the contest, e.g., its title, end date, etc.
            contest_name = contest.get("contest_name")
            contest_id = contest.get("_id")
            contest_end_date = contest.get("end_date")
            contest_members = contest.get("members")
            ended = contest.get("ended")
            if ended == "True":
                pass
            else:
                if contest_name == str(contest_id):
                    # Format the contest information as needed
                    result_message += f"                            *= {idx} =*\n" \
                                      f"*ü™Å –ò–º—è:* `{contest_name}`\n" \
                                      f"*üë§ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* `{len(contest_members)}`\n" \
                                      f"*üóìÔ∏è –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:* `{contest_end_date}`\n\n"
                else:
                    # Format the contest information as needed
                    result_message += f"                            *= {idx} =*\n" \
                                      f"*ü™Å –ò–º—è:* `{contest_name}`\n" \
                                      f"*üßä –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:* `{contest_id}`\n" \
                                      f"*üë§ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* `{len(contest_members)}`\n" \
                                      f"*üóìÔ∏è –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:* `{contest_end_date}`\n\n"

        # Calculate the total number of pages
        total_pages = (len(user_history) + per_page - 1) // per_page

        # Create the inline keyboard with pagination buttons
        keyboard = types.InlineKeyboardMarkup()
        prev_button = types.InlineKeyboardButton(text='‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è', callback_data=f'active_{user_id}_prev_{current_page}')
        next_button = types.InlineKeyboardButton(text='–°–ª–µ–¥—É—â–∞—è ‚ñ∂Ô∏è', callback_data=f'active_{user_id}_next_{current_page}')

        if current_page > 1 and end_index < total_pages:
            keyboard.row(prev_button, next_button)
        elif current_page > 1:
            keyboard.row(prev_button)
        elif current_page < total_pages:
            keyboard.row(next_button)
        back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ ü•è', callback_data='profile_edit')
        keyboard.row(back)

        # Send or edit the message with pagination
        reply = await bot.edit_message_text(result_message, callback_query.message.chat.id,
                                            callback_query.message.message_id, parse_mode="Markdown", reply_markup=keyboard)
        profile_messages.append(reply.message_id)
    else:
        result_message = "*ü¶™ –°–µ–π—á–∞—Å –≤—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö.*"
        keyboard = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ ü•è', callback_data='profile_edit')
        keyboard.row(back)

        # Send or edit the message with pagination
        reply = await bot.edit_message_text(result_message, callback_query.message.chat.id,
                                            callback_query.message.message_id, parse_mode="Markdown", reply_markup=keyboard)
        profile_messages.append(reply.message_id)

def get_participation_word(count):
    if count % 10 == 1 and count % 100 != 11:
        return "—É—á–∞—Å—Ç–∏–µ"
    elif 2 <= count % 10 <= 4 and (count % 100 < 10 or count % 100 >= 20):
        return "—É—á–∞—Å—Ç–∏—è"
    else:
        return "—É—á–∞—Å—Ç–∏–π"

def get_wins_word(count):
    if count % 10 == 1 and count % 100 != 11:
        return "–ø–æ–±–µ–¥–∞"
    elif 2 <= count % 10 <= 4 and (count % 100 < 10 or count % 100 >= 20):
        return "–ø–æ–±–µ–¥—ã"
    else:
        return "–ø–æ–±–µ–¥"

async def get_chat_administrators(chat_id):
    administrators = await bot.get_chat_administrators(chat_id)
    admins_ids = [admin.user.id for admin in administrators]
    return admins_ids

async def get_chat_members_count(chat_id):
    count = await bot.get_chat_members_count(chat_id)
    return count

async def create_and_send_archive(chat_id):
    # Create a zip archive of the 'data' folder
    archive_filename = 'data_archive.zip'
    with zipfile.ZipFile(archive_filename, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for foldername, subfolders, filenames in os.walk('data'):
            for filename in filenames:
                file_path = os.path.join(foldername, filename)
                zipf.write(file_path, os.path.relpath(file_path, 'data'))

    # Prepare the form data for the POST request
    form = aiohttp.FormData()
    form.add_field('chat_id', str(chat_id))
    form.add_field('document', open(archive_filename, 'rb'))

    # Send the archive file to the chat
    async with aiohttp.ClientSession() as session:
        async with session.post(f'https://api.telegram.org/bot{BOT_TOKEN}/sendDocument', data=form) as response:
            if response.status == 200:
                print('Archive sent successfully')

    # Delete the archive file after sending
    os.remove(archive_filename)

# –û–±—ä—è–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
contest_name = None
contest_id = None
contest_description = None
winners = None
end_date = None

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π
profile_messages = []
generate_message = []
contest_messages = []
change_message_id = []
permanent_message_id = []
promo_message_id = []

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
async def set_bot_commands():
    commands = [
        types.BotCommand(command="/start", description="-  –û—Ç–∫—Ä—ã—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é ü´•"),
        types.BotCommand(command="/search", description="-  –ü–æ–∏—Å–∫ –ø–æ –∞–π–¥–∏ üîé"),
        types.BotCommand(command="/profile", description="-  –û—Ç–∫—Ä—ã—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å üë§"),
        types.BotCommand(command="/promo", description="-  –í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–º üß™"),
        types.BotCommand(command="/wins", description="-  –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø–æ–±–µ–¥–∞–º –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö ü•á"),
        types.BotCommand(command="/participations", description="-  –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —É—á–∞—Å—Ç–∏—è–º –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö üçÄ"),
        types.BotCommand(command="/create", description="-  –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É. üéÆ"),
        types.BotCommand(command="/contest", description="-  –ö–æ–Ω–∫—É—Ä—Å –º–µ–Ω—é üéñ"),
        types.BotCommand(command="/generate", description="-  –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ üîë"),
        types.BotCommand(command="/permanent", description="-  –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üö´"),
        types.BotCommand(command="/help", description="-  –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –±–æ—Ç—É‚ùî")
        # –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
    ]
    await bot.set_my_commands(commands)

# async def test():
#     # –ü—Ä–∏–º–µ—Ä —Å–ø–∏—Å–∫–∞ winners —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏
#     winners = [{1738263685, 826511051}]
#
#     winner_team = winners[0]  # —ç—Ç–æ –≤–∞—à –∫–æ—Ä—Ç–µ–∂
#
#     if len(winner_team) == 1:
#         username = await get_username(winner_user_id)
#         if username:
#             username = username.replace("_", "&#95;")
#             winner_message = f"<b>ü•á –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b> @{username} <code>{winner_user_id1}</code> <b>–ø–æ–±–µ–¥–∏–ª, –æ—Ç–ª–∏—á–Ω–∞—è –±—ã–ª–∞ –∏–≥—Ä–∞!</b>"
#         print(winner_message)
#     # –ï—Å–ª–∏ —É –Ω–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
#     else:
#         winners_usernames = []
#         for winner_team in winners:
#             winner_usernames = []
#             for user_id in winner_team:
#                 username = await get_username(user_id)
#                 if username:
#                     username = username.replace("_", "&#95;")
#                     winner_usernames.append(f"{username} - {user_id}")
#
#             winners_usernames.append(", ".join(winner_usernames))
#         winners_message = f"<b>ü•á –ü–æ–∑–¥—Ä–∞–≤–ª—è—é –∫–æ–º–∞–Ω–¥—É —Å –ø–æ–±–µ–¥–æ–π:</b>\n<code>{', '.join(winners_usernames)}</code> <b>\nüë§ –î–∞–Ω–Ω—ã–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>"
#         print(winners_message)
# # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é test() –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ –∫–æ–¥–∞
# asyncio.run(test())

@dp.message_handler(commands=['create'])
async def create_room(message: types.Message):
    if message.chat.type != 'private':
        await bot.send_message(message.chat.id, "*‚ùå –ö–æ–º–∞–Ω–¥–∞ /create –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.*", parse_mode="Markdown")
        return

    user_id = message.from_user.id
    user_data = await game_collection.find_one({"owner_id": user_id, "ended": "False"})

    if user_data:
        keyboard = types.InlineKeyboardMarkup()
        check_rooms = types.InlineKeyboardButton(text='üîé –ú–æ–∏ –∫–æ–º–Ω–∞—Ç—ã', callback_data='check_rooms')
        keyboard.row(check_rooms)

        await message.reply(
                "*üñ•Ô∏è –£ –≤–∞—Å —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞ –∏–≥—Ä–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞!*\n\n*‚ú® –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç:*",
                parse_mode="Markdown", reply_markup=keyboard)

    else:
        keyboard = types.InlineKeyboardMarkup()
        create_room = types.InlineKeyboardButton(text='üïπÔ∏è –°–æ–∑–¥–∞—Ç—å', callback_data='create_room')
        check_rooms = types.InlineKeyboardButton(text='üîé –ú–æ–∏ –∫–æ–º–Ω–∞—Ç—ã', callback_data=f'check_rooms')
        keyboard.row(check_rooms)
        keyboard.row(create_room)

        await message.reply(
                "*üñ•Ô∏è –ü–∞–Ω–µ–ª—å —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–≤—ã—Ö –∫–æ–º–Ω–∞—Ç!*\n\n*‚ú® –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç–∞–º–∏ –∏–ª–∏ –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è:*",
                parse_mode="Markdown", reply_markup=keyboard)

@dp.message_handler(commands=['play'])
async def play_command(message: types.Message):

    # Check if there are any arguments after the command
    if message.chat.type != 'private':
        await bot.send_message(message.chat.id, "*‚ùå –ö–æ–º–∞–Ω–¥–∞ /play –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.*", parse_mode="Markdown")
        return

    # Get the game_id from the arguments
    game_id = message.get_args()

    # Check if the game with the specified game_id exists in the database
    game = await game_collection.find_one({"_id": game_id})
    if game is None:
        await message.reply("*‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID.*", parse_mode="Markdown")
        return

    # Check if the format of the game is either 2vs2 or 1vs1
    game_format = game.get("format", "")
    if game_format not in ["2vs2", "1vs1"]:
        await message.reply("`Invalid game format. The game format should be either 2vs2 or 1vs1.`\n\n"
                            "*üõë –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∏—á–∫—É –±–æ—Ç–∞!*", parse_mode="Markdown")
        return

    # Add the player to the members array of the game
    user_id = message.from_user.id
    if user_id in game.get("members", []):
        keyboard = types.InlineKeyboardMarkup()
        info_room = types.InlineKeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å üñ•Ô∏è', callback_data=f'info_room_{game_id}')
        keyboard.row(info_room)
        await message.reply("*‚ùå –í—ã —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —ç—Ç—É –∫–æ–º–Ω–∞—Ç—É.*", parse_mode="Markdown", reply_markup=keyboard)
        return

    # Check if the game already has the maximum number of players based on its format
    max_players = 4 if game_format == "2vs2" else 2
    current_players = len(game.get("members", []))
    if current_players == max_players:
        await message.reply("*üñ•Ô∏è –í –∫–æ–º–Ω–∞—Ç–µ —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.*", parse_mode="Markdown")
        return

    game["members"] = game.get("members", []) + [user_id]
    await user_collections.update_one({"_id": user_id}, {"$inc": {"game_participation": 1}})

    # Save the updated game back to the database
    await game_collection.replace_one({"_id": game_id}, game)
    keyboard = types.InlineKeyboardMarkup()
    info_room = types.InlineKeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å üñ•Ô∏è', callback_data=f'info_room_{game_id}')
    keyboard.row(info_room)

    await message.reply(f"*‚òëÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã ID* `{game_id}`*!*\n\n*‚åõ –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã. –ï—ë –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã.Ô∏è.*", parse_mode="Markdown", reply_markup=keyboard)

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    if message.chat.type != 'private':
        await bot.send_message(message.chat.id, "*‚ùå –ö–æ–º–∞–Ω–¥–∞ /start –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.*", parse_mode="Markdown")
        return

    user_id = message.from_user.id
    existing_user = await user_collections.find_one({"_id": user_id})

    if existing_user:
        # –ö–æ–¥ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        contest_id = message.get_args()
        if contest_id:
            try:
                contest = await contests_collection.find_one({"_id": int(contest_id)})
            except Exception as e:
                # –ö–æ–¥, –µ—Å–ª–∏ –∫–æ–Ω–∫—É—Ä—Å —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω
                await message.reply("*–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. ‚ùå*",
                                                   parse_mode="Markdown")
                return
            if contest:
                ended = contest.get("ended")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ "ended", –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False
                owner_id = contest.get("owner_id")
                owner_data = await user_collections.find_one({"_id": int(owner_id)})

                if ended == "True":
                    # –ö–æ–¥, –µ—Å–ª–∏ –∫–æ–Ω–∫—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω
                    end_message = await message.reply("*–£–ø—Å... –ö–æ–Ω–∫—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω‚ùóÔ∏è*", parse_mode="Markdown")
                    await asyncio.sleep(3.5)
                    await bot.delete_message(chat_id=message.chat.id, message_id=end_message.message_id)
                else:
                    if user_id in contest['members']:
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ–Ω–∫—É—Ä—Å–µ
                        registered = await message.reply("*‚ÄºÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –∫–æ–Ω–∫—É—Ä—Å–µ.*",
                                                         parse_mode="Markdown")
                        await asyncio.sleep(3.5)
                        await bot.delete_message(chat_id=message.chat.id, message_id=registered.message_id)
                        keyboard = types.InlineKeyboardMarkup()
                        active_drawings = types.InlineKeyboardButton(text='üîã –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏',
                                                                     callback_data='active_drawings')
                        profile = types.InlineKeyboardButton(text='ü•Ç –ü—Ä–æ—Ñ–∏–ª—å', callback_data='profile')
                        support = types.InlineKeyboardButton(text='üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='support')
                        keyboard.row(active_drawings, support)
                        keyboard.row(profile)

                        await message.reply(
                            "*üé≠ –†–∞–¥—ã –≤–∞—Å —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å!*\n\n*ü™∂ –ö–∞–∫ –≤—Å–µ–≥–¥–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:*",
                            parse_mode="Markdown", reply_markup=keyboard)
                    elif user_id in contest['ban_members']:
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ–Ω–∫—É—Ä—Å–µ
                        await message.reply("*‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –∫–æ–Ω–∫—É—Ä—Å–µ.*",
                                                    parse_mode="Markdown")
                    elif user_id in owner_data['ban_members']:
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ–Ω–∫—É—Ä—Å–µ
                        await message.reply("*‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.*",
                                                    parse_mode="Markdown")
                    else:
                        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
                        await update_contest_members(contest_id, user_id)
                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è participation –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        await user_collections.update_one({"_id": user_id}, {"$inc": {"participation": 1}})
                        # –ö–æ–¥ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω–∫—É—Ä—Å
                        keyboard = types.InlineKeyboardMarkup()
                        active_drawings = types.InlineKeyboardButton(text='üîã –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏', callback_data='active_drawings')
                        profile = types.InlineKeyboardButton(text='ü•Ç –ü—Ä–æ—Ñ–∏–ª—å', callback_data='profile')
                        support = types.InlineKeyboardButton(text='üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='support')
                        keyboard.row(active_drawings, support)
                        keyboard.row(profile)

                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        await update_contest_date(contest_id)
                        await message.reply(
                            f"*üé≠ –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–Ω–∫—É—Ä—Å* `{contest_id}`*!*\n\n"
                            "*ü™∂ –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:*",
                            parse_mode="Markdown", reply_markup=keyboard
                        )
                    return
            else:
                # –ö–æ–¥, –µ—Å–ª–∏ –∫–æ–Ω–∫—É—Ä—Å —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω
                true_contest = await message.reply("*–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. ‚ùå*",
                                                   parse_mode="Markdown")
                await asyncio.sleep(3)
                await bot.delete_message(chat_id=message.chat.id, message_id=true_contest.message_id)

        keyboard = types.InlineKeyboardMarkup()
        active_drawings = types.InlineKeyboardButton(text='üîã –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏', callback_data='active_drawings')
        profile = types.InlineKeyboardButton(text='ü•Ç –ü—Ä–æ—Ñ–∏–ª—å', callback_data='profile')
        support = types.InlineKeyboardButton(text='üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='support')
        keyboard.row(active_drawings, support)
        keyboard.row(profile)

        await message.reply(
            "*üé≠ –†–∞–¥—ã –≤–∞—Å —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å!*\n\n*ü™∂ –ö–∞–∫ –≤—Å–µ–≥–¥–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:*",
            parse_mode="Markdown", reply_markup=keyboard)
    else:
        await add_user(user_id)
        # –ö–æ–¥ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        contest_id = message.get_args()
        if contest_id:
            contest = await contests_collection.find_one({"_id": contest_id})
            if contest:
                if user_id in contest['members']:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ–Ω–∫—É—Ä—Å–µ
                    registered = await message.reply("*‚ÄºÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –∫–æ–Ω–∫—É—Ä—Å–µ.*", parse_mode="Markdown")
                    await asyncio.sleep(3.5)
                    await bot.delete_message(chat_id=message.chat.id, message_id=registered.message_id)
                elif user_id in contest['ban_members']:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ–Ω–∫—É—Ä—Å–µ
                    await message.reply("*‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –∫–æ–Ω–∫—É—Ä—Å–µ.*",
                                                parse_mode="Markdown")
                else:
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
                    await update_contest_members(contest_id, user_id)
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è participation –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await user_collections.update_one({"_id": user_id}, {"$inc": {"participation": 1}})
                    # –ö–æ–¥ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω–∫—É—Ä—Å
                    keyboard = types.InlineKeyboardMarkup()
                    active_drawings = types.InlineKeyboardButton(text='üîã –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏', callback_data='active_drawings')
                    profile = types.InlineKeyboardButton(text='ü•Ç –ü—Ä–æ—Ñ–∏–ª—å', callback_data='profile')
                    support = types.InlineKeyboardButton(text='üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='support')
                    keyboard.row(active_drawings, support)
                    keyboard.row(profile)

                    await message.reply(
                        f"*üé≠ –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–Ω–∫—É—Ä—Å* `{contest_id}`*!*\n\n"
                        "*ü™∂ –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:*",
                        parse_mode="Markdown", reply_markup=keyboard
                    )
                    await update_contest_date(contest_id)
                    return
            else:
                # –ö–æ–¥, –µ—Å–ª–∏ –∫–æ–Ω–∫—É—Ä—Å —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω
                true_contest = await message.reply("*–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. ‚ùå*", parse_mode="Markdown")
                await asyncio.sleep(3.5)
                await bot.delete_message(chat_id=message.chat.id, message_id=true_contest.message_id)

        keyboard = types.InlineKeyboardMarkup()
        active_drawings = types.InlineKeyboardButton(text='üîã –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏', callback_data='active_drawings')
        profile = types.InlineKeyboardButton(text='ü•Ç –ü—Ä–æ—Ñ–∏–ª—å', callback_data='profile')
        support = types.InlineKeyboardButton(text='üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='support')
        keyboard.row(active_drawings, support)
        keyboard.row(profile)

        await message.reply(
            "*üé≠ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–Ω–∫—É—Ä—Å –±–æ—Ç–∞!*\n\n*ü™∂ –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:*",
            parse_mode="Markdown", reply_markup=keyboard)

# –í–µ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞
@dp.message_handler(commands=['generate'])
async def generate_command(message: types.Message):

    if message.chat.type != 'private':
        await bot.send_message(message.chat.id, "*‚ùå –ö–æ–º–∞–Ω–¥–∞ /generate –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.*", parse_mode="Markdown")
        return

    user_id = message.from_user.id
    user_data = await user_collections.find_one({"_id": user_id})

    if user_data and ("status" in user_data and user_data["status"] in ["–ê–¥–º–∏–Ω üöó", "–°–æ–∑–¥–∞—Ç–µ–ª—å üé≠"]):
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º (—á–∏—Å–ª–æ–º)
        if len(message.get_args()) > 0:
            arg = message.get_args()
            if re.match("^[0-9]+$", arg):
                uses = int(arg)
                if uses >= 0 and uses <= 100:
                    key = generate_key()

                    await add_key(key, uses)

                    await message.reply(f"*üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–ª—é—á:* `{key}`\n*üß¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:* `{uses}`",
                                        parse_mode="Markdown")
                else:
                    int_digit = await bot.send_message(message.chat.id,
                                                       "*‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100.*",
                                                       parse_mode="Markdown")
                    await asyncio.sleep(3)
                    await bot.delete_message(chat_id=message.chat.id, message_id=int_digit.message_id)
                    return
            else:
                int_digit = await bot.send_message(message.chat.id,
                                                   "*‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.*",
                                                   parse_mode="Markdown")
                await asyncio.sleep(3)
                await bot.delete_message(chat_id=message.chat.id, message_id=int_digit.message_id)
                return
        else:
            reply = await message.reply("*–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ:* `–û—Ç–º–µ–Ω–∞`\n\n*ü¶¥ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∫–ª—é—á–∞:*", parse_mode="Markdown")

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            generate_message.append(reply.message_id)

            await MenuCategories.uses.set()
    else:
        # –ö–æ–¥ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard = types.InlineKeyboardMarkup()
        buy_key = types.InlineKeyboardButton(text='–ö—É–ø–∏—Ç—å –∫–ª—é—á üîë', callback_data='text_for_key')
        keyboard.row(buy_key)

        await message.reply("*–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π. üö´*", parse_mode="Markdown", reply_markup=keyboard)

@dp.message_handler(state=MenuCategories.uses)
async def process_uses(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞" or message.text == "–û—Ç–º–µ–Ω–∞":
        await state.finish()
        await bot.send_message(message.chat.id, "*‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.*", parse_mode="Markdown")
        return
    global generate_message

    arg = message.text

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.delete_message(message.chat.id, message.message_id)

    if re.match("^[0-9]+$", arg):
        uses = int(arg)
        if uses >= 0 and uses <= 100:
            key = generate_key()

            await state.finish()

            await add_key(key, uses)

            # Get the message ID from the contest_messages list
            message_id = generate_message[-1]
            text = f"*üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–ª—é—á:* `{key}`\n*üß¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:* `{uses}`"

            await bot.edit_message_text(text, message.chat.id, message_id, parse_mode="Markdown")
        else:
            int_digit = await bot.send_message(message.chat.id,
                                               "*‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100.*",
                                               parse_mode="Markdown")
            await asyncio.sleep(3)
            await bot.delete_message(chat_id=message.chat.id, message_id=int_digit.message_id)
            return
    else:
        int_digit = await bot.send_message(message.chat.id,
                                           "*‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.*",
                                           parse_mode="Markdown")
        await asyncio.sleep(3)
        await bot.delete_message(chat_id=message.chat.id, message_id=int_digit.message_id)
        return

# –í–µ—Ç–∫–∞ –∫–æ–Ω–∫—É—Ä—Å–æ–≤
@dp.message_handler(commands=['contest'])
async def start_contest_command(message: types.Message):
    if message.chat.type != 'private':
        await bot.send_message(message.chat.id, "*‚ùå –ö–æ–º–∞–Ω–¥–∞ /contest –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.*", parse_mode="Markdown")
        return

    global contest_messages

    user_id = message.from_user.id
    user_data = await user_collections.find_one({"_id": user_id})

    if user_data and (("status" in user_data and user_data["status"] in ["–¢–µ—Å—Ç–µ—Ä üî∞", "–ê–¥–º–∏–Ω üöó", "–°–æ–∑–¥–∞—Ç–µ–ª—å üé≠"]) or int(user_data.get("keys", 0)) > 0):

        # –ö–æ–¥ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard = types.InlineKeyboardMarkup()
        search = types.InlineKeyboardButton(text='üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data='search')
        create = types.InlineKeyboardButton(text='üé´ –°–æ–∑–¥–∞—Ç—å', callback_data='create')
        change = types.InlineKeyboardButton(text='üç≠ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data='change')
        keyboard.row(change, search)
        keyboard.row(create)

        reply = await message.reply(
            "*üç° –†–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞–º–∏!*\n\n*‚ú® –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–æ–º –∏–ª–∏ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è:*",
            parse_mode="Markdown", reply_markup=keyboard)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        contest_messages.append(reply.message_id)
    else:
        # –ö–æ–¥ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard = types.InlineKeyboardMarkup()
        input_key = types.InlineKeyboardButton(text='üîë –í–≤–µ—Å—Ç–∏ –∫–ª—é—á', callback_data='input_key')
        keyboard.row(input_key)

        reply = await message.reply(
            "*üëÄ –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –∏ –≤–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ–Ω–∫—É—Ä—Å–æ–≤:*",
            parse_mode="Markdown", reply_markup=keyboard)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        contest_messages.append(reply.message_id)

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'input_key')
async def input_key_callback(callback_query: types.CallbackQuery, state: FSMContext):
    keyboard = types.InlineKeyboardMarkup()
    input_key_decline = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data='input_key_decline')
    keyboard.row(input_key_decline)

    # Get the message ID from the contest_messages list
    message_id = contest_messages[-1]
    text = "*üîë –í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ–Ω–∫—É—Ä—Å–æ–≤:*"

    reply = await bot.edit_message_text(text, callback_query.message.chat.id, message_id, parse_mode="Markdown",
                                reply_markup=keyboard)

    # Store the message ID in the contest_messages list
    contest_messages.append(reply.message_id)

    # Set the state to waiting_for_key
    await MenuCategories.waiting_for_key.set()

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'input_key_decline', state=MenuCategories.waiting_for_key)
async def input_key_decline_callback(callback_query: types.CallbackQuery, state: FSMContext):
    global contest_messages

    # Clear the waiting state
    await state.finish()

    user_id = callback_query.from_user.id
    user_data = await user_collections.find_one({"_id": user_id})

    if user_data and (("status" in user_data and user_data["status"] in ["–¢–µ—Å—Ç–µ—Ä üî∞", "–ê–¥–º–∏–Ω üöó", "–°–æ–∑–¥–∞—Ç–µ–ª—å üé≠"]) or int(
            user_data.get("keys", 0)) > 0):
        # Code for existing user
        keyboard = types.InlineKeyboardMarkup()
        search = types.InlineKeyboardButton(text='üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data='search')
        create = types.InlineKeyboardButton(text='üé´ –°–æ–∑–¥–∞—Ç—å', callback_data='create')
        change = types.InlineKeyboardButton(text='üç≠ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data='change')
        keyboard.row(change, search)
        keyboard.row(create)

        # Get the message ID from the contest_messages list
        message_id = contest_messages[-1]
        text = "*üç° –†–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞–º–∏!*\n\n*‚ú® –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–æ–º –∏–ª–∏ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è:*"

        reply = await bot.edit_message_text(text, callback_query.message.chat.id, message_id, parse_mode="Markdown",
                                            reply_markup=keyboard)

        # Update the message ID in the contest_messages list
        contest_messages[-1] = reply.message_id
    else:
        # Code for existing user
        keyboard = types.InlineKeyboardMarkup()
        input_key = types.InlineKeyboardButton(text='üîë –í–≤–µ—Å—Ç–∏ –∫–ª—é—á', callback_data='input_key')
        keyboard.row(input_key)

        # Get the message ID from the contest_messages list
        message_id = contest_messages[-1]
        text = "*üëÄ –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –∏ –≤–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ–Ω–∫—É—Ä—Å–æ–≤:*"

        reply = await bot.edit_message_text(text, callback_query.message.chat.id, message_id, parse_mode="Markdown",
                                            reply_markup=keyboard)

        # Update the message ID in the contest_messages list
        contest_messages[-1] = reply.message_id

@dp.message_handler(state=MenuCategories.waiting_for_key)
async def process_key(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–ª—é—á–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    key = message.text

    user_id = message.from_user.id  # Obtain the user ID from the message object

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.delete_message(message.chat.id, message.message_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    key_data = await key_collection.find_one({"key": key})

    if key_data:
        uses = key_data.get("uses", 0)
        if uses > 0:
            # –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è uses –Ω–∞ 1
            await key_collection.update_one({"key": key}, {"$inc": {"uses": -1}})

            # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è keys –Ω–∞ 1 –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ user_collections
            user = await user_collections.find_one({"_id": user_id})
            if user and isinstance(user.get("keys"), int):
                await user_collections.update_one({"_id": user_id}, {"$inc": {"keys": 1}})
            else:
                await user_collections.update_one({"_id": user_id}, {"$set": {"keys": 1}})

            # –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            message_id = contest_messages[-1]

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = types.InlineKeyboardMarkup()
            search = types.InlineKeyboardButton(text='üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data='search')
            create = types.InlineKeyboardButton(text='üé´ –°–æ–∑–¥–∞—Ç—å', callback_data='create')
            change = types.InlineKeyboardButton(text='üç≠ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data='change')
            keyboard.row(change, search)
            keyboard.row(create)
            text = "*üç° –†–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞–º–∏!*\n\n*‚ú® –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–æ–º –∏–ª–∏ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è:*"

            await bot.edit_message_text(text, message.chat.id, message_id, parse_mode="Markdown", reply_markup=keyboard)
        else:
            wrong_key = await bot.send_message(message.chat.id, "*‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —ç—Ç–æ–≥–æ –∫–ª—é—á–∞ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–ª—é—á.*", parse_mode="Markdown")
            await asyncio.sleep(5)
            await bot.delete_message(chat_id=message.chat.id, message_id=wrong_key.message_id)
    else:
        wrong_key = await bot.send_message(message.chat.id, "*‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.*", parse_mode="Markdown")
        await asyncio.sleep(3)
        await bot.delete_message(chat_id=message.chat.id, message_id=wrong_key.message_id)

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–ª—é—á–∞
    await state.finish()

@dp.callback_query_handler(lambda query: query.data == 'continue_create')
async def continue_create_callback(query: types.CallbackQuery, state: FSMContext):
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º
    create_text = "*ü™Å –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–Ω–∫—É—Ä—Å–∞:*"

    keyboard = types.InlineKeyboardMarkup()
    skip_name = types.InlineKeyboardButton(text=' –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üö©', callback_data='skip_name')
    keyboard.row(skip_name)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ contest_messages
    message_id = contest_messages[-1]

    await bot.edit_message_text(create_text, query.message.chat.id, message_id, parse_mode="Markdown", reply_markup=keyboard)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∫–æ–Ω–∫—É—Ä—Å–∞
    await CreateContestState.name.set()

@dp.message_handler(state=CreateContestState.name)
async def process_name(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–º–µ–Ω–∏ –∫–æ–Ω–∫—É—Ä—Å–∞
    contest_name = message.text

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.delete_message(message.chat.id, message.message_id)

    if not contest_name:
        # –ï—Å–ª–∏ –∏–º—è –∫–æ–Ω–∫—É—Ä—Å–∞ –Ω–µ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è
        contest_name = str(random.randint(100000000, 999999999))

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∫–æ–Ω–∫—É—Ä—Å–∞
    contest_id = str(random.randint(100000000, 999999999))

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∫–æ–Ω–∫—É—Ä—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö)
    await state.update_data(contest_name=contest_name)
    await state.update_data(contest_id=contest_id)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —Ç–µ–∫—Å—Ç–æ–º
    skip_name_text = f"*üéóÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞:*"

    keyboard = types.InlineKeyboardMarkup()
    skip_description = types.InlineKeyboardButton(text=' –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üö©', callback_data='skip_description')
    keyboard.add(skip_description)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ contest_messages
    message_id = contest_messages[-1]

    await bot.edit_message_text(skip_name_text, message.chat.id, message_id, parse_mode="Markdown", reply_markup=keyboard)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞
    await CreateContestState.description.set()

@dp.callback_query_handler(lambda query: query.data == 'skip_name', state=CreateContestState.name)
async def skip_name_callback(query: types.CallbackQuery, state: FSMContext):
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∫–æ–Ω–∫—É—Ä—Å–∞
    contest_name = str(random.randint(100000000, 999999999))
    contest_id = contest_name

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∫–æ–Ω–∫—É—Ä—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö)
    await state.update_data(contest_name=contest_name)
    await state.update_data(contest_id=contest_id)
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —Ç–µ–∫—Å—Ç–æ–º
    skip_name_text = f"*üéóÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞:*"

    keyboard = types.InlineKeyboardMarkup()
    skip_description = types.InlineKeyboardButton(text=' –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üö©', callback_data='skip_description')
    keyboard.add(skip_description)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ contest_messages
    message_id = contest_messages[-1]

    await bot.edit_message_text(skip_name_text, query.message.chat.id, message_id, parse_mode="Markdown", reply_markup=keyboard)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞
    await CreateContestState.description.set()

# Regular expression pattern to match links
link_pattern = r"https?://\S+"
link_regex = re.compile(link_pattern, re.IGNORECASE)

@dp.message_handler(state=CreateContestState.description)
async def process_description(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞
    contest_description = message.text

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.delete_message(message.chat.id, message.message_id)

    if not contest_description:
        contest_description = "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç üö´"
    else:
        # Check if the description contains any links and remove them
        contest_description = link_regex.sub("", contest_description)

        # Check if the description contains any formatting (bold, italics, etc.) and remove them
        contest_description = contest_description.replace("_", "").replace("*", "").replace("`", "")

    # Check character count and notify the user if it exceeds the limit
    max_char_count = 1500
    excess_chars = len(contest_description) - max_char_count

    if excess_chars > 0:
        contest_description = contest_description[:max_char_count]
        excess_chars_message = f"\n\n*‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∏ –±—ã–ª–æ —Å–æ–∫—Ä–∞—â–µ–Ω–æ –Ω–∞ {excess_chars} —Å–∏–º–≤–æ–ª–æ–≤.*"
        wrong_symbol = await bot.send_message(message.chat.id,
                                                   excess_chars_message, parse_mode="Markdown")
        await asyncio.sleep(4)
        await bot.delete_message(chat_id=message.chat.id, message_id=wrong_symbol.message_id)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π)
    await state.update_data(description=contest_description)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —Ç–µ–∫—Å—Ç–æ–º
    skip_winners_text = f"*üéñÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤ –∫–æ–Ω–∫—É—Ä—Å–µ:*"

    keyboard = types.InlineKeyboardMarkup()
    skip_winners = types.InlineKeyboardButton(text=' –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üö©', callback_data='skip_winners')
    keyboard.add(skip_winners)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ contest_messages
    message_id = contest_messages[-1]

    await bot.edit_message_text(skip_winners_text, message.chat.id, message_id, parse_mode="Markdown", reply_markup=keyboard)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞
    await CreateContestState.winners.set()

@dp.callback_query_handler(lambda query: query.data == 'skip_description', state=CreateContestState.description)
async def skip_name_callback(query: types.CallbackQuery, state: FSMContext):
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞
    contest_description = "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç üö´"

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–æ–Ω–∫—É—Ä—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π)
    await state.update_data(description=contest_description)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —Ç–µ–∫—Å—Ç–æ–º
    skip_winners_text = f"*üéñÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤ –∫–æ–Ω–∫—É—Ä—Å–µ:*"

    keyboard = types.InlineKeyboardMarkup()
    skip_winners = types.InlineKeyboardButton(text=' –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üö©', callback_data='skip_winners')
    keyboard.add(skip_winners)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ contest_messages
    message_id = contest_messages[-1]

    await bot.edit_message_text(skip_winners_text, query.message.chat.id, message_id, parse_mode="Markdown", reply_markup=keyboard)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞
    await CreateContestState.winners.set()

@dp.message_handler(state=CreateContestState.winners)
async def process_description(message: types.Message, state: FSMContext):
    winners = message.text

    await bot.delete_message(message.chat.id, message.message_id)

    if not winners.isdigit():
        int_digit = await bot.send_message(message.chat.id, "*–ù—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! ‚ùå*", parse_mode="Markdown")
        await asyncio.sleep(3)
        await bot.delete_message(chat_id=message.chat.id, message_id=int_digit.message_id)
        return

    winners = int(winners)
    if winners <= 0 or winners > 25:
        invalid_value = await bot.send_message(message.chat.id, "*–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 25. ‚ùå*", parse_mode="Markdown")
        await asyncio.sleep(3)
        await bot.delete_message(chat_id=message.chat.id, message_id=invalid_value.message_id)
        return

    if not winners:
        winners = 1

    await state.update_data(winners=winners)
    message_id = contest_messages[-1]

    date_text = f"*üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):*"
    keyboard = types.InlineKeyboardMarkup()
    skip_date = types.InlineKeyboardButton(text=' –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üö©', callback_data='skip_date')
    keyboard.add(skip_date)

    await bot.edit_message_text(date_text, message.chat.id, message_id, parse_mode="Markdown", reply_markup=keyboard)

    await CreateContestState.end_date.set()

@dp.callback_query_handler(lambda query: query.data == 'skip_winners', state=CreateContestState.winners)
async def skip_name_callback(query: types.CallbackQuery, state: FSMContext):
    winners = 1

    await state.update_data(winners=winners)
    message_id = contest_messages[-1]

    date_text = f"*üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):*"
    keyboard = types.InlineKeyboardMarkup()
    skip_date = types.InlineKeyboardButton(text=' –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üö©', callback_data='skip_date')
    keyboard.add(skip_date)

    await bot.edit_message_text(date_text, query.message.chat.id, message_id, parse_mode="Markdown", reply_markup=keyboard)

    await CreateContestState.end_date.set()

@dp.message_handler(state=CreateContestState.end_date)
async def process_description(message: types.Message, state: FSMContext):
    global contest_name, contest_id, contest_description, winners, end_date

    end_date_str = message.text

    await bot.delete_message(message.chat.id, message.message_id)
    message_id = contest_messages[-1]

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (offset-aware)
    today = datetime.now(timezone)

    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ê–°:–ú–ò–ù–£–¢–´ (offset-aware)
        end_date = datetime.strptime(end_date_str, "%d.%m.%Y %H:%M")
    except ValueError:
        try:
            # If the above parsing fails, try parsing the date without time
            end_date = datetime.strptime(end_date_str, "%d.%m.%Y")
            # Set the time to midnight (00:00)
            end_date = end_date.replace(hour=0, minute=0)
        except ValueError:
            # If both parsing attempts fail, it means the date format is incorrect
            wrong_date_format = await bot.send_message(message.chat.id, "*–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ* `–î–î.–ú–ú.–ì–ì–ì–ì.` *–∏–ª–∏* `–î–î.–ú–ú.–ì–ì–ì–ì. –ß–ê–°:–ú–ò–ù–£–¢–´` ‚ùå", parse_mode="Markdown")
            await asyncio.sleep(3)
            await bot.delete_message(chat_id=message.chat.id, message_id=wrong_date_format.message_id)
            return

    # Making end_date offset-aware using the same timezone
    end_date = timezone.localize(end_date)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    if end_date <= today:
        old_date = await bot.send_message(message.chat.id, "*–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏.* üò∂", parse_mode="Markdown")
        await asyncio.sleep(3)
        await bot.delete_message(chat_id=message.chat.id, message_id=old_date.message_id)
        return

    if not end_date_str:
        end_date_str = "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞. üö´"
    else:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç datetime –≤ —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ê–°:–ú–ò–ù–£–¢–´
        end_date_str = end_date.strftime("%d.%m.%Y %H:%M")

    await state.update_data(end_date=end_date_str)

    data = await state.get_data()

    end_date = data.get('end_date')
    contest_name = data.get('contest_name')
    contest_id = data.get('contest_id')
    contest_description = data.get('description')
    winners = data.get('winners')

    confirmation_text = f"*üí† –î–∞–Ω–Ω—ã–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!*\n\n*ü™Å –ò–º—è:* `{contest_name}`\n*üßä –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:* `{contest_id}`\n*üéóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:* _{contest_description}_\n*üéñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:* `{winners}`\n*üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:* `{end_date}`"

    keyboard = types.InlineKeyboardMarkup()
    confirm_create = types.InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ', callback_data='confirm_create')
    decline_create = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå', callback_data='decline_create')
    keyboard.add(decline_create, confirm_create)

    await bot.edit_message_text(confirmation_text, message.chat.id, message_id, parse_mode="Markdown", reply_markup=keyboard)

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–ª—é—á–∞
    await state.finish()

@dp.callback_query_handler(lambda query: query.data == 'skip_date', state=CreateContestState.end_date)
async def skip_date_callback(query: types.CallbackQuery, state: FSMContext):
    global contest_name, contest_id, contest_description, winners, end_date

    end_date = "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞. üö´"

    await state.update_data(end_date=end_date)

    data = await state.get_data()
    message_id = contest_messages[-1]

    contest_name = data.get('contest_name')
    contest_id = data.get('contest_id')
    contest_description = data.get('description')
    winners = data.get('winners')
    end_date = data.get('end_date')

    confirmation_text = f"*üí† –î–∞–Ω–Ω—ã–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!*\n\n" \
                        f"*ü™Å –ò–º—è:* `{contest_name}`\n" \
                        f"*üßä –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:* `{contest_id}`\n" \
                        f"*üéóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:* _{contest_description}_\n" \
                        f"*üéñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:* `{winners}`\n" \
                        f"*üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:* `{end_date}`"

    keyboard = types.InlineKeyboardMarkup()
    confirm_create = types.InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ', callback_data='confirm_create')
    decline_create = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå', callback_data='decline_create')

    keyboard.add(decline_create, confirm_create)

    await bot.edit_message_text(confirmation_text, query.message.chat.id, message_id, parse_mode="Markdown", reply_markup=keyboard)

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–ª—é—á–∞
    await state.finish()

@dp.callback_query_handler(lambda query: query.data == 'confirm_create', state='*')
async def confirm_create_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await button_click(callback_query, state)

# –í–µ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—É—Ä—Å–∞
@dp.callback_query_handler(text='decline_search', state=MenuCategories.search)
async def decline_search_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    prev_message_id = (await state.get_data()).get('prev_message_id')
    if prev_message_id:
        await bot.delete_message(callback_query.message.chat.id, prev_message_id)
    await state.finish()

    global contest_messages

    message_id = contest_messages[-1]

    user_id = callback_query.from_user.id
    user_data = await user_collections.find_one({"_id": user_id})

    if user_data and (("status" in user_data and user_data["status"] in ["–¢–µ—Å—Ç–µ—Ä üî∞", "–ê–¥–º–∏–Ω üöó", "–°–æ–∑–¥–∞—Ç–µ–ª—å üé≠"]) or int(user_data.get("keys", 0)) > 0):

        # –ö–æ–¥ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard = types.InlineKeyboardMarkup()
        search = types.InlineKeyboardButton(text='üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data='search')
        create = types.InlineKeyboardButton(text='üé´ –°–æ–∑–¥–∞—Ç—å', callback_data='create')
        change = types.InlineKeyboardButton(text='üç≠ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data='change')
        keyboard.row(change, search)
        keyboard.row(create)

        confirmation_text = "*üç° –†–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞–º–∏!*\n\n*‚ú® –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–æ–º –∏–ª–∏ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è:*"

        reply = await bot.edit_message_text(confirmation_text, callback_query.message.chat.id, message_id, parse_mode="Markdown",
                                    reply_markup=keyboard)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        contest_messages.append(reply.message_id)

    else:
        # –ö–æ–¥ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard = types.InlineKeyboardMarkup()
        input_key = types.InlineKeyboardButton(text='üîë –í–≤–µ—Å—Ç–∏ –∫–ª—é—á', callback_data='input_key')
        keyboard.row(input_key)

        confirmation_text = "*üëÄ –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –∏ –≤–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ–Ω–∫—É—Ä—Å–æ–≤:*"

        reply = await bot.edit_message_text(confirmation_text, callback_query.message.chat.id, message_id, parse_mode="Markdown",
                                    reply_markup=keyboard)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        contest_messages.append(reply.message_id)

@dp.message_handler(state=MenuCategories.search)
async def process_search(message: types.Message, state: FSMContext):
    await bot.delete_message(message.chat.id, message.message_id)

    if not message.text.isdigit():
        int_digit = await bot.send_message(message.chat.id, "*‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–Ω–∫—É—Ä—Å–∞.*", parse_mode="Markdown")
        await asyncio.sleep(3)
        await bot.delete_message(chat_id=message.chat.id, message_id=int_digit.message_id)
        return

    global contest_messages

    search_id = int(message.text)

    # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
    contest = await contests_collection.find_one({"_id": search_id})

    # –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    result = await bot.send_message(message.chat.id, "*üïå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—É—Ä—Å–∞...*", parse_mode="Markdown")
    await asyncio.sleep(2)
    await bot.delete_message(chat_id=message.chat.id, message_id=result.message_id)
    message_id = contest_messages[-1]

    if contest:
        contest_id = contest.get("_id")
        contest_name = contest.get("contest_name")
        owner_id = contest.get("owner_id")
        contest_description = contest.get("contest_description")
        members = contest.get("members")
        end_date = contest.get("end_date")
        members_message = len(members)
        winners = contest.get("winners", 0)
        contest_winners = contest.get("contest_winners")
        ended = contest.get("ended")
        if ended == "True":
            contest_status = "<b>‚ùå –°—Ç–∞—Ç—É—Å:</b> –ó–∞–≤–µ—Ä—à—ë–Ω."
        else:
            contest_status = "<b>‚úÖ –°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–µ–Ω."

        if contest_winners:

            contest_winners_list = "\n".join(
                [f"<b>{idx}.</b> @{await get_username_winners(user)} ‚Äî <code>{user}</code>" for idx, user in
                 enumerate(contest_winners, start=1)])
            result_message = f"<b>üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—É—Ä—Å–∞ </b> <code>{contest_id}</code><b>:</b>\n\n" \
                             f"<b>üçô –ê–≤—Ç–æ—Ä:</b> <code>{owner_id}</code>\n" \
                             f"<b>üßä –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:</b> <code>{contest_id}</code>\n" \
                             f"<b>ü™Å –ò–º—è:</b> <code>{contest_name}</code>\n" \
                             f"<b>üéóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:</b> <i>{contest_description}</i>\n" \
                             f"<b>üéñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:</b> <code>{winners}</code>\n" \
                             f"<b>üë§ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> <code>{members_message}</code>\n" \
                             f"<b>üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:</b> \n{contest_winners_list}\n" \
                             f"<b>üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> <code>{end_date}</code>\n\n" \
                             f"{contest_status}"
        else:
            result_message = f"<b>üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—É—Ä—Å–∞ </b> <code>{contest_id}</code><b>:</b>\n\n" \
                             f"<b>üçô –ê–≤—Ç–æ—Ä:</b> <code>{owner_id}</code>\n" \
                             f"<b>üßä –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:</b> <code>{contest_id}</code>\n" \
                             f"<b>ü™Å –ò–º—è:</b> <code>{contest_name}</code>\n" \
                             f"<b>üéóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:</b> <i>{contest_description}</i>\n" \
                             f"<b>üéñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:</b> <code>{winners}</code>\n" \
                             f"<b>üë§ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> <code>{members_message}</code>\n" \
                             f"<b>üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> <code>{end_date}</code>\n\n" \
                             f"{contest_status}"

        keyboard = types.InlineKeyboardMarkup()
        input_id = types.InlineKeyboardButton(text='–ù–ê–ó–ê–î ‚ùå', callback_data='decline_search')
        search = types.InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å üîé', callback_data='search')
        keyboard.row(search)
        keyboard.row(input_id)

        reply = await bot.edit_message_text(result_message, message.chat.id, message_id, parse_mode="HTML", reply_markup=keyboard)
        await state.finish()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        contest_messages.append(reply.message_id)
    else:
        int_digit = await bot.send_message(message.chat.id, "*‚ùå –ö–æ–Ω–∫—É—Ä—Å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∞–π–¥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.*", parse_mode="Markdown")
        await asyncio.sleep(4)
        await bot.delete_message(chat_id=message.chat.id, message_id=int_digit.message_id)

@dp.callback_query_handler(text='search')
async def search_callback(callback_query: types.CallbackQuery, state: FSMContext):
    search_text = "*üîé –ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∫–æ–Ω–∫—É—Ä—Å, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∞–π–¥–∏:*"
    keyboard = types.InlineKeyboardMarkup()
    input_id = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data='decline_search')
    keyboard.row(input_id)

    await bot.edit_message_text(search_text, callback_query.message.chat.id, callback_query.message.message_id,
                                parse_mode="Markdown", reply_markup=keyboard)
    await MenuCategories.search.set()
    await state.update_data(prev_message_id=callback_query.message.message_id)

# –í–µ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query_handler(text='decline_id_check', state=MenuCategories.id_check)
async def decline_search_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await state.finish()

    user_id = callback_query.from_user.id
    user_data = await user_collections.find_one({"_id": user_id})

    if user_data:
        username = callback_query.from_user.username

        await show_profile(username, user_id, callback_query.message.chat.id, callback_query.message.message_id)
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        reply = await message.reply("‚ò†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        profile_messages.append(reply.message_id)

@dp.message_handler(state=MenuCategories.id_check)
async def process_search(message: types.Message, state: FSMContext):
    await bot.delete_message(message.chat.id, message.message_id)
    username = message.from_user.username
    if not message.text.isdigit():
        int_digit = await bot.send_message(message.chat.id, "*‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.*", parse_mode="Markdown")
        await asyncio.sleep(3)
        await bot.delete_message(chat_id=message.chat.id, message_id=int_digit.message_id)
        return

    prev_message_id = (await state.get_data()).get('prev_message_id')

    user_id = int(message.text)

    # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
    user = await user_collections.find_one({"_id": user_id})

    # –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    result = await bot.send_message(message.chat.id, "*üèØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...*", parse_mode="Markdown")
    await asyncio.sleep(2)
    await bot.delete_message(chat_id=message.chat.id, message_id=result.message_id)

    if user:
        user_data = await user_collections.find_one({"_id": user_id})

        wins = user_data.get("wins", 0)
        participation = user_data.get("participation", 0)

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø–æ–±–µ–¥
        win_percentage = (wins / participation) * 100 if participation > 0 else 0
        creation_date = user_data.get("creation_date", "")
        status = user_data.get("status", "")

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
        profile = f'*üçπ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* `{username}`:\n\n' \
                  f'*üçß –°—Ç–∞—Ç—É—Å:* `{status}`\n\n' \
                  f'*üçÄ –£—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö:* `{participation}`\n' \
                  f'*üèÖ –ü–æ–±–µ–¥—ã –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö:* `{wins}`\n' \
                  f'*üèÜ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥:* `{win_percentage:.2f}%`\n\n' \
                  f'*üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* `{creation_date}`'
        keyboard = types.InlineKeyboardMarkup()
        game_profile = types.InlineKeyboardButton(text='–ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å üéÆ', callback_data=f'game_profile_{user_id}_check')
        id_check = types.InlineKeyboardButton(text='–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ü•è', callback_data='id_check')
        back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data='profile_edit')
        keyboard.add(game_profile)
        keyboard.add(id_check)
        keyboard.add(back)

        reply = await bot.edit_message_text(profile, message.chat.id, prev_message_id, parse_mode="Markdown",
                                    reply_markup=keyboard)
        await state.finish()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        profile_messages.append(reply.message_id)
    else:
        int_digit = await bot.send_message(message.chat.id, "*‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∞–π–¥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.*", parse_mode="Markdown")
        await asyncio.sleep(4)
        await bot.delete_message(chat_id=message.chat.id, message_id=int_digit.message_id)

@dp.callback_query_handler(text='id_check')
async def search_callback(callback_query: types.CallbackQuery, state: FSMContext):
    search_text = "*üîé –ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∞–π–¥–∏:*"
    keyboard = types.InlineKeyboardMarkup()
    input_id = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data='decline_id_check')
    keyboard.row(input_id)

    reply = await bot.edit_message_text(search_text, callback_query.message.chat.id, callback_query.message.message_id,
                                parse_mode="Markdown", reply_markup=keyboard)

    await MenuCategories.id_check.set()
    await state.update_data(prev_message_id=callback_query.message.message_id)

## –í–µ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω–∫—É—Ä—Å–µ
@dp.callback_query_handler(text='decline_contest_profile_search', state=MenuCategories.contest_search_profile)
async def decline_search_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await state.finish()
    prev_message_id = (await state.get_data()).get('prev_message_id')
    if prev_message_id:
        await bot.delete_message(callback_query.message.chat.id, prev_message_id)

    global contest_messages

    user_id = callback_query.from_user.id

    # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
    contests = await contests_collection.find({"owner_id": user_id}).to_list(length=None)
    message_id = contest_messages[-1]
    if contests:
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–æ–Ω–∫—É—Ä—Å–∞–º–∏
        result_message = "*üéØ –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã:*\n\n"

        # –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É –∫–æ–Ω–∫—É—Ä—Å—É
        for contest in contests:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
            contest_id = contest.get("_id")
            contest_name = contest.get("contest_name")
            members = contest.get("members")
            ended = contest.get("ended")
            if ended == "True":
                pass
            else:
                if members:
                    members_count = len(members)
                else:
                    members_count = 0

                if members_count > 0:
                    members_message = f"{members_count}"
                else:
                    members_message = "0"

                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–Ω–∫—É—Ä—Å–∞
                result_message += f"*ü™Å –ò–º—è:* `{contest_name}`\n" \
                                  f"*üßä –ê–π–¥–∏ –∫–æ–Ω–∫—É—Ä—Å–∞* `{contest_id}`*:*\n" \
                                  f"*üèØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* `{members_message}`" \
                                  f"*¬∑*\n"

        keyboard = types.InlineKeyboardMarkup()
        decline_create = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data='decline_create')
        contest_check = types.InlineKeyboardButton(text='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ üßß', callback_data='contest_check')
        keyboard.row(contest_check)
        keyboard.row(decline_create)

        reply = await bot.edit_message_text(result_message, callback_query.message.chat.id, message_id,
                                            parse_mode="Markdown",
                                            reply_markup=keyboard)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        change_message_id.append(reply.message_id)
    else:
        keyboard = types.InlineKeyboardMarkup()
        decline_create = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data='decline_create')
        keyboard.row(decline_create)

        int_digit = await bot.edit_message_text("*–£ –≤–∞—Å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤‚ÄºÔ∏è*",
                                                callback_query.message.chat.id, message_id,
                                                parse_mode="Markdown",
                                                reply_markup=keyboard)
        change_message_id.append(int_digit.message_id)

@dp.message_handler(state=MenuCategories.contest_search_profile)
async def process_search(message: types.Message, state: FSMContext):
    await bot.delete_message(message.chat.id, message.message_id)

    if not message.text.isdigit():
        int_digit = await bot.send_message(message.chat.id, "*‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.*", parse_mode="Markdown")
        await asyncio.sleep(3)
        await bot.delete_message(chat_id=message.chat.id, message_id=int_digit.message_id)
        return

    global change_message_id
    contest_id = (await state.get_data()).get('contest_id')

    search_user_id = int(message.text)

    # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
    contest = await contests_collection.find_one({"_id": int(contest_id)})

    if contest:
        members = contest.get("members")
        ban_members = contest.get("ban_members")
        join_date = contest.get("join_date")

        if int(search_user_id) in members:
            user_index = members.index(search_user_id)
            blocked = "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!" if search_user_id in ban_members else "–î—É—à–µ–≤–Ω–æ–µ!"

            # –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            result = await bot.send_message(message.chat.id, "*üïå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞...*", parse_mode="Markdown")
            await asyncio.sleep(2)
            await bot.delete_message(chat_id=message.chat.id, message_id=result.message_id)
            message_id = change_message_id[-1]

            username = await get_username(search_user_id)
            if username:
                username = username.replace("_", "&#95;")
            if search_user_id in ban_members:
                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                result_message = f"<b>üß∂–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>{search_user_id}</code>\n" \
                                 f"<b>ü™ê –Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{username}\n" \
                                 f"<b>‚ÄºÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> <code>{blocked}</code>"
                block = types.InlineKeyboardButton(text='–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å ‚ùé',
                                                   callback_data=f'unblock_profile_{search_user_id}_{contest_id}')
            else:
                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                result_message = f"<b>üß∂–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>{search_user_id}</code>\n" \
                                 f"<b>ü™ê –Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{username}\n" \
                                 f"<b>üìÖ –î–∞—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:</b> <code>{join_date[user_index]}</code>\n\n" \
                                 f"<b>‚ùé –°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> <code>{blocked}</code>"
                block = types.InlineKeyboardButton(text='–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å üö´',
                                                   callback_data=f'block_profile_{search_user_id}_{contest_id}')

            keyboard = types.InlineKeyboardMarkup()
            kick = types.InlineKeyboardButton(text='–ò—Å–∫–ª—é—á–∏—Ç—å üéá',
                                               callback_data=f'kick_profile_{search_user_id}_{contest_id}')
            back_search = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data='contest_check')
            input_id = types.InlineKeyboardButton(text='–ò—Å–∫–∞—Ç—å –µ—â—ë üîé', callback_data=f'contest_search_profile_{contest_id}')
            keyboard.row(input_id)
            keyboard.row(kick, block)
            keyboard.row(back_search)
            reply = await bot.edit_message_text(result_message, message.chat.id, message_id, parse_mode="HTML",
                                                reply_markup=keyboard)
            await state.finish()

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            change_message_id.append(reply.message_id)
        elif int(search_user_id) in ban_members:
            message_id = change_message_id[-1]

            username = await get_username(search_user_id)
            if username:
                username = username.replace("_", "&#95;")

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result_message = f"<b>üß∂–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>{search_user_id}</code>\n" \
                             f"<b>ü™ê –Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{username}\n" \
                             f"<b>‚ÄºÔ∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:</b> <code>–î–∞ üî®</code>"
            unblock = types.InlineKeyboardButton(text='–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å ‚ùé',
                                                 callback_data=f'unblock_profile_{search_user_id}_{contest_id}')

            keyboard = types.InlineKeyboardMarkup()
            back_search = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data='contest_check')
            input_id = types.InlineKeyboardButton(text='–ò—Å–∫–∞—Ç—å –µ—â—ë üîé',
                                                  callback_data=f'contest_search_profile_{contest_id}')
            keyboard.row(input_id)
            keyboard.row(unblock)
            keyboard.row(back_search)
            await state.finish()

            reply = await bot.edit_message_text(result_message, message.chat.id, message_id, parse_mode="HTML",
                                                reply_markup=keyboard)
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            change_message_id.append(reply.message_id)
        else:
            int_digit = await bot.send_message(message.chat.id, "*‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω.*", parse_mode="Markdown")
            await asyncio.sleep(4)
            await bot.delete_message(chat_id=message.chat.id, message_id=int_digit.message_id)
    else:
        int_digit = await bot.send_message(message.chat.id, "*‚ùå –ö–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.*", parse_mode="Markdown")
        await asyncio.sleep(4)
        await bot.delete_message(chat_id=message.chat.id, message_id=int_digit.message_id)

@dp.callback_query_handler(lambda c: c.data.startswith('contest_search_profile'))
async def search_callback(callback_query: types.CallbackQuery, state: FSMContext):

    button_text = callback_query.data
    contest_id = button_text.split('_')[3]

    search_text = "*üß∂ –í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*"
    keyboard = types.InlineKeyboardMarkup()
    input_id = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data='decline_contest_profile_search')
    keyboard.row(input_id)

    await bot.edit_message_text(search_text, callback_query.message.chat.id, callback_query.message.message_id,
                                parse_mode="Markdown", reply_markup=keyboard)
    await MenuCategories.contest_search_profile.set()
    await state.update_data(contest_id=contest_id)
    await state.update_data(prev_message_id=callback_query.message.message_id)

## –í–µ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–Ω–∫—É—Ä—Å–µ
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏
@dp.callback_query_handler(text='decline_name_change', state=ChangeContestState.name_change)
async def decline_search_callback(callback_query: types.CallbackQuery, state: FSMContext):
    contest_id = (await state.get_data()).get('contest_id')

    await callback_query.answer()
    await state.finish()
    prev_message_id = (await state.get_data()).get('prev_message_id')
    if prev_message_id:
        await bot.delete_message(callback_query.message.chat.id, prev_message_id)

    global contest_messages

    # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
    contest = await contests_collection.find_one({"_id": int(contest_id)})

    if contest:
        message_id = change_message_id[-1]

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
        contest_id = contest.get("_id")
        contest_name = contest.get("contest_name")
        contest_description = contest.get("contest_description")
        winners = contest.get("winners")
        members = contest.get("members")
        end_date = contest.get("end_date")

        if members:
            members_count = len(members)
        else:
            members_count = 0

        if members_count > 0:
            members_message = f"{members_count}"
        else:
            members_message = "0"

        result_message = f"*üèÜ –†–µ–¥–∞–∫—Ü–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞* `{contest_id}`*:*\n\n" \
                         f"*ü™Å –ò–º—è:* `{contest_name}`\n" \
                         f"*üßä –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:* `{contest_id}`\n" \
                         f"*üéóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:* _{contest_description}_\n" \
                         f"*üéñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:* `{winners}`\n" \
                         f"*üèØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* `{members_message}`\n" \
                         f"*üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:* `{end_date}`"

        keyboard = types.InlineKeyboardMarkup()
        name_change = types.InlineKeyboardButton(text='–ò–º—è  Ô∏èü™Å', callback_data=f'name_change_{contest_id}')
        description_change = types.InlineKeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ üéóÔ∏èÔ∏è',
                                                        callback_data=f'description_change_{contest_id}')
        winners_change = types.InlineKeyboardButton(text='–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ üéñÔ∏è', callback_data=f'winners_change_{contest_id}')
        date_change = types.InlineKeyboardButton(text='–î–∞—Ç–∞  Ô∏èüìÜ', callback_data=f'date_change_{contest_id}')
        back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data=f'change')
        keyboard.row(name_change)
        keyboard.row(description_change)
        keyboard.row(winners_change)
        keyboard.row(date_change)
        keyboard.row(back)

        reply = await bot.edit_message_text(result_message, callback_query.message.chat.id, message_id,
                                            parse_mode="Markdown",
                                            reply_markup=keyboard)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        change_message_id.append(reply.message_id)
    else:
        int_digit = await bot.edit_message_text("*–£ –≤–∞—Å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤‚ÄºÔ∏è*",
                                                callback_query.message.chat.id, message_id,
                                                parse_mode="Markdown",
                                                reply_markup=keyboard)
        change_message_id.append(int_digit.message_id)

@dp.message_handler(state=ChangeContestState.name_change)
async def process_search(message: types.Message, state: FSMContext):
    await bot.delete_message(message.chat.id, message.message_id)

    global change_message_id
    contest_id = (await state.get_data()).get('contest_id')

    new_name = message.text
    await contests_collection.update_one({"_id": int(contest_id)},
                                      {"$set": {"contest_name": new_name}})
    # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
    contest = await contests_collection.find_one({"_id": int(contest_id)})

    if contest:
        message_id = change_message_id[-1]

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
        contest_id = contest.get("_id")
        contest_name = contest.get("contest_name")
        contest_description = contest.get("contest_description")
        winners = contest.get("winners")
        members = contest.get("members")
        end_date = contest.get("end_date")

        if members:
            members_count = len(members)
        else:
            members_count = 0

        if members_count > 0:
            members_message = f"{members_count}"
        else:
            members_message = "0"

        result_message = f"*üèÜ –†–µ–¥–∞–∫—Ü–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞* `{contest_id}`*:*\n\n" \
                         f"*ü™Å –ò–º—è:* `{contest_name}`\n" \
                         f"*üßä –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:* `{contest_id}`\n" \
                         f"*üéóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:* _{contest_description}_\n" \
                         f"*üéñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:* `{winners}`\n" \
                         f"*üèØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* `{members_message}`\n" \
                         f"*üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:* `{end_date}`"

        keyboard = types.InlineKeyboardMarkup()
        name_change = types.InlineKeyboardButton(text='–ò–º—è  Ô∏èü™Å', callback_data=f'name_change_{contest_id}')
        description_change = types.InlineKeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ üéóÔ∏èÔ∏è',
                                                        callback_data=f'description_change_{contest_id}')
        winners_change = types.InlineKeyboardButton(text='–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ üéñÔ∏è', callback_data=f'winners_change_{contest_id}')
        date_change = types.InlineKeyboardButton(text='–î–∞—Ç–∞  Ô∏èüìÜ', callback_data=f'date_change_{contest_id}')
        back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data=f'change')
        keyboard.row(name_change)
        keyboard.row(description_change)
        keyboard.row(winners_change)
        keyboard.row(date_change)
        keyboard.row(back)

        reply = await bot.edit_message_text(result_message, message.chat.id, message_id, parse_mode="Markdown",
                                                reply_markup=keyboard)
        await state.finish()
    else:
        int_digit = await bot.send_message(message.chat.id, "*‚ùå –ö–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.*", parse_mode="Markdown")
        await asyncio.sleep(4)
        await bot.delete_message(chat_id=message.chat.id, message_id=int_digit.message_id)

@dp.callback_query_handler(lambda c: c.data.startswith('name_change'))
async def search_callback(callback_query: types.CallbackQuery, state: FSMContext):

    button_text = callback_query.data
    contest_id = button_text.split('_')[2]

    search_text = "*ü™Å –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∫–æ–Ω–∫—É—Ä—Å–∞:*"
    keyboard = types.InlineKeyboardMarkup()
    input_id = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data='decline_name_change')
    keyboard.row(input_id)

    await bot.edit_message_text(search_text, callback_query.message.chat.id, callback_query.message.message_id,
                                parse_mode="Markdown", reply_markup=keyboard)
    await ChangeContestState.name_change.set()
    await state.update_data(contest_id=contest_id)
    await state.update_data(prev_message_id=callback_query.message.message_id)

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
@dp.callback_query_handler(text='decline_description_change', state=ChangeContestState.description_change)
async def decline_search_callback(callback_query: types.CallbackQuery, state: FSMContext):
    contest_id = (await state.get_data()).get('contest_id')

    await callback_query.answer()
    await state.finish()
    prev_message_id = (await state.get_data()).get('prev_message_id')
    if prev_message_id:
        await bot.delete_message(callback_query.message.chat.id, prev_message_id)

    global contest_messages

    # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
    contest = await contests_collection.find_one({"_id": int(contest_id)})

    if contest:
        message_id = change_message_id[-1]

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
        contest_id = contest.get("_id")
        contest_name = contest.get("contest_name")
        contest_description = contest.get("contest_description")
        winners = contest.get("winners")
        members = contest.get("members")
        end_date = contest.get("end_date")

        if members:
            members_count = len(members)
        else:
            members_count = 0

        if members_count > 0:
            members_message = f"{members_count}"
        else:
            members_message = "0"

        result_message = f"*üèÜ –†–µ–¥–∞–∫—Ü–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞* `{contest_id}`*:*\n\n" \
                         f"*ü™Å –ò–º—è:* `{contest_name}`\n" \
                         f"*üßä –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:* `{contest_id}`\n" \
                         f"*üéóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:* _{contest_description}_\n" \
                         f"*üéñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:* `{winners}`\n" \
                         f"*üèØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* `{members_message}`\n" \
                         f"*üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:* `{end_date}`"

        keyboard = types.InlineKeyboardMarkup()
        name_change = types.InlineKeyboardButton(text='–ò–º—è  Ô∏èü™Å', callback_data=f'name_change_{contest_id}')
        description_change = types.InlineKeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ üéóÔ∏èÔ∏è',
                                                        callback_data=f'description_change_{contest_id}')
        winners_change = types.InlineKeyboardButton(text='–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ üéñÔ∏è', callback_data=f'winners_change_{contest_id}')
        date_change = types.InlineKeyboardButton(text='–î–∞—Ç–∞  Ô∏èüìÜ', callback_data=f'date_change_{contest_id}')
        back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data=f'change')
        keyboard.row(name_change)
        keyboard.row(description_change)
        keyboard.row(winners_change)
        keyboard.row(date_change)
        keyboard.row(back)

        reply = await bot.edit_message_text(result_message, callback_query.message.chat.id, message_id,
                                            parse_mode="Markdown",
                                            reply_markup=keyboard)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        change_message_id.append(reply.message_id)
    else:
        int_digit = await bot.edit_message_text("*–£ –≤–∞—Å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤‚ÄºÔ∏è*",
                                                callback_query.message.chat.id, message_id,
                                                parse_mode="Markdown",
                                                reply_markup=keyboard)
        change_message_id.append(int_digit.message_id)

@dp.message_handler(state=ChangeContestState.description_change)
async def process_search(message: types.Message, state: FSMContext):
    await bot.delete_message(message.chat.id, message.message_id)

    global change_message_id
    contest_id = (await state.get_data()).get('contest_id')
    # Check character count and notify the user if it exceeds the limit

    new_description = message.text

    max_char_count = 1500
    excess_chars = len(new_description) - max_char_count

    if excess_chars > 0:
        new_description = new_description[:max_char_count]
        excess_chars_message = f"\n\n*‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∏ –±—ã–ª–æ —Å–æ–∫—Ä–∞—â–µ–Ω–æ –Ω–∞ {excess_chars} —Å–∏–º–≤–æ–ª–æ–≤.*"
        wrong_symbol = await bot.send_message(message.chat.id,
                                              excess_chars_message, parse_mode="Markdown")
        await asyncio.sleep(4)
        await bot.delete_message(chat_id=message.chat.id, message_id=wrong_symbol.message_id)

    await contests_collection.update_one({"_id": int(contest_id)},
                                      {"$set": {"contest_description": new_description}})
    # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
    contest = await contests_collection.find_one({"_id": int(contest_id)})

    if contest:
        message_id = change_message_id[-1]

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
        contest_id = contest.get("_id")
        contest_name = contest.get("contest_name")
        contest_description = contest.get("contest_description")
        winners = contest.get("winners")
        members = contest.get("members")
        end_date = contest.get("end_date")

        if members:
            members_count = len(members)
        else:
            members_count = 0

        if members_count > 0:
            members_message = f"{members_count}"
        else:
            members_message = "0"

        result_message = f"*üèÜ –†–µ–¥–∞–∫—Ü–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞* `{contest_id}`*:*\n\n" \
                         f"*ü™Å –ò–º—è:* `{contest_name}`\n" \
                         f"*üßä –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:* `{contest_id}`\n" \
                         f"*üéóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:* _{contest_description}_\n" \
                         f"*üéñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:* `{winners}`\n" \
                         f"*üèØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* `{members_message}`\n" \
                         f"*üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:* `{end_date}`"

        keyboard = types.InlineKeyboardMarkup()
        name_change = types.InlineKeyboardButton(text='–ò–º—è  Ô∏èü™Å', callback_data=f'name_change_{contest_id}')
        description_change = types.InlineKeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ üéóÔ∏èÔ∏è',
                                                        callback_data=f'description_change_{contest_id}')
        winners_change = types.InlineKeyboardButton(text='–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ üéñÔ∏è', callback_data=f'winners_change_{contest_id}')
        date_change = types.InlineKeyboardButton(text='–î–∞—Ç–∞  Ô∏èüìÜ', callback_data=f'date_change_{contest_id}')
        back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data=f'change')
        keyboard.row(name_change)
        keyboard.row(description_change)
        keyboard.row(winners_change)
        keyboard.row(date_change)
        keyboard.row(back)

        reply = await bot.edit_message_text(result_message, message.chat.id, message_id, parse_mode="Markdown",
                                                reply_markup=keyboard)
        await state.finish()
    else:
        int_digit = await bot.send_message(message.chat.id, "*‚ùå –ö–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.*", parse_mode="Markdown")
        await asyncio.sleep(4)
        await bot.delete_message(chat_id=message.chat.id, message_id=int_digit.message_id)

@dp.callback_query_handler(lambda c: c.data.startswith('description_change'))
async def search_callback(callback_query: types.CallbackQuery, state: FSMContext):

    button_text = callback_query.data
    contest_id = button_text.split('_')[2]

    search_text = "*üéóÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞:*"
    keyboard = types.InlineKeyboardMarkup()
    input_id = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data='decline_description_change')
    keyboard.row(input_id)

    await bot.edit_message_text(search_text, callback_query.message.chat.id, callback_query.message.message_id,
                                parse_mode="Markdown", reply_markup=keyboard)
    await ChangeContestState.description_change.set()
    await state.update_data(contest_id=contest_id)
    await state.update_data(prev_message_id=callback_query.message.message_id)

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
@dp.callback_query_handler(text='decline_winners_change', state=ChangeContestState.winners_change)
async def decline_search_callback(callback_query: types.CallbackQuery, state: FSMContext):
    contest_id = (await state.get_data()).get('contest_id')

    await callback_query.answer()
    await state.finish()
    prev_message_id = (await state.get_data()).get('prev_message_id')
    if prev_message_id:
        await bot.delete_message(callback_query.message.chat.id, prev_message_id)

    global contest_messages

    # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
    contest = await contests_collection.find_one({"_id": int(contest_id)})

    if contest:
        message_id = change_message_id[-1]

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
        contest_id = contest.get("_id")
        contest_name = contest.get("contest_name")
        contest_description = contest.get("contest_description")
        winners = contest.get("winners")
        members = contest.get("members")
        end_date = contest.get("end_date")

        if members:
            members_count = len(members)
        else:
            members_count = 0

        if members_count > 0:
            members_message = f"{members_count}"
        else:
            members_message = "0"

        result_message = f"*üèÜ –†–µ–¥–∞–∫—Ü–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞* `{contest_id}`*:*\n\n" \
                         f"*ü™Å –ò–º—è:* `{contest_name}`\n" \
                         f"*üßä –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:* `{contest_id}`\n" \
                         f"*üéóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:* _{contest_description}_\n" \
                         f"*üéñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:* `{winners}`\n" \
                         f"*üèØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* `{members_message}`\n" \
                         f"*üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:* `{end_date}`"

        keyboard = types.InlineKeyboardMarkup()
        name_change = types.InlineKeyboardButton(text='–ò–º—è  Ô∏èü™Å', callback_data=f'name_change_{contest_id}')
        description_change = types.InlineKeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ üéóÔ∏èÔ∏è',
                                                        callback_data=f'description_change_{contest_id}')
        winners_change = types.InlineKeyboardButton(text='–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ üéñÔ∏è', callback_data=f'winners_change_{contest_id}')
        date_change = types.InlineKeyboardButton(text='–î–∞—Ç–∞  Ô∏èüìÜ', callback_data=f'date_change_{contest_id}')
        back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data=f'change')
        keyboard.row(name_change)
        keyboard.row(description_change)
        keyboard.row(winners_change)
        keyboard.row(date_change)
        keyboard.row(back)

        reply = await bot.edit_message_text(result_message, callback_query.message.chat.id, message_id,
                                            parse_mode="Markdown",
                                            reply_markup=keyboard)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        change_message_id.append(reply.message_id)
    else:
        int_digit = await bot.edit_message_text("*–£ –≤–∞—Å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤‚ÄºÔ∏è*",
                                                callback_query.message.chat.id, message_id,
                                                parse_mode="Markdown",
                                                reply_markup=keyboard)
        change_message_id.append(int_digit.message_id)

@dp.message_handler(state=ChangeContestState.winners_change)
async def process_search(message: types.Message, state: FSMContext):
    await bot.delete_message(message.chat.id, message.message_id)

    global change_message_id
    contest_id = (await state.get_data()).get('contest_id')

    new_winners = message.text
    if not new_winners.isdigit():
        int_digit = await bot.send_message(message.chat.id, "*–ù—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! ‚ùå*", parse_mode="Markdown")
        await asyncio.sleep(3)
        await bot.delete_message(chat_id=message.chat.id, message_id=int_digit.message_id)
        return

    winners = int(new_winners)
    if winners <= 0 or winners > 25:
        invalid_value = await bot.send_message(message.chat.id, "*–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 25. ‚ùå*", parse_mode="Markdown")
        await asyncio.sleep(3)
        await bot.delete_message(chat_id=message.chat.id, message_id=invalid_value.message_id)
        return

    await contests_collection.update_one({"_id": int(contest_id)},
                                      {"$set": {"winners": int(new_winners)}})
    # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
    contest = await contests_collection.find_one({"_id": int(contest_id)})

    if contest:
        message_id = change_message_id[-1]

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
        contest_id = contest.get("_id")
        contest_name = contest.get("contest_name")
        contest_description = contest.get("contest_description")
        winners = contest.get("winners")
        members = contest.get("members")
        end_date = contest.get("end_date")

        if members:
            members_count = len(members)
        else:
            members_count = 0

        if members_count > 0:
            members_message = f"{members_count}"
        else:
            members_message = "0"

        result_message = f"*üèÜ –†–µ–¥–∞–∫—Ü–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞* `{contest_id}`*:*\n\n" \
                         f"*ü™Å –ò–º—è:* `{contest_name}`\n" \
                         f"*üßä –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:* `{contest_id}`\n" \
                         f"*üéóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:* _{contest_description}_\n" \
                         f"*üéñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:* `{winners}`\n" \
                         f"*üèØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* `{members_message}`\n" \
                         f"*üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:* `{end_date}`"

        keyboard = types.InlineKeyboardMarkup()
        name_change = types.InlineKeyboardButton(text='–ò–º—è  Ô∏èü™Å', callback_data=f'name_change_{contest_id}')
        description_change = types.InlineKeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ üéóÔ∏èÔ∏è',
                                                        callback_data=f'description_change_{contest_id}')
        winners_change = types.InlineKeyboardButton(text='–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ üéñÔ∏è', callback_data=f'winners_change_{contest_id}')
        date_change = types.InlineKeyboardButton(text='–î–∞—Ç–∞  Ô∏èüìÜ', callback_data=f'date_change_{contest_id}')
        back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data=f'change')
        keyboard.row(name_change)
        keyboard.row(description_change)
        keyboard.row(winners_change)
        keyboard.row(date_change)
        keyboard.row(back)

        reply = await bot.edit_message_text(result_message, message.chat.id, message_id, parse_mode="Markdown",
                                                reply_markup=keyboard)
        await state.finish()
    else:
        int_digit = await bot.send_message(message.chat.id, "*‚ùå –ö–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.*", parse_mode="Markdown")
        await asyncio.sleep(4)
        await bot.delete_message(chat_id=message.chat.id, message_id=int_digit.message_id)

@dp.callback_query_handler(lambda c: c.data.startswith('winners_change'))
async def search_callback(callback_query: types.CallbackQuery, state: FSMContext):

    button_text = callback_query.data
    contest_id = button_text.split('_')[2]

    search_text = "*ü•á –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–µ—Ç–µ–ª–µ–π:*"
    keyboard = types.InlineKeyboardMarkup()
    input_id = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data='decline_winners_change')
    keyboard.row(input_id)

    await bot.edit_message_text(search_text, callback_query.message.chat.id, callback_query.message.message_id,
                                parse_mode="Markdown", reply_markup=keyboard)
    await ChangeContestState.winners_change.set()
    await state.update_data(contest_id=contest_id)
    await state.update_data(prev_message_id=callback_query.message.message_id)

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã
@dp.callback_query_handler(text='decline_date_change', state=ChangeContestState.date_change)
async def decline_search_callback(callback_query: types.CallbackQuery, state: FSMContext):
    contest_id = (await state.get_data()).get('contest_id')

    await callback_query.answer()
    await state.finish()
    prev_message_id = (await state.get_data()).get('prev_message_id')
    if prev_message_id:
        await bot.delete_message(callback_query.message.chat.id, prev_message_id)

    global contest_messages

    # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
    contest = await contests_collection.find_one({"_id": int(contest_id)})

    if contest:
        message_id = change_message_id[-1]

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
        contest_id = contest.get("_id")
        contest_name = contest.get("contest_name")
        contest_description = contest.get("contest_description")
        winners = contest.get("winners")
        members = contest.get("members")
        end_date = contest.get("end_date")

        if members:
            members_count = len(members)
        else:
            members_count = 0

        if members_count > 0:
            members_message = f"{members_count}"
        else:
            members_message = "0"

        result_message = f"*üèÜ –†–µ–¥–∞–∫—Ü–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞* `{contest_id}`*:*\n\n" \
                         f"*ü™Å –ò–º—è:* `{contest_name}`\n" \
                         f"*üßä –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:* `{contest_id}`\n" \
                         f"*üéóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:* _{contest_description}_\n" \
                         f"*üéñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:* `{winners}`\n" \
                         f"*üèØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* `{members_message}`\n" \
                         f"*üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:* `{end_date}`"

        keyboard = types.InlineKeyboardMarkup()
        name_change = types.InlineKeyboardButton(text='–ò–º—è  Ô∏èü™Å', callback_data=f'name_change_{contest_id}')
        description_change = types.InlineKeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ üéóÔ∏èÔ∏è',
                                                        callback_data=f'description_change_{contest_id}')
        winners_change = types.InlineKeyboardButton(text='–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ üéñÔ∏è', callback_data=f'winners_change_{contest_id}')
        date_change = types.InlineKeyboardButton(text='–î–∞—Ç–∞  Ô∏èüìÜ', callback_data=f'date_change_{contest_id}')
        back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data=f'change')
        keyboard.row(name_change)
        keyboard.row(description_change)
        keyboard.row(winners_change)
        keyboard.row(date_change)
        keyboard.row(back)

        reply = await bot.edit_message_text(result_message, callback_query.message.chat.id, message_id,
                                            parse_mode="Markdown",
                                            reply_markup=keyboard)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        change_message_id.append(reply.message_id)
    else:
        int_digit = await bot.edit_message_text("*–£ –≤–∞—Å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤‚ÄºÔ∏è*",
                                                callback_query.message.chat.id, message_id,
                                                parse_mode="Markdown",
                                                reply_markup=keyboard)
        change_message_id.append(int_digit.message_id)

@dp.message_handler(state=ChangeContestState.date_change)
async def process_search(message: types.Message, state: FSMContext):
    await bot.delete_message(message.chat.id, message.message_id)

    global change_message_id
    contest_id = (await state.get_data()).get('contest_id')

    new_date_str = message.text

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    today = datetime.now(timezone)

    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ê–°:–ú–ò–ù–£–¢–´ (offset-aware)
        new_date = datetime.strptime(new_date_str, "%d.%m.%Y %H:%M")
    except ValueError:
        try:
            # If the above parsing fails, try parsing the date without time
            new_date = datetime.strptime(new_date_str, "%d.%m.%Y")
            # Set the time to midnight (00:00)
            new_date = new_date.replace(hour=0, minute=0)
        except ValueError:
            # If both parsing attempts fail, it means the date format is incorrect
            wrong_date_format = await bot.send_message(message.chat.id, "*–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ* `–î–î.–ú–ú.–ì–ì–ì–ì.` *–∏–ª–∏* `–î–î.–ú–ú.–ì–ì–ì–ì. –ß–ê–°:–ú–ò–ù–£–¢–´` ‚ùå", parse_mode="Markdown")
            await asyncio.sleep(3)
            await bot.delete_message(chat_id=message.chat.id, message_id=wrong_date_format.message_id)
            return

    # Making end_date offset-aware using the same timezone
    new_date = timezone.localize(new_date)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    if new_date <= today:
        old_date = await bot.send_message(message.chat.id, "*–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏.* üò∂", parse_mode="Markdown")
        await asyncio.sleep(3)
        await bot.delete_message(chat_id=message.chat.id, message_id=old_date.message_id)
        return

    if not new_date_str:
        new_date_str = "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞. üö´"
    else:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç datetime –≤ —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ê–°:–ú–ò–ù–£–¢–´
        new_date_str = new_date.strftime("%d.%m.%Y %H:%M")

    await contests_collection.update_one({"_id": int(contest_id)},
                                      {"$set": {"end_date": new_date_str}})
    # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
    contest = await contests_collection.find_one({"_id": int(contest_id)})

    if contest:
        message_id = change_message_id[-1]

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
        contest_id = contest.get("_id")
        contest_name = contest.get("contest_name")
        contest_description = contest.get("contest_description")
        winners = contest.get("winners")
        members = contest.get("members")
        end_date = contest.get("end_date")

        if members:
            members_count = len(members)
        else:
            members_count = 0

        if members_count > 0:
            members_message = f"{members_count}"
        else:
            members_message = "0"

        result_message = f"*üèÜ –†–µ–¥–∞–∫—Ü–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞* `{contest_id}`*:*\n\n" \
                         f"*ü™Å –ò–º—è:* `{contest_name}`\n" \
                         f"*üßä –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:* `{contest_id}`\n" \
                         f"*üéóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:* _{contest_description}_\n" \
                         f"*üéñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:* `{winners}`\n" \
                         f"*üèØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* `{members_message}`\n" \
                         f"*üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:* `{end_date}`"

        keyboard = types.InlineKeyboardMarkup()
        name_change = types.InlineKeyboardButton(text='–ò–º—è  Ô∏èü™Å', callback_data=f'name_change_{contest_id}')
        description_change = types.InlineKeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ üéóÔ∏èÔ∏è',
                                                        callback_data=f'description_change_{contest_id}')
        winners_change = types.InlineKeyboardButton(text='–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ üéñÔ∏è', callback_data=f'winners_change_{contest_id}')
        date_change = types.InlineKeyboardButton(text='–î–∞—Ç–∞  Ô∏èüìÜ', callback_data=f'date_change_{contest_id}')
        back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data=f'change')
        keyboard.row(name_change)
        keyboard.row(description_change)
        keyboard.row(winners_change)
        keyboard.row(date_change)
        keyboard.row(back)

        reply = await bot.edit_message_text(result_message, message.chat.id, message_id, parse_mode="Markdown",
                                                reply_markup=keyboard)
        await state.finish()
    else:
        int_digit = await bot.send_message(message.chat.id, "*‚ùå –ö–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.*", parse_mode="Markdown")
        await asyncio.sleep(4)
        await bot.delete_message(chat_id=message.chat.id, message_id=int_digit.message_id)

@dp.callback_query_handler(lambda c: c.data.startswith('date_change'))
async def search_callback(callback_query: types.CallbackQuery, state: FSMContext):

    button_text = callback_query.data
    contest_id = button_text.split('_')[2]

    search_text = "*üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É:*"
    keyboard = types.InlineKeyboardMarkup()
    input_id = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data='decline_date_change')
    keyboard.row(input_id)

    await bot.edit_message_text(search_text, callback_query.message.chat.id, callback_query.message.message_id,
                                parse_mode="Markdown", reply_markup=keyboard)
    await ChangeContestState.date_change.set()
    await state.update_data(contest_id=contest_id)
    await state.update_data(prev_message_id=callback_query.message.message_id)

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ welcome message
@dp.callback_query_handler(text='decline_welcome', state=MenuCategories.welcome)
async def decline_search_callback(callback_query: types.CallbackQuery, state: FSMContext):
    chat_id = (await state.get_data()).get('chat_id')
    user_id = callback_query.from_user.id
    await callback_query.answer()
    await state.finish()
    keyboard = types.InlineKeyboardMarkup()
    not_back = types.InlineKeyboardButton(text='–û—Å—Ç–∞—Ç—å—Å—è ‚úèÔ∏è',
                                      callback_data=f'welcome_{chat_id}_{user_id}')
    back = types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è üìò',
                                      callback_data=f'group_{chat_id}_{user_id}_edit')
    keyboard.row(back, not_back)
    result_message = "*üí¨ –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è?*"
    await bot.edit_message_text(result_message, callback_query.message.chat.id, callback_query.message.message_id,
                                            parse_mode="Markdown",
                                            reply_markup=keyboard)

@dp.message_handler(state=MenuCategories.welcome)
async def process_search(message: types.Message, state: FSMContext):
    await bot.delete_message(message.chat.id, message.message_id)

    chat_id = (await state.get_data()).get('chat_id')
    message_id = (await state.get_data()).get('message_id')
    await state.finish()

    user_id = message.from_user.id

    new_welcome = message.text

    await groups_collection.update_one({"_id": int(chat_id)},
                                      {"$set": {"welcome": new_welcome}})
    # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
    group = await groups_collection.find_one({"_id": int(chat_id)})

    welcome = group.get("welcome")
    result_message = "*‚úÖ –ù–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:*\n" \
                     f"{welcome}"

    keyboard = types.InlineKeyboardMarkup()
    back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üìò', callback_data=f'group_{chat_id}_{user_id}')
    keyboard.row(back)

    await bot.edit_message_text(result_message, message.chat.id, message_id, parse_mode="Markdown",
                                                reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith('welcome'))
async def search_callback(callback_query: types.CallbackQuery, state: FSMContext):
    call_user_id = callback_query.from_user.id

    button_text = callback_query.data
    parts = button_text.split('_')
    chat_id = int(parts[1])
    user_id = int(parts[2])

    if call_user_id != user_id:
        await bot.answer_callback_query(callback_query.id,
                                        text="‚ùå –£–≤—ã, —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞—à–æ–π, –∞ —Ç–∞–∫ —Ö–æ—Ç–µ–ª–æ—Å—å...")
        return

    welcome_text = "<b>‚öôÔ∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n" \
                   "*—Ç–µ–∫—Å—Ç* - <b>–ñ–∏—Ä–Ω—ã–π</b>\n" \
                   "_—Ç–µ–∫—Å—Ç_ - <i>–ö—É—Ä—Å–∏–≤</i>\n" \
                   "{user_id} - –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è.\n\n" \
                   "<b>‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>" \

    keyboard = types.InlineKeyboardMarkup()
    input_id = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data='decline_welcome')
    keyboard.row(input_id)

    await bot.edit_message_text(welcome_text, callback_query.message.chat.id, callback_query.message.message_id,
                                parse_mode="HTML", reply_markup=keyboard)
    await MenuCategories.welcome.set()
    await state.update_data(chat_id=chat_id)
    await state.update_data(message_id=callback_query.message.message_id)
    await state.update_data(prev_message_id=callback_query.message.message_id)

# –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
@dp.message_handler(commands=['search'])
async def process_search_command(message: types.Message, state: FSMContext):
    args = message.get_args()
    send_user_id = message.from_user.id
    if message.reply_to_message:
        replied_user = message.reply_to_message.from_user
        user_id = replied_user.id
    elif args:
        user_id = args
    else:
        await bot.send_message(message.chat.id, "*‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.*", parse_mode="Markdown")
        return

    try:
        user_id = int(user_id)
    except ValueError:
        await bot.send_message(message.chat.id, "*‚ùå –í–≤–µ–¥–µ–Ω–Ω—ã–π –∞–π–¥–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.*", parse_mode="Markdown")
        return

    user_data = await user_collections.find_one({"_id": user_id})

    if user_data:
        wins = user_data.get("wins", 0)
        participation = user_data.get("participation", 0)

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø–æ–±–µ–¥
        win_percentage = (wins / participation) * 100 if participation > 0 else 0
        creation_date = user_data.get("creation_date", "")
        status = user_data.get("status", "")

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
        profile = f'*üçπ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* `{user_id}`:\n\n' \
                  f'*üçß –°—Ç–∞—Ç—É—Å:* `{status}`\n\n' \
                  f'*üçÄ –£—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö:* `{participation}`\n' \
                  f'*üèÖ –ü–æ–±–µ–¥—ã –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö:* `{wins}`\n' \
                  f'*üèÜ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥:* `{win_percentage:.2f}%`\n\n' \
                  f'*üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* `{creation_date}`'
        keyboard = types.InlineKeyboardMarkup()
        game_profile = types.InlineKeyboardButton(text='–ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—åüéÆ', callback_data=f'game_profile_{user_id}_none_{send_user_id}')
        keyboard.add(game_profile)

        await bot.send_chat_action(message.chat.id, action="typing")
        await asyncio.sleep(0.5)
        await bot.send_message(message.chat.id, profile, parse_mode="Markdown", reply_markup=keyboard)
        await state.finish()
    else:
        if args:
            search_id = int(message.text.split(' ')[1])  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–π–¥–∏ –∫–æ–Ω–∫—É—Ä—Å–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            contest = await contests_collection.find_one({"_id": search_id})

            if contest:
                contest_id = contest.get("_id")
                contest_name = contest.get("contest_name")
                owner_id = contest.get("owner_id")
                contest_description = contest.get("contest_description")
                members = contest.get("members")
                end_date = contest.get("end_date")
                members_message = len(members)
                winners = contest.get("winners", 0)
                contest_winners = contest.get("contest_winners")

                if contest_winners:

                    contest_winners_list = "\n".join(
                        [f"<b>{idx}.</b> @{await get_username_winners(user)} ‚Äî <code>{user}</code>" for idx, user in
                         enumerate(contest_winners, start=1)])
                    result_message = f"<b>üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—É—Ä—Å–∞ </b> <code>{contest_id}</code><b>:</b>\n\n" \
                                     f"<b>üçô –ê–≤—Ç–æ—Ä:</b> <code>{owner_id}</code>\n" \
                                     f"<b>üßä –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:</b> <code>{contest_id}</code>\n" \
                                     f"<b>ü™Å –ò–º—è:</b> <code>{contest_name}</code>\n" \
                                     f"<b>üéóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:</b> <i>{contest_description}</i>\n" \
                                     f"<b>üéñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:</b> <code>{winners}</code>\n" \
                                     f"<b>üë§ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> <code>{members_message}</code>\n" \
                                     f"<b>üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:</b> \n{contest_winners_list}\n" \
                                     f"<b>üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> <code>{end_date}</code>"
                else:
                    result_message = f"<b>üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—É—Ä—Å–∞ </b> <code>{contest_id}</code><b>:</b>\n\n" \
                                     f"<b>üçô –ê–≤—Ç–æ—Ä:</b> <code>{owner_id}</code>\n" \
                                     f"<b>üßä –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:</b> <code>{contest_id}</code>\n" \
                                     f"<b>ü™Å –ò–º—è:</b> <code>{contest_name}</code>\n" \
                                     f"<b>üéóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:</b> <i>{contest_description}</i>\n" \
                                     f"<b>üéñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:</b> <code>{winners}</code>\n" \
                                     f"<b>üë§ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> <code>{members_message}</code>\n" \
                                     f"<b>üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> <code>{end_date}</code>"
                user_id = message.from_user.id
                await bot.send_chat_action(user_id, action="typing")
                await asyncio.sleep(0.5)
                await bot.send_message(message.chat.id, result_message, parse_mode="HTML")
            else:
                await bot.send_message(message.chat.id,
                                       "*‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –∞–π–¥–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã* /search `{–∞–π–¥–∏}`",
                                       parse_mode="Markdown")
        else:
            await bot.send_message(message.chat.id,
                                    "*‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –∞–π–¥–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã* /search `{–∞–π–¥–∏}`",
                                    parse_mode="Markdown")

# –ü—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
@dp.message_handler(commands=['profile'])
async def start_contest_command(message: types.Message):
        global profile_messages

        user_id = message.from_user.id

        # –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_data = await user_collections.find_one({"_id": user_id})
        if user_data:
            username = message.from_user.username
            wins = user_data.get("wins", 0)
            participation = user_data.get("participation", 0)

            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø–æ–±–µ–¥
            win_percentage = (wins / participation) * 100 if participation > 0 else 0
            creation_date = user_data.get("creation_date", "")
            status = user_data.get("status", "")

            # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
            profile = f'*üçπ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* `{username}`:\n\n' \
                      f'*üçß –°—Ç–∞—Ç—É—Å:* `{status}`\n\n' \
                      f'*üçÄ –£—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö:* `{participation}`\n' \
                      f'*üèÖ –ü–æ–±–µ–¥—ã –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö:* `{wins}`\n' \
                      f'*üèÜ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥:* `{win_percentage:.2f}%`\n\n' \
                      f'*üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* `{creation_date}`'
            keyboard = types.InlineKeyboardMarkup()
            history = types.InlineKeyboardButton(text='–ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å üéÆ', callback_data=f'game_profile_{user_id}_none')
            keyboard.add(history)

            reply = await message.reply(profile, parse_mode="Markdown", reply_markup=keyboard)
        else:
            reply = await message.reply("*‚ò†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.*\n\n*üë§ –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É* /start *–≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É, —ç—Ç–æ —Å–æ–∑–¥–∞—Å—Ç –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å!*", parse_mode="Markdown")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        profile_messages.append(reply.message_id)

# # –ü–µ—Ä–º–∞–Ω–Ω–µ–Ω—Ç–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∞–∫–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
@dp.message_handler(commands=['permanent'])
async def process_search_command(message: types.Message, state: FSMContext):
    args = message.get_args()

    if message.chat.type != 'private':
        await bot.send_message(message.chat.id, "*‚ùå –ö–æ–º–∞–Ω–¥–∞ /permanent –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.*", parse_mode="Markdown")
        return

    global permanent_message_id

    profile_user_id = message.from_user.id
    user_data = await user_collections.find_one({"_id": profile_user_id})  # Use profile_user_id instead of permanent_message_id
    ban_members = user_data.get("ban_members")

    if not args and not message.reply_to_message:
        if ban_members:
            # Your logic to display user history based on the current_page
            per_page = 20
            current_page = 1
            start_index = (current_page - 1) * per_page
            end_index = current_page * per_page
            page_history = ban_members[start_index:end_index] if start_index < len(ban_members) else []
            all_pages = len(ban_members) // per_page

            if len(ban_members) % per_page != 0:  # Check if there are any remaining items for an extra page
                all_pages += 1

            # Create the message containing the user history for the current page
            result_message = f"<b>‚ôæÔ∏è –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ ‚Äî –°—Ç—Ä–∞–Ω–∏—Ü–∞</b> <code>{current_page}</code> <b>–∏–∑</b> <code>{all_pages}</code>:\n\n"
            for idx, banned_member in enumerate(page_history, start=start_index + 1):
                username = await get_ban_username(banned_member)
                if username:
                    username = username.replace("_", "&#95;")
                result_message += f"{idx}. @{username} (<code>{banned_member}</code>)\n"
            result_message += "\n<b>üìõ –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> /permanent <code>{id}</code>"
            # Create the inline keyboard with pagination buttons
            keyboard = types.InlineKeyboardMarkup()
            prev_button = types.InlineKeyboardButton(text='‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è',
                                                     callback_data=f'permanent_{profile_user_id}_prev_{current_page}')
            next_button = types.InlineKeyboardButton(text='–°–ª–µ–¥—É—â–∞—è ‚ñ∂Ô∏è',
                                                     callback_data=f'permanent_{profile_user_id}_next_{current_page}')

            if current_page > 1 and end_index < all_pages:
                keyboard.row(prev_button, next_button)
            elif current_page > 1:
                keyboard.row(prev_button)
            elif current_page < all_pages:
                keyboard.row(next_button)

        await bot.send_message(message.chat.id, result_message, parse_mode="HTML", reply_markup=keyboard)
        return

    if args:
        user_id = args
    elif message.reply_to_message:
        replied_user = message.reply_to_message.from_user
        user_id = replied_user.id
    else:
        user_id = profile_user_id

    if isinstance(user_id, int):
        user_id = str(user_id)

    try:
        user_id = int(user_id)
    except ValueError:
        await bot.send_message(message.chat.id, "*‚ùå –í–≤–µ–¥–µ–Ω–Ω—ã–π –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.*", parse_mode="Markdown")
        return

    if args and user_id == profile_user_id:  # Remove the redundant check for user_data
        await bot.send_message(message.chat.id, "*‚ùå –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.*", parse_mode="Markdown")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await get_ban_username(user_id)
    except Exception:
        await bot.send_message(message.chat.id, "*‚ùå –¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.*", parse_mode="Markdown")
        return

    if not args:
        if ban_members:
            result_message = "<b>‚ôæÔ∏è –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:</b>\n\n"
            for idx, banned_user_id in enumerate(ban_members, start=1):
                username = await get_ban_username(banned_user_id)
                if username:
                    username = username.replace("_", "&#95;")
                result_message += f"{idx}. @{username} (<code>{banned_user_id}</code>)\n"
        else:
            result_message = "<b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç. üö´</b>\n"

        result_message += "\n<b>üìõ –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n" \
                          "/permanent <code>{id}</code>"

        await bot.send_message(message.chat.id, result_message, parse_mode="HTML")
        return

    if user_id in ban_members:
        await del_profile_ban_members(profile_user_id, user_id)

        username = await get_username(user_id)
        if username:
            username = username.replace("_", "&#95;")

        profile = f'<b>üçÅ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b> @{username} (<code>{user_id}</code>) <b>–±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è!</b>\n\n' \
                  f'<b>‚ôæÔ∏è –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞–ø–∏—à–∏—Ç–µ /permanent</b>'
        await bot.send_message(message.chat.id, profile, parse_mode="HTML")
        await state.finish()
    else:
        await update_profile_ban_members(profile_user_id, user_id)

        username = await get_username(user_id)
        if username:
            username = username.replace("_", "&#95;")

        profile = f'<b>üçÅ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b> @{username} (<code>{user_id}</code>) <b>–±—ã–ª –≤–Ω–µ—Å–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è!</b>\n\n' \
                  f'<b>‚ôæÔ∏è –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞–ø–∏—à–∏—Ç–µ /permanent</b>'
        await bot.send_message(message.chat.id, profile, parse_mode="HTML")

# –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥
@dp.message_handler(commands=['promo'])
async def process_promo_command(message: types.Message):
    args = message.get_args()

    parts = args.split(' ')
    if args:
        user_data = await user_collections.find_one({"_id": message.from_user.id})
        if user_data:
            status = user_data.get("status")
            if status == "–°–æ–∑–¥–∞—Ç–µ–ª—å üé≠" or status == "–ê–¥–º–∏–Ω üöó":
                if len(parts) == 1:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /promo (—Å–∞–º –ø—Ä–æ–º–æ–∫–æ–¥)
                    promo_code = args
                    await handle_promo_code(promo_code, message.from_user.id, chat_id=message.chat.id)
                elif len(parts) == 2:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /promo (–Ω–∞–∑–≤–∞–Ω–∏–µ) (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
                    promo_name = parts[0]
                    quantity = int(parts[1])
                    visible = "True"
                    prize = "None"
                    await create_promo_codes(promo_name, quantity, visible, prize, message.from_user.id)
                elif len(parts) == 3:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /promo (–Ω–∞–∑–≤–∞–Ω–∏–µ) (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ) (–≤–∏–¥–∏–º–æ—Å—Ç—å)
                    promo_name = parts[0]
                    quantity = int(parts[1])
                    visible = parts[2]
                    if visible == "False":
                        visible = "False"
                    else:
                        visible = "True"
                    prize = "None"
                    await create_promo_codes(promo_name, quantity, visible, prize, message.from_user.id)

                if status == "–°–æ–∑–¥–∞—Ç–µ–ª—å üé≠":
                    if len(parts) == 4:
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /promo (–Ω–∞–∑–≤–∞–Ω–∏–µ) (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ) (–≤–∏–¥–∏–º–æ—Å—Ç—å) (–Ω–∞–≥—Ä–∞–¥–∞)
                        promo_name = parts[0]
                        quantity = int(parts[1])
                        visible = parts[2]
                        if visible == "False":
                            visible = "False"
                        else:
                            visible = "True"
                        prize = parts[3]
                        await create_promo_codes(promo_name, quantity, visible, prize, message.from_user.id)
                else:
                    pass
            else:
                if len(parts) == 1:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /promo (—Å–∞–º –ø—Ä–æ–º–æ–∫–æ–¥)
                    promo_code = args
                    await handle_promo_code(promo_code, message.from_user.id, chat_id=message.chat.id)
        else:
            unreg = f"*‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!*\n*üî∞ –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.*"
            await bot.send_message(message.chat.id, unreg, parse_mode="Markdown")
    else:
        active_promos = await get_active_promo_codes()
        if active_promos:
            promos = f"*üìΩÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:*\n{active_promos}\n\n" \
                     "*üß™ –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞* /promo `{–ø—Ä–æ–º–æ–∫–æ–¥}`"
        else:
            promos = "*ü§´ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!*\n\n" \
                     "*üß™ –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞* /promo `{–ø—Ä–æ–º–æ–∫–æ–¥}`"
        await bot.send_message(message.chat.id, promos, parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥
@dp.message_handler(commands=['promo_list'])
async def process_promo_list_command(message: types.Message):
    promo_id = message.get_args()
    user_data = await user_collections.find_one({"_id": message.from_user.id})
    status = user_data.get("status")
    current_page = 1
    if status == "–°–æ–∑–¥–∞—Ç–µ–ª—å üé≠" or status == "–ê–¥–º–∏–Ω üöó":
        if promo_id:
            promo = await promo_collection.find_one({"_id": promo_id})
            if promo:
                active_members = promo.get("active_members", [])
                uses = promo.get("uses")
                if active_members:
                    await promo_members(message.chat.id, promo_id, current_page)
                else:
                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –∫–æ–ª–ª–±—ç–∫-–¥–∞–Ω–Ω—ã–º–∏, –≤–∫–ª—é—á–∞—é—â–∏–º–∏ –∞–π–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                    keyboard = types.InlineKeyboardMarkup()
                    promo_list_update = types.InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å üåÄ',
                                                                   callback_data=f'list_update_{promo_id}_{current_page}')
                    keyboard.row(promo_list_update)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∞–π–¥–∏
                    await message.reply(
                        f"*üìã –ü—Ä–æ–º–æ–∫–æ–¥* `{promo_id}` *–Ω–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∏ –æ–¥–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.*",
                        parse_mode="Markdown", reply_markup=keyboard)

            else:
                await message.reply("*‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.*", parse_mode="Markdown")
        else:
            await message.reply("*‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–∞.*", parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥ —Ñ–∞–π–ª–∞ –≤ –∫–∞–Ω–∞–ª
@dp.message_handler(commands=['log'])
async def send_log_to_channel_command(message: types.Message):
    chat_id = -1001855834243  # Replace with your desired channel ID
    log_file_path = 'private/bot.log'

    with open(log_file_path, 'rb') as log_file:
        try:
            await bot.send_message(chat_id, "*üöß Log file:*", parse_mode="Markdown")
            await bot.send_document(chat_id, log_file)
        except TelegramAPIError as e:
            logging.error(f"Error while sending log to channel: {str(e)}")

@dp.message_handler(commands=['check'])
async def check_command_handler(message: types.Message):
    chat_id = 1738263685
    await create_and_send_archive(chat_id)

@dp.message_handler(commands=['id'])
async def get_user_profile(message: types.Message):
    # Get the user ID from the command arguments
    args = message.get_args()
    if not args:
        await message.reply("üî∞ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –∞–π–¥–∏. –ü—Ä–∏–º–µ—Ä: /id <–∞–π–¥–∏>")
        return

    try:
        user_id = int(args)
    except ValueError:
        await message.reply("üë©‚Äçü¶Ω –ò–Ω–≤–∞–ª–∏–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–π–¥–∏.")
        return

    try:
        # Get the user information using the provided user ID
        user = await bot.get_chat(user_id)
        username = user.username
        first_name = user.first_name
        last_name = user.last_name

        # Create the message showing the user profile
        if username:
            result_message = f"<b>–ü—Ä–æ—Ñ–∏–ª—å üìí</b>\n\n" \
                             f"<b>üë• –¢—ç–≥:</b> @{username}\n"
        else:
            result_message = "<b>–Æ–∑–µ—Ä–Ω–µ–π–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚ùå</b>\n\n"

        # Add first name and last name if available
        if first_name:
            result_message += f"<b>üç≠ –ò–º—è:</b> <code>{first_name}</code>"
        if last_name:
            result_message += f"<code>{last_name}</code>"

        await message.reply(result_message, parse_mode="HTML")
    except Exception as e:
        print(e)
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–π–¥–∏.")

@dp.message_handler(commands=['wins'])
async def wins_leaderboard(message: types.Message, state: FSMContext):
    # Retrieve the user's status from the user_collections
    profile_user_id = message.from_user.id
    user_data = await user_collections.find_one({"_id": profile_user_id})
    user_wins = user_data.get("wins")

    # Retrieve all users sorted by wins in descending order
    all_users = await user_collections.find().sort("wins", -1).to_list(length=None)

    # Filter out users with more wins than participations
    top_users = [user for user in all_users if user.get("wins", 0) <= user.get("participation", 0)]

    # Find the position of the calling user in the top_users list
    calling_user_position = None
    for idx, user in enumerate(top_users):
        if user["_id"] == profile_user_id:
            calling_user_position = idx + 1
            break

    # Prepare the leaderboard message
    leaderboard_message = "<b>üèÖ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –ø–æ–±–µ–¥–∞–º (–¢–æ–ø 15):</b>\n\n"
    for idx, user in enumerate(top_users[:15]):
        username = await get_username(user['_id'])
        if username:
            username = username.replace("_", "&#95;")
        word_wins = get_wins_word(user['wins'])  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–±–µ–¥
        leaderboard_message += f"<b>{idx + 1}. {username} [</b><code>{user['status']}</code><b>] ‚Äî</b> <code>{user['wins']}</code> <b>{word_wins}</b>\n"
    if profile_user_id == 1738263685:
        # Add the calling user's position
        leaderboard_message += f"\n<b>üë§ –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è:</b>\n" \
                               f"<b>0.</b> <code>{profile_user_id}</code> <b>‚Äî</b> <code>{user_wins}</code> <b>{get_wins_word(user_wins)}</b>"
    else:
        # Add the calling user's position
        leaderboard_message += f"\n<b>üë§ –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è:</b>\n" \
                               f"<b>{calling_user_position}.</b> <code>{profile_user_id}</code> <b>‚Äî</b> <code>{user_wins}</code> <b>{get_wins_word(user_wins)}</b>"
    keyboard = types.InlineKeyboardMarkup()
    done = types.InlineKeyboardButton(text='–ò–≥—Ä–æ–≤–æ–π —Ç–æ–ø –ø–æ–±–µ–¥ üé∞', callback_data=f'game_wins_{profile_user_id}')
    keyboard.add(done)

    # Send the leaderboard message
    await message.answer(leaderboard_message, parse_mode="HTML", reply_markup=keyboard)

@dp.message_handler(commands=['participations'])
async def wins_leaderboard(message: types.Message, state: FSMContext):
    # Retrieve the user's status from the user_collections
    profile_user_id = message.from_user.id
    user_data = await user_collections.find_one({"_id": profile_user_id})
    user_participation = user_data.get("participation")

    # Retrieve all users sorted by participations in descending order
    top_users = await user_collections.find().sort("participation", -1).to_list(length=None)

    # Find the position of the calling user in the top_users list
    calling_user_position = None
    for idx, user in enumerate(top_users):
        if user["_id"] == profile_user_id:
            calling_user_position = idx + 1
            break

    # Prepare the leaderboard message
    leaderboard_message = "<b>üçÄ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ —É—á–∞—Å—Ç–∏—è–º (–¢–æ–ø 15):</b>\n\n"
    for idx, user in enumerate(top_users[:15]):
        username = await get_username(user['_id'])
        if username:
            username = username.replace("_", "&#95;")
        word_participation = get_participation_word(user['participation'])  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —É—á–∞—Å—Ç–∏–π
        leaderboard_message += f"<b>{idx + 1}. {username} [</b><code>{user['status']}</code><b>] ‚Äî</b> <code>{user['participation']}</code> <b>{word_participation}</b>\n"

    # Add the calling user's position
    leaderboard_message += f"\n<b>üë§ –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è:</b>\n" \
                           f"<b>{calling_user_position}.</b> <code>{profile_user_id}</code> <b>‚Äî</b> <code>{user_participation}</code> <b>{get_participation_word(user_participation)}</b>"
    keyboard = types.InlineKeyboardMarkup()
    done = types.InlineKeyboardButton(text='–ò–≥—Ä–æ–≤–æ–π —Ç–æ–ø —É—á–∞—Å—Ç–∏–π üÄÑ', callback_data=f'game_participations_{profile_user_id}')
    keyboard.add(done)

    # Send the leaderboard message
    await message.answer(leaderboard_message, parse_mode="HTML", reply_markup=keyboard)

@dp.message_handler(commands=['buy_key'])
async def buy_key(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–π —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –≤—ã–±–æ—Ä–∞
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("1 –∞–∫—Ç–∏–≤–∞—Ü–∏—è", callback_data="buy_1"),
        types.InlineKeyboardButton("3 –∞–∫—Ç–∏–≤–∞—Ü–∏–∏", callback_data="buy_3"),
        types.InlineKeyboardButton("5 –∞–∫—Ç–∏–≤–∞—Ü–∏–π", callback_data="buy_5"),
        types.InlineKeyboardButton("10 –∞–∫—Ç–∏–≤–∞—Ü–∏–π", callback_data="buy_10"),
    )

    await message.answer("*–ù–∞ —Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –∫–ª—é—á?*", reply_markup=keyboard, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π
@dp.callback_query_handler(lambda call: call.data.startswith("buy"))
async def process_activation_choice(call: types.CallbackQuery):
    activation_choice = call.data.split("_")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –∏–∑ callback_data
    uses = int(activation_choice)
    await bot.answer_callback_query(call.id)

    # Delete the original message with the inline keyboard
    await bot.delete_message(call.message.chat.id, call.message.message_id)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –µ–≥–æ —Ü–µ–Ω—ã –∏ –æ–ø–∏—Å–∞–Ω–∏—è
    key = generate_key()
    price = uses * 1
    if uses == 1:
        description = f"üîë –û–ø–ª–∞—Ç–∞ –∫–ª—é—á–∞ –Ω–∞ {uses} –∞–∫—Ç–∏–≤–∞—Ü–∏—é."
    elif uses == 3:
        description = f"üîë –û–ø–ª–∞—Ç–∞ –∫–ª—é—á–∞ –Ω–∞ {uses} –∞–∫—Ç–∏–≤–∞—Ü–∏–∏."
    else:
        description = f"üîë –û–ø–ª–∞—Ç–∞ –∫–ª—é—á–∞ –Ω–∞ {uses} –∞–∫—Ç–∏–≤–∞—Ü–∏–π."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É
    await bot.send_invoice(
        chat_id=call.message.chat.id,
        title="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ üî∞",
        description=description,
        payload=key,  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª—é—á –≤ payload, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —É–∑–Ω–∞—Ç—å, –∫–∞–∫–æ–π –∫–ª—é—á –æ–ø–ª–∞—Ç–∏–ª–∏
        provider_token=PAYMENTS_TOKEN,
        currency='USD',  # –í–∞–ª—é—Ç–∞ (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –¥–æ–ª–ª–∞—Ä—ã –°–®–ê)
        prices=[
            types.LabeledPrice(label='–ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞', amount=price * 100)  # –¶–µ–Ω–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Ü–µ–Ω—Ç–∞—Ö
        ],
        start_parameter='buy_key',  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –æ–ø–ª–∞—Ç—ã
        need_name=True,
        need_phone_number=False,
        need_email=True,
        need_shipping_address=False,  # –ó–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ–≥–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–∞
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
@dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT)
async def process_successful_payment(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏ –ø—Ä–æ—á–∏–µ –¥–∞–Ω–Ω—ã–µ
    key = message.successful_payment.invoice_payload
    uses = 1
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –≤–≤–µ–¥–µ–Ω
    if message.successful_payment.order_info and 'email' in message.successful_payment.order_info:
        email = message.successful_payment.order_info['email']
    else:
        email = "Email –Ω–µ –±—ã–ª —É–∫–∞–∑–∞–Ω."

    await add_key_to_data(key, uses, email, user_id)
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∫–∏–µ-–ª–∏–±–æ –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–ª—é—á–æ–º –∏ email
    await message.answer(f"*‚úÖ –ü–æ–∫—É–ø–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–∞! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –∫–ª—é—á* `{key}`.\n"
                         f"*üîë –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:* `{uses}`", parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
@dp.pre_checkout_query_handler(lambda query: True)
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@dp.callback_query_handler(lambda query: query.data.startswith('room_create'))
async def choose_game_type_or_rounds(callback_query: types.CallbackQuery):
    format_choice = callback_query.data.split('_')[2]
    game_types = {
        'üé≤': '–ö—É–±–∏–∫',
        'üéØ': '–î–∞—Ä—Ç—Å',
        'üèÄ': '–ë–∞—Å–∫–µ—Ç–±–æ–ª',
        '‚öΩ': '–§—É—Ç–±–æ–ª',
        'üé≥': '–ë–æ—É–ª–∏–Ω–≥',
        'üé∞': '–ö–∞–∑–∏–Ω–æ',
    }
    if format_choice == '1vs1':
        # Ask the user to select the game type for 1vs1 format
        type_message = "*üéÆ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–≥—Ä—ã:*"
        keyboard = types.InlineKeyboardMarkup()
        for emoji, game_type in game_types.items():
            callback_data = f'roomcreate_{format_choice}_{emoji}'
            keyboard.add(types.InlineKeyboardButton(text=f'{emoji} {game_type}', callback_data=callback_data))

        await bot.edit_message_text(type_message, callback_query.message.chat.id,
                                    callback_query.message.message_id, parse_mode="Markdown",
                                    reply_markup=keyboard)

    elif format_choice == '2vs2':
        # Ask the user to select the game type for 2vs2 format
        type_message = "*üéÆ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–≥—Ä—ã:*"
        keyboard = types.InlineKeyboardMarkup()
        for emoji, game_type in game_types.items():
            callback_data = f'roomcreate_{format_choice}_{emoji}'
            keyboard.add(types.InlineKeyboardButton(text=f'{emoji} {game_type}', callback_data=callback_data))

        await bot.edit_message_text(type_message, callback_query.message.chat.id,
                                    callback_query.message.message_id, parse_mode="Markdown",
                                    reply_markup=keyboard)

@dp.callback_query_handler(lambda query: query.data.startswith('roomcreate_1vs1') or query.data.startswith('roomcreate_2vs2'))
async def choose_game_type(callback_query: types.CallbackQuery):
    format_and_type_choice = callback_query.data.split('_')[1:]

    if len(format_and_type_choice) >= 2:
        format_choice, type_choice = format_and_type_choice[0], format_and_type_choice[1]

        # Ask the user to select the number of rounds
        rounds_message = "*üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤ (1, 2, 3, 4, 5):*"
        keyboard = types.InlineKeyboardMarkup()
        for rounds in range(1, 6):
            emoji = format_choice  # Get the emoji from the format_choice variable
            callback_data = f'createroom_{emoji}_{type_choice}_{rounds}'
            keyboard.add(types.InlineKeyboardButton(text=str(rounds), callback_data=callback_data))

        await bot.edit_message_text(rounds_message, callback_query.message.chat.id,
                                    callback_query.message.message_id, parse_mode="Markdown",
                                    reply_markup=keyboard)
    else:
        # Handle the case when there are not enough elements in the list
        error_message = "‚ùå Error: Invalid data format in callback query."
        await bot.send_message(user_id, error_message)

@dp.callback_query_handler(lambda query: query.data.startswith('createroom_'))
async def create_game_room(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    choices = callback_query.data.split('_')[1:]

    if len(choices) >= 3:
        format_choice, type_choice, rounds = choices[0], choices[1], int(choices[2])

        room_id = generate_room_id()
        room_link = await generate_room_link(room_id)

        current_time = datetime.now(timezone)
        create_date = current_time.strftime("%Y-%m-%d %H:%M:%S")

        # Retrieve contests where the user with the specified user_id was a member
        user_games = await game_collection.find({"owner_id": user_id}).to_list(length=None)
        # Check if there are any active contests for the user
        active_games = [game for game in user_games if "ended" in game and game["ended"] == "False"]

        if len(active_games) >= 1:
            result_message = "*‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞!.*"
            keyboard = types.InlineKeyboardMarkup()
            back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ ü•è', callback_data='create_back')
            keyboard.row(back)

            # Send or edit the message with pagination
            await bot.edit_message_text(result_message, callback_query.message.chat.id,
                                                callback_query.message.message_id, parse_mode="Markdown",
                                                reply_markup=keyboard)
        elif len(active_games) < 1:
            # Save the selected format, type, rounds, and other details in the database
            await create_gameroom(room_id, user_id, type_choice, format_choice, rounds, create_date, room_link)

            # Create the confirmation message with the formatted room_link
            confirmation_message = f"*‚òëÔ∏è –ö–æ–º–Ω–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*\n\n" \
                                   f"*üîò ID –ö–æ–º–Ω–∞—Ç—ã:* `{room_id}`\n" \
                                   f"*üõí –ò–≥—Ä–∞:* `{type_choice}`\n" \
                                   f"*üë• –§–æ—Ä–º–∞—Ç:* `{format_choice}`\n" \
                                   f"*üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤:* `{rounds}`\n" \
                                   f"*üóìÔ∏è –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:* `{create_date}`\n\n" \
                                   f"*üîó –õ–æ–≥–∏–Ω –≤ –∫–æ–º–Ω–∞—Ç—É:* `/play {room_id}`"

        # Send the formatted confirmation message with the clickable link
        await bot.edit_message_text(confirmation_message, callback_query.message.chat.id,
                                    callback_query.message.message_id, parse_mode="Markdown")
    else:
        # Handle the case when there are not enough elements in the list
        error_message = "‚ùå Error: Invalid data format in callback query."
        await bot.send_message(user_id, error_message)

@dp.message_handler(commands=['help'])
async def start_contest_command(message: types.Message):
    user_id = message.from_user.id

    await bot.send_chat_action(user_id, action="typing")
    await asyncio.sleep(0.7)
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    profile = f'*–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –±–æ—Ç—É üí§*\n\n' \
              f'/start - üé≠ –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é, –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É `–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üÜò`.\n' \
              f'/search - üîé –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è –µ–≥–æ –∞–π–¥–∏.\n' \
              f'/profile - üë§ –ß–∞—Ç-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.\n' \
              f'/wins ‚Äî ü•á –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø–æ–±–µ–¥–∞–º.\n' \
              f'/participations ‚Äî üçÄ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏—Ö —É—á–∞—Å—Ç–∏—è–º.\n' \
              f'/create ‚Äî üéÆ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É.' \
              f'/promo - üß™ –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤, —Ç–∞–∫–∂–µ –∏—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏—è!\n' \
              f'/contest - üéñ –ú–µ–Ω—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—à–∏—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –∏–º–∏, –¥–æ—Å—Ç—É–ø –∫ –º–µ–Ω—é –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ `–∫–ª—é—á üîë`.\n' \
              f'/generate - üóùÔ∏è –ü–æ–∫—É–ø–∫–∞ (–≤ –±—É–¥—É—â–µ–º) –∫–ª—é—á–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–æ–≤!\n' \
              f'/permanent - üö´ –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n'

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏ "–î–µ—Ç–∞–ª—å–Ω–µ–µ"
    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.add(types.InlineKeyboardButton(text="–î–µ—Ç–∞–ª—å–Ω–µ–µ ‚ùî", url="https://teletype.in/@kpyr/Flame"))

    await message.reply(profile, parse_mode="Markdown", reply_markup=inline_keyboard)

@dp.message_handler(commands=['event'])
async def send_event_to_all_users(message: types.Message):
    args = message.get_args()

    # Retrieve the user's status from the user_collections
    profile_user_id = message.from_user.id
    user_data = await user_collections.find_one({"_id": profile_user_id})
    status = user_data.get("status")

    if status == "–°–æ–∑–¥–∞—Ç–µ–ª—å üé≠":

        if not args:
            await message.reply("*‚ùî –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å!*", parse_mode="Markdown")
            return

        # Retrieve all user_ids from the user_collections
        user_ids = [user['_id'] for user in await user_collections .find({}, {'_id': 1}).to_list(length=None)]

        # Send the event message to all users
        for user_id in user_ids:
            try:
                await bot.send_message(user_id, args, parse_mode="Markdown")
            except Exception as e:
                await message.reply(f"*üõë –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é* `{user_id}`: {e}", parse_mode="Markdown")

        await message.reply(f"*üí† –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ* `{len(user_ids)}`*.*", parse_mode="Markdown")
    else:
        await message.reply("*‚ö†Ô∏è –ù–µ–ª—å–∑—è –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π, —Ç–∞–∫ –∫–∞–∫ —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ.*", parse_mode="Markdown")

# –ö–Ω–æ–ø–∫–∏
@dp.callback_query_handler(lambda callback_query: True)
async def button_click(callback_query: types.CallbackQuery, state: FSMContext):
    global contest_name, contest_id, contest_description, winners, end_date
    global profile_messages
    global change_message_id
    global promo_message_id

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
    button_text = callback_query.data
    user_id = callback_query.from_user.id

    emojis = ["üéâ", "üéà", "üéÅ", "üèÜ", "üéñÔ∏è", "üèÖ", "üçô", "üé´", "üéóÔ∏è", "üçø", "üéÄ", "üéüÔ∏è", "üß£", "üéí", "üì£", "üì¢", "üåü", "‚ú®", "üî•", "üéµ",
              "üé∂", "üíÉ", "üï∫", "üéØ", "üìö", "üí°", "üñåÔ∏è", "üì∏", "üé•", "üñºÔ∏è", "üé®", "üíé", "üåπ", "üåº", "üå∫", "üå∑", "üå∏", "üåï", "üåô", "‚≠ê", "üåà", "‚òÄÔ∏è"]

    keyboard = None  # –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π keyboard

    if button_text == 'active_drawings':
        active_drawings = ["*ü´ß –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:*\n"]

        all_contests = contests_collection.find()

        active_contests_found = False  # –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ —Ç–æ, –±—ã–ª–∏ –ª–∏ –Ω–∞–π–¥–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã

        async for contest in all_contests:
            contest_id = contest["_id"]
            members_count = len(contest.get("members", []))
            ended = contest.get("ended")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ "ended", –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False

            if ended == "False":
                message_text = f"*üç≠ –ö–æ–Ω–∫—É—Ä—Å:* `{contest_id}`\n*üèØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* `{members_count}`\n"
                active_drawings.append(message_text)
                active_contests_found = True

        if active_contests_found:
            active_drawings_text = "\n".join(active_drawings)

            # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = types.InlineKeyboardMarkup()
            # statistic = types.InlineKeyboardButton(text='ü™° –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', callback_data='statistic')
            # history = types.InlineKeyboardButton(text='üìú –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é', callback_data='drawings_history')
            done = types.InlineKeyboardButton(text='–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ', callback_data='done')
            # keyboard.add(history, statistic)
            keyboard.add(done)

            await bot.send_message(callback_query.message.chat.id, text=active_drawings_text, parse_mode="Markdown",
                                   reply_markup=keyboard)
        else:
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = types.InlineKeyboardMarkup()
            # statistic = types.InlineKeyboardButton(text='ü™° –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', callback_data='statistic')
            # history = types.InlineKeyboardButton(text='üìú –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é', callback_data='drawings_history')
            done = types.InlineKeyboardButton(text='–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ', callback_data='done')
            # keyboard.add(history, statistic)
            keyboard.add(done)

            await bot.send_message(callback_query.message.chat.id, "*ü´ß –£–ø—Å... –°–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!*",
                                   parse_mode="Markdown", reply_markup=keyboard)

    elif button_text == 'profile':
        global profile_messages

        user_id = callback_query.from_user.id

        # –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_data = await user_collections.find_one({"_id": user_id})

        if user_data:
            username = callback_query.from_user.username

            await send_profile(username, user_id, callback_query.message.chat.id)
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            await bot.send_message(callback_query.message.chat.id, "‚ò†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    elif button_text == 'profile_edit':

        user_id = callback_query.from_user.id

        # –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_data = await user_collections.find_one({"_id": user_id})

        if user_data:
            username = callback_query.from_user.username

            await show_profile(username, user_id, callback_query.message.chat.id, callback_query.message.message_id)
        else:
            profile = "‚ò†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω."

            # Send or edit the message with pagination
            await bot.edit_message_text(profile, callback_query.message.chat.id,
                                                callback_query.message.message_id, parse_mode="Markdown",
                                                reply_markup=keyboard)

    elif button_text == 'support':

        creator_username = "[@Kpyr](https://t.me/Kpyr_uy)"
        support = f"üÜî –í–∞—à id: `{user_id}`\n\n/help - –ü–æ–º–æ—â—å –≤ –±–æ—Ç–µ. üíæ\n\n*üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:*\n\n*üé≠ –°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞:* {creator_username}"

        await callback_query.message.answer(text=support, parse_mode="Markdown")

    elif button_text == 'create':

        # Update the message with new buttons
        keyboard = types.InlineKeyboardMarkup()
        continue_create = types.InlineKeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚úÖ', callback_data='continue_create')
        decline_create = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data='decline_create')
        keyboard.add(decline_create, continue_create)
        create_text = f"*üí† –ï—Å–ª–∏ –≤—ã —Å–æ–∑–¥–∞–¥–∏—Ç–µ –∫–æ–Ω–∫—É—Ä—Å –≤–∞—à —Ä–∞–Ω–µ–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –ø–æ—Ç—Ä–∞—Ç–∏—Ç—Å—è –∏ –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã –¥–æ –º–æ–º–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞, –≤—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?*"

        # Get the message ID from the contest_messages list
        message_id = contest_messages[-1]

        # Update the message with new text and buttons
        await bot.edit_message_text(create_text, callback_query.message.chat.id, message_id, parse_mode="Markdown",
                                    reply_markup=keyboard)

    elif button_text == 'decline_create':

        # Clear the waiting state
        await state.finish()

        user_id = callback_query.from_user.id
        user_data = await user_collections.find_one({"_id": user_id})

        if user_data and (
                ("status" in user_data and user_data["status"] in ["–¢–µ—Å—Ç–µ—Ä üî∞", "–ê–¥–º–∏–Ω üöó", "–°–æ–∑–¥–∞—Ç–µ–ª—å üé≠"]) or int(
                user_data.get("keys", 0)) > 0):
            # Code for existing user
            keyboard = types.InlineKeyboardMarkup()
            search = types.InlineKeyboardButton(text='üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data='search')
            create = types.InlineKeyboardButton(text='üé´ –°–æ–∑–¥–∞—Ç—å', callback_data='create')
            change = types.InlineKeyboardButton(text='üç≠ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data='change')
            keyboard.row(change, search)
            keyboard.row(create)

            # Get the message ID from the contest_messages list
            message_id = contest_messages[-1]
            text = "*üç° –†–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞–º–∏!*\n\n*‚ú® –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–æ–º –∏–ª–∏ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è:*"

            reply = await bot.edit_message_text(text, callback_query.message.chat.id, message_id, parse_mode="Markdown",
                                                reply_markup=keyboard)

            # Update the message ID in the contest_messages list
            contest_messages[-1] = reply.message_id
        else:
            # Code for existing user
            keyboard = types.InlineKeyboardMarkup()
            input_key = types.InlineKeyboardButton(text='üîë –í–≤–µ—Å—Ç–∏ –∫–ª—é—á', callback_data='input_key')
            keyboard.row(input_key)

            # Get the message ID from the contest_messages list
            message_id = contest_messages[-1]
            text = "*üëÄ –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –∏ –≤–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ–Ω–∫—É—Ä—Å–æ–≤:*"

            reply = await bot.edit_message_text(text, callback_query.message.chat.id, message_id, parse_mode="Markdown",
                                                reply_markup=keyboard)

            # Update the message ID in the contest_messages list
            contest_messages[-1] = reply.message_id

    elif button_text == 'continue_create':

        # Update the message with new text
        create_text = "*ü™Å –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–Ω–∫—É—Ä—Å–∞:*"

        keyboard = types.InlineKeyboardMarkup()
        input_key = types.InlineKeyboardButton(text=' –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üö©', callback_data='skip_name')
        keyboard.row(input_key)

        # Get the message ID from the contest_messages list
        message_id = contest_messages[-1]

        await bot.edit_message_text(create_text, callback_query.message.chat.id, message_id, parse_mode="Markdown", reply_markup=keyboard)

        # Set the waiting state to capture the user's input
        await CreateContestState.name.set()

    elif button_text == 'confirm_create':

        user_id = callback_query.from_user.id
        user_data = await user_collections.find_one({"_id": user_id})

        if user_data and ("status" in user_data and user_data["status"] in ["–¢–µ—Å—Ç–µ—Ä üî∞", "–ê–¥–º–∏–Ω üöó", "–°–æ–∑–¥–∞—Ç–µ–ª—å üé≠"]):
            pass
        else:
            await user_collections.update_one({"_id": user_id}, {"$inc": {"keys": -1}})

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –∑–∞–ø—É—Å–∫–∞
        start_link = await generate_start_link(contest_id)

        confirmation_text = f"*üç≠ –ö–æ–Ω–∫—É—Ä—Å* `{contest_id}` *–±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*\n*üó∫Ô∏è –¢–∞–∫–∂–µ, –¥–µ—Ä–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* `{start_link}`"

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞
        await create_contest(contest_id, user_id, contest_name, contest_description, int(winners), end_date, start_link)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ contest_messages
        message_id = contest_messages[-1]

        await bot.edit_message_text(confirmation_text, callback_query.message.chat.id, message_id,
                                    parse_mode="Markdown", reply_markup=keyboard)

    elif button_text == 'back_search':

        message_id = contest_messages[-1]

        user_id = callback_query.from_user.id
        user_data = await user_collections.find_one({"_id": user_id})

        if user_data and (
                ("status" in user_data and user_data["status"] in ["–¢–µ—Å—Ç–µ—Ä üî∞", "–ê–¥–º–∏–Ω üöó", "–°–æ–∑–¥–∞—Ç–µ–ª—å üé≠"]) or int(
                user_data.get("keys", 0)) > 0):

            # –ö–æ–¥ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            keyboard = types.InlineKeyboardMarkup()
            search = types.InlineKeyboardButton(text='üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data='search')
            create = types.InlineKeyboardButton(text='üé´ –°–æ–∑–¥–∞—Ç—å', callback_data='create')
            change = types.InlineKeyboardButton(text='üç≠ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data='change')
            keyboard.row(change, search)
            keyboard.row(create)

            confirmation_text = "*üç° –†–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞–º–∏!*\n\n*‚ú® –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–æ–º –∏–ª–∏ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è:*"

            reply = await bot.edit_message_text(confirmation_text, callback_query.message.chat.id, message_id,
                                                parse_mode="Markdown",
                                                reply_markup=keyboard)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            contest_messages.append(reply.message_id)

        else:
            # –ö–æ–¥ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            keyboard = types.InlineKeyboardMarkup()
            input_key = types.InlineKeyboardButton(text='üîë –í–≤–µ—Å—Ç–∏ –∫–ª—é—á', callback_data='input_key')
            keyboard.row(input_key)

            confirmation_text = "*üëÄ –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –∏ –≤–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ–Ω–∫—É—Ä—Å–æ–≤:*"

            reply = await bot.edit_message_text(confirmation_text, callback_query.message.chat.id, message_id,
                                                parse_mode="Markdown",
                                                reply_markup=keyboard)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            contest_messages.append(reply.message_id)

    elif button_text.startswith('history'):
        user_id = callback_query.from_user.id

        parts = button_text.split('_')
        if user_id:
            pass
        else:
            user_id = int(parts[1])
        action = parts[2]
        current_page = int(parts[3])

        if action == 'prev':
            current_page -= 1
        elif action == 'next':
            current_page += 1
        else:
            current_page = 1

        await show_user_history(callback_query, user_id, current_page)

    elif button_text.startswith('active'):
        user_id = callback_query.from_user.id

        parts = button_text.split('_')
        if user_id:
            pass
        else:
            user_id = int(parts[1])
        action = parts[2]
        current_page = int(parts[3])

        if action == 'prev':
            current_page -= 1
        elif action == 'next':
            current_page += 1
        else:
            current_page = 1

        await show_user_drawings(callback_query, user_id, current_page)

    elif button_text == 'back_history':

        user_id = callback_query.from_user.id

        message_id = profile_messages[-1]

        # –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_data = await user_collections.find_one({"_id": user_id})

        if user_data:
            username = callback_query.from_user.username
            wins = user_data.get("wins", 0)
            participation = user_data.get("participation", 0)
            creation_date = user_data.get("creation_date", "")
            status = user_data.get("status", "")

            # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
            profile = f'*üçπ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* `{username}`:\n\n*üçß –°—Ç–∞—Ç—É—Å:* `{status}`\n\n*üèÖ –ü–æ–±–µ–¥—ã –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö:* `{wins}`\n*üçÄ –£—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö:* `{participation}`\n*üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* `{creation_date}`'
            keyboard = types.InlineKeyboardMarkup()
            history = types.InlineKeyboardButton(text='–ò—Å—Ç–æ—Ä–∏—è —É—á–∞—Å—Ç–∏–π üìî', callback_data='history')
            id_check = types.InlineKeyboardButton(text='–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ü•è', callback_data='id_check')
            done = types.InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ ‚úÖ', callback_data='done')
            keyboard.add(history, id_check)
            keyboard.add(done)

            reply = await bot.edit_message_text(profile, callback_query.message.chat.id, message_id,
                                                parse_mode="Markdown",
                                                reply_markup=keyboard)
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            reply = await bot.send_message(callback_query.message.chat.id, "‚ò†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        profile_messages.append(reply.message_id)

    elif button_text == 'change':

        user_id = callback_query.from_user.id

        # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
        contests = await contests_collection.find({"owner_id": user_id}).to_list(length=None)

        message_id = contest_messages[-1]

        if contests:
            # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–æ–Ω–∫—É—Ä—Å–∞–º–∏
            result_message = "*üéØ –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã:*\n\n"

            # –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É –∫–æ–Ω–∫—É—Ä—Å—É —Å –ø–æ–º–æ—â—å—é enumerate
            for idx, contest in enumerate(contests, start=1):
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
                contest_id = contest.get("_id")
                contest_name = contest.get("contest_name")
                members = contest.get("members")
                ended = contest.get("ended")

                if ended == "True":
                    pass
                else:
                    if members:
                        members_count = len(members)
                    else:
                        members_count = 0
                    if members_count > 0:
                        members_message = f"{members_count}"
                    else:
                        members_message = "0"

                    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–Ω–∫—É—Ä—Å–∞ –∏ –≤–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
                    result_message += f"                            *= {idx} =*\n" \
                                      f"*ü™Å –ò–º—è:* `{contest_name}`\n" \
                                      f"*üßä –ê–π–¥–∏ –∫–æ–Ω–∫—É—Ä—Å–∞* `{contest_id}`*:*\n" \
                                      f"*üèØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* `{members_message}`\n\n"
        else:
            result_message = "*–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤ ‚ùå*"

        keyboard = types.InlineKeyboardMarkup()
        decline_create = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data='decline_create')
        contest_check = types.InlineKeyboardButton(text='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ üßß', callback_data='contest_check')

        keyboard.row(contest_check)
        keyboard.row(decline_create)

        reply = await bot.edit_message_text(result_message, callback_query.message.chat.id, message_id,
                                            parse_mode="Markdown",
                                            reply_markup=keyboard)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        change_message_id.append(reply.message_id)

    elif button_text == 'contest_check':

        user_id = callback_query.from_user.id

        # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
        contests = await contests_collection.find({"owner_id": user_id}).to_list(length=None)
        message_id = contest_messages[-1]

        if contests:

            # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–æ–Ω–∫—É—Ä—Å–∞–º–∏
            result_message = "*üßß –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—É—Ä—Å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:*\n\n"

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫–æ–Ω–∫—É—Ä—Å–æ–≤
            keyboard = types.InlineKeyboardMarkup()

            # –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É –∫–æ–Ω–∫—É—Ä—Å—É
            for contest in contests:

                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
                contest_id = contest.get("_id")
                ended = contest.get("ended")
                if ended == "True":
                    pass
                else:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–º–æ–¥–∑–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
                    random_emoji = random.choice(emojis)

                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞ —Å —ç–º–æ–¥–∑–∏
                    contest_button = types.InlineKeyboardButton(text=f'{contest_id} {random_emoji} ',
                                                                callback_data=f'contest_button_{contest_id}')
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    keyboard.row(contest_button)

            decline_create = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø',
                                                        callback_data="decline_create")
            keyboard.row(decline_create)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–æ–Ω–∫—É—Ä—Å–∞–º–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            reply = await bot.edit_message_text(result_message, callback_query.message.chat.id, message_id,
                                                parse_mode="Markdown",
                                                reply_markup=keyboard)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            change_message_id.append(reply.message_id)

        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            no_contests_message = "*–£ –≤–∞—Å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤‚ÄºÔ∏è*"
            int_digit = await bot.edit_message_text(no_contests_message, callback_query.message.chat.id, message_id,
                                                    parse_mode="Markdown")
            change_message_id.append(int_digit.message_id)

    elif button_text.startswith('contest_button'):

        contest_id = button_text.split('_')[2]

        # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
        contest = await contests_collection.find_one({"_id": int(contest_id)})
        message_id = change_message_id[-1]

        if contest:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
            contest_id = contest.get("_id")
            contest_name = contest.get("contest_name")
            contest_description = contest.get("contest_description")
            winners = contest.get("winners")
            members = contest.get("members")
            end_date = contest.get("end_date")

            if members:
                members_count = len(members)
            else:
                members_count = 0

            if members_count > 0:
                members_message = f"{members_count}"
            else:
                members_message = "0"

            result_message = f"*üèÜ –†–µ–¥–∞–∫—Ü–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞* `{contest_id}`*:*\n\n" \
                                f"*ü™Å –ò–º—è:* `{contest_name}`\n" \
                                f"*üßä –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:* `{contest_id}`\n" \
                                f"*üéóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:* _{contest_description}_\n" \
                                f"*üéñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:* `{winners}`\n" \
                                f"*üèØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* `{members_message}`\n" \
                                f"*üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:* `{end_date}`"

            keyboard = types.InlineKeyboardMarkup()
            contest_change = types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–µ–Ω–∏–µ ü•®', callback_data=f'contest_change_{contest_id}')
            winner = types.InlineKeyboardButton(text='–í—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç. üèÜ', callback_data=f'winner_refining_{contest_id}')
            members = types.InlineKeyboardButton(text='–£—á–∞—Å—Ç–∏–Ω–∫–∏ üèØ', callback_data=f'members_{contest_id}_None_1')
            back_search = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data='change')
            keyboard.row(contest_change, winner)
            keyboard.row(members)
            keyboard.row(back_search)

            reply = await bot.edit_message_text(result_message, callback_query.message.chat.id, message_id, parse_mode="Markdown",
                                                reply_markup=keyboard)
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            change_message_id.append(reply.message_id)
        else:
            int_digit = await bot.send_message(callback_query.message.chat.id, "*‚ùå –ö–æ–Ω–∫—É—Ä—Å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∞–π–¥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.*",
                                               parse_mode="Markdown")
            await asyncio.sleep(4)
            await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=int_digit.message_id)

    elif button_text.startswith('contest_change'):

        contest_id = button_text.split('_')[2]

        # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
        contest = await contests_collection.find_one({"_id": int(contest_id)})
        message_id = change_message_id[-1]

        if contest:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
            contest_id = contest.get("_id")
            contest_name = contest.get("contest_name")
            contest_description = contest.get("contest_description")
            winners = contest.get("winners")
            members = contest.get("members")
            end_date = contest.get("end_date")

            if members:
                members_count = len(members)
            else:
                members_count = 0

            if members_count > 0:
                members_message = f"{members_count}"
            else:
                members_message = "0"

            result_message = f"*üèÜ –†–µ–¥–∞–∫—Ü–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞* `{contest_id}`*:*\n\n" \
                                f"*ü™Å –ò–º—è:* `{contest_name}`\n" \
                                f"*üßä –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:* `{contest_id}`\n" \
                                f"*üéóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:* _{contest_description}_\n" \
                                f"*üéñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:* `{winners}`\n" \
                                f"*üèØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* `{members_message}`\n" \
                                f"*üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:* `{end_date}`"

            keyboard = types.InlineKeyboardMarkup()
            name_change = types.InlineKeyboardButton(text='–ò–º—è  Ô∏èü™Å', callback_data=f'name_change_{contest_id}')
            description_change = types.InlineKeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ üéóÔ∏èÔ∏è', callback_data=f'description_change_{contest_id}')
            winners_change = types.InlineKeyboardButton(text='–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ üéñÔ∏è', callback_data=f'winners_change_{contest_id}')
            date_change = types.InlineKeyboardButton(text='–î–∞—Ç–∞  Ô∏èüìÜ', callback_data=f'date_change_{contest_id}')
            back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data=f'change')
            keyboard.row(name_change)
            keyboard.row(description_change)
            keyboard.row(winners_change)
            keyboard.row(date_change)
            keyboard.row(back)

            reply = await bot.edit_message_text(result_message, callback_query.message.chat.id, message_id, parse_mode="Markdown",
                                                reply_markup=keyboard)
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            change_message_id.append(reply.message_id)
        else:
            int_digit = await bot.send_message(callback_query.message.chat.id, "*‚ùå –ö–æ–Ω–∫—É—Ä—Å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∞–π–¥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.*",
                                               parse_mode="Markdown")
            await asyncio.sleep(4)
            await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=int_digit.message_id)

    elif button_text.startswith('winner_refining'):

        contest_id = button_text.split('_')[2]

        # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
        contest = await contests_collection.find_one({"_id": int(contest_id)})
        members = contest.get("members")
        winners = contest.get("winners")
        message_id = change_message_id[-1]

        if int(winners) > len(members):
            result_message = f"‚ùå *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞* `{contest_id}`*:*\n\n" \
                             f"*ü•á –£–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:* `{winners}`\n" \
                             f"*üë§ –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* `{len(members)}`"
            keyboard = types.InlineKeyboardMarkup()
            winner_decline = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data='change')
            keyboard.row(winner_decline)
        else:
            result_message = f"üèÜ *–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å* `{contest_id}`*?*"
            keyboard = types.InlineKeyboardMarkup()
            winner = types.InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ', callback_data=f'winner_{contest_id}')
            winner_decline = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data='change')
            keyboard.row(winner_decline, winner)

        reply = await bot.edit_message_text(result_message, callback_query.message.chat.id, message_id, parse_mode="Markdown",
                                                reply_markup=keyboard)
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        change_message_id.append(reply.message_id)

    elif button_text.startswith('winner'):

        contest_id = button_text.split('_')[1]

        # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
        contest = await contests_collection.find_one({"_id": int(contest_id)})
        winners = contest.get("winners")
        members = contest.get("members")

        message_id = change_message_id[-1]

        if len(members) < int(winners):
            await bot.edit_message_text("*‚ùå –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ–Ω—å—à–µ, —á–µ–º –∑–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π.*\n\n"
                                        f"ü•á –ß–∏—Å–ª–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {winners}"
                                        f"üë§ –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ {len(members)}",
                                        callback_query.message.chat.id, message_id, parse_mode="Markdown")
            return

        # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
        random_winners = random.sample(members, int(winners))
        result_message = f"<b>üèÜ –ö–æ–Ω–∫—É—Ä—Å</b> <code>{contest_id}</code> <b>–±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"

        if int(winners) > 1:
            result_message += "<b>üéñÔ∏è –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:</b>\n"
            share_message = f"** - –ö–æ–Ω–∫—É—Ä—Å –±–æ—Ç üé≠**\n\n**üéñÔ∏è –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –∫–æ–Ω–∫—É—Ä—Å–∞** `{contest_id}`:\n"

            for idx, winner in enumerate(random_winners, start=1):
                user_id = winner
                username = await get_username(user_id)
                if username:
                    formatted_username = username.replace("_", "&#95;")
                else:
                    formatted_username = "None"
                result_message += f"<b>{idx}.</b> @{formatted_username} <b>‚Äî</b> <code>{winner}</code>\n"
                share_message += f"**{idx}.** @{username} ‚Äî `{user_id}`\n"

                # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–±–µ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_data = await user_collections.find_one({"_id": user_id})

                if user_data:
                    wins = user_data.get("wins", 0)
                    wins += 1
                    await user_collections.update_one({"_id": user_id}, {"$set": {"wins": wins}}, upsert=True)
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–æ–±–µ–¥–µ
                    winner_message = f"*ü•á –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å—Ç–∞–ª–∏ –æ–¥–Ω–∏–º –∏–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∫–æ–Ω–∫—É—Ä—Å–∞* `{contest_id}`*!*"
                    await bot.send_message(user_id, winner_message, parse_mode="Markdown")
                if contest:
                    ended = "True"
                    await contests_collection.update_one({"_id": int(contest_id)}, {"$set": {"ended": ended}}, upsert=True)
                await update_win_contest_members(contest_id, user_id)

        else:
            result_message += "<b>üéñÔ∏è –ü–æ–±–µ–¥–∏—Ç–µ–ª—å:</b>\n"

            user_id = random_winners[0]

            username = await get_username(user_id)
            if username:
                formatted_username = username.replace("_", "&#95;")
            else:
                formatted_username = "None"

            result_message += f"@{formatted_username} <b>‚Äî</b> <code>{user_id}</code>"
            share_message = f"** - –ö–æ–Ω–∫—É—Ä—Å –±–æ—Ç üé≠**\n\n**üéñÔ∏è –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∫–æ–Ω–∫—É—Ä—Å–∞** `{contest_id}`:\n" \
                            f"@{username} ‚Äî `{user_id}`"

            # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–±–µ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = await user_collections.find_one({"_id": user_id})

            if user_data:
                wins = user_data.get("wins", 0)
                wins += 1
                await user_collections.update_one({"_id": user_id}, {"$set": {"wins": wins}}, upsert=True)
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–æ–±–µ–¥–µ
                winner_message = f"*ü•á –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å—Ç–∞–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –∫–æ–Ω–∫—É—Ä—Å–∞* `{contest_id}`*!*"
                await bot.send_message(user_id, winner_message, parse_mode="Markdown")
            if contest:
                ended = "True"
                await contests_collection.update_one({"_id": int(contest_id)}, {"$set": {"ended": ended}}, upsert=True)
            await update_win_contest_members(contest_id, user_id)

        markup = types.InlineKeyboardMarkup()
        share_button = types.InlineKeyboardButton(text='–ü–æ–¥–µ–ª–∏—Ç—å—Å—è ü´¥', switch_inline_query=f'{share_message}')
        markup.add(share_button)

        reply = await bot.edit_message_text(result_message, callback_query.message.chat.id, message_id,
                                            parse_mode="HTML",
                                            reply_markup=markup)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        change_message_id.append(reply.message_id)

    elif button_text.startswith('members'):

        parts = button_text.split('_')
        contest_id = int(parts[1])
        action = parts[2]
        current_page = int(parts[3])

        if action == 'prev':
            current_page -= 1

        elif action == 'next':
            current_page += 1

        await show_members(callback_query, contest_id, current_page)

    elif button_text.startswith('ban_members'):

        parts = button_text.split('_')
        contest_id = parts[2]
        action = parts[3]
        current_page = int(parts[4])

        if action == 'prev':
            current_page -= 1

        elif action == 'next':
            current_page += 1

        await show_ban_members(callback_query, contest_id, current_page)

    elif button_text.startswith('block_profile'):

        parts = button_text.split('_')
        search_user_id = parts[2]
        contest_id = parts[3]

        # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
        contest = await contests_collection.find_one({"_id": int(contest_id)})
        user_data = await user_collections.find_one({"_id": int(search_user_id)})
        participation = user_data.get("participation")

        if contest:
            members = contest.get("members")
            ban_members = contest.get("ban_members")
            join_date = contest.get("join_date")

            if int(search_user_id) in members or int(search_user_id) in ban_members:
                user_index = members.index(int(search_user_id))

                await bot.answer_callback_query(callback_query.id, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω! ‚úîÔ∏è")

                # –£–¥–∞–ª–µ–Ω–∏–µ search_user_id –∏–∑ members
                members.remove(int(search_user_id))

                # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ join_date
                join_date.pop(user_index)

                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ search_user_id –≤ ban_members
                ban_members.append(int(search_user_id))

                if participation > 0:
                    # –£–º–µ–Ω—å—à–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏–π –Ω–∞ 1
                    participation_result = int(participation) - 1

                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ participation –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await user_collections.update_one({"_id": int(search_user_id)},
                                                      {"$set": {"participation": participation_result}})
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await contests_collection.update_one({"_id": int(contest_id)}, {
                    "$set": {"members": members, "join_date": join_date, "ban_members": ban_members}})

                message_id = change_message_id[-1]

                username = await get_username(search_user_id)
                if username:
                    username = username.replace("_", "&#95;")

                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                result_message = f"<b>üß∂–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>{search_user_id}</code>\n" \
                                 f"<b>ü™ê –Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{username}\n" \
                                 f"<b>‚ÄºÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> <code>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</code>"
                unblock = types.InlineKeyboardButton(text='–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å ‚ùé',
                                                     callback_data=f'unblock_profile_{search_user_id}_{contest_id}')

                keyboard = types.InlineKeyboardMarkup()
                back_search = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data='contest_check')
                input_id = types.InlineKeyboardButton(text='–ò—Å–∫–∞—Ç—å –µ—â—ë üîé',
                                                      callback_data=f'contest_search_profile_{contest_id}')
                keyboard.row(input_id)
                keyboard.row(unblock)
                keyboard.row(back_search)

                reply = await bot.edit_message_text(result_message, callback_query.message.chat.id, message_id,
                                                    parse_mode="HTML",
                                                    reply_markup=keyboard)

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                change_message_id.append(reply.message_id)
            else:
                int_digit = await bot.send_message(callback_query.message.chat.id, "*‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω.*",
                                                   parse_mode="Markdown")
                await asyncio.sleep(4)
                await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=int_digit.message_id)
        else:
            int_digit = await bot.send_message(callback_query.message.chat.id, "*‚ùå –ö–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.*",
                                               parse_mode="Markdown")
            await asyncio.sleep(4)
            await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=int_digit.message_id)

    elif button_text.startswith('unblock_profile'):

        parts = button_text.split('_')
        search_user_id = parts[2]
        contest_id = parts[3]

        # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
        contest = await contests_collection.find_one({"_id": int(contest_id)})

        if contest:

            members = contest.get("members")
            ban_members = contest.get("ban_members")

            if int(search_user_id) in members or int(search_user_id) in ban_members:

                await bot.answer_callback_query(callback_query.id, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω! ‚úîÔ∏è")

                # –£–¥–∞–ª–µ–Ω–∏–µ search_user_id –∏–∑ ban_members
                ban_members.remove(int(search_user_id))

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await contests_collection.update_one({"_id": int(contest_id)}, {
                    "$set": {"ban_members": ban_members}})

                message_id = change_message_id[-1]

                username = await get_username(search_user_id)
                if username:
                    username = username.replace("_", "&#95;")

                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                result_message = f"<b>üß∂–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>{search_user_id}</code>\n" \
                                 f"<b>ü™ê –Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{username}\n" \
                                 f"<b>‚ùé –°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> <code>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</code>"

                keyboard = types.InlineKeyboardMarkup()
                back_search = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data='contest_check')
                input_id = types.InlineKeyboardButton(text='–ò—Å–∫–∞—Ç—å –µ—â—ë üîé',
                                                      callback_data=f'contest_search_profile_{contest_id}')
                keyboard.row(input_id)
                keyboard.row(back_search)

                reply = await bot.edit_message_text(result_message, callback_query.message.chat.id, message_id,
                                                    parse_mode="HTML",
                                                    reply_markup=keyboard)

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                change_message_id.append(reply.message_id)
            else:
                int_digit = await bot.send_message(callback_query.message.chat.id, "*‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω.*",
                                                   parse_mode="Markdown")
                await asyncio.sleep(4)
                await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=int_digit.message_id)
        else:
            int_digit = await bot.send_message(callback_query.message.chat.id, "*‚ùå –ö–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.*",
                                               parse_mode="Markdown")
            await asyncio.sleep(4)
            await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=int_digit.message_id)

    elif button_text.startswith('kick_profile'):

        parts = button_text.split('_')
        search_user_id = parts[2]
        contest_id = parts[3]

        # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
        contest = await contests_collection.find_one({"_id": int(contest_id)})
        user_data = await user_collections.find_one({"_id": int(search_user_id)})
        participation = user_data.get("participation")

        if contest:
            members = contest.get("members")
            join_date = contest.get("join_date")

            if int(search_user_id) in members:
                user_index = members.index(int(search_user_id))

                await bot.answer_callback_query(callback_query.id, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω! ‚úîÔ∏è")

                # –£–¥–∞–ª–µ–Ω–∏–µ search_user_id –∏–∑ members
                members.remove(int(search_user_id))

                # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ join_date
                join_date.pop(user_index)

                if participation > 0:
                    # –£–º–µ–Ω—å—à–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏–π –Ω–∞ 1
                    participation_result = int(participation) - 1

                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ participation –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await user_collections.update_one({"_id": int(search_user_id)},
                                                          {"$set": {"participation": participation_result}})

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await contests_collection.update_one({"_id": int(contest_id)}, {
                    "$set": {"members": members, "join_date": join_date}})

                message_id = change_message_id[-1]

                username = await get_username(search_user_id)
                if username:
                    username = username.replace("_", "&#95;")

                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                result_message = f"<b>üß∂–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>{search_user_id}</code>\n" \
                                 f"<b>ü™ê –Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{username}\n" \
                                 f"<b>‚ÄºÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> <code>–ò—Å–∫–ª—é—á–µ–Ω!</code>"

                keyboard = types.InlineKeyboardMarkup()
                back_search = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data='contest_check')
                input_id = types.InlineKeyboardButton(text='–ò—Å–∫–∞—Ç—å –µ—â—ë üîé',
                                                      callback_data=f'contest_search_profile_{contest_id}')
                keyboard.row(input_id)
                keyboard.row(back_search)

                reply = await bot.edit_message_text(result_message, callback_query.message.chat.id, message_id,
                                                    parse_mode="HTML",
                                                    reply_markup=keyboard)

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                change_message_id.append(reply.message_id)
            else:
                int_digit = await bot.send_message(callback_query.message.chat.id, "*‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω.*",
                                                   parse_mode="Markdown")
                await asyncio.sleep(4)
                await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=int_digit.message_id)
        else:
            int_digit = await bot.send_message(callback_query.message.chat.id, "*‚ùå –ö–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.*",
                                               parse_mode="Markdown")
            await asyncio.sleep(4)
            await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=int_digit.message_id)

    elif button_text.startswith('promo'):

        parts = button_text.split('_')
        promo = str(parts[1])
        action = parts[2]
        current_page = int(parts[3])
        message_id = callback_query.message.message_id

        if action == 'prev':
            current_page -= 1

        elif action == 'next':
            current_page += 1

        # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ –∞–π–¥–∏
        promo_code = await promo_collection.find_one({"_id": promo})

        members = promo_code.get("active_members")
        result_message = f"<b>üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞</b> <code>{promo}</code>:\n\n" \
                         f"                                   <b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}</b>\n\n"

        keyboard = types.InlineKeyboardMarkup()

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        per_page = 25
        start_index = (current_page - 1) * per_page
        end_index = current_page * per_page
        page_members = members[start_index:end_index] if start_index < len(members) else []
        for idx, user_id in enumerate(page_members, start=start_index + 1):
            username = await get_username(user_id)
            if username:
                username = username.replace("_", "&#95;")
            result_message += f"<b>{idx}.</b> @{username} <b>(</b><code>{user_id}</code><b>)</b>\n"

        # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è
        prev_button = types.InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=f'promo_{promo}_prev_{current_page}')
        next_button = types.InlineKeyboardButton(text='–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è', callback_data=f'promo_{promo}_next_{current_page}')
        back = types.InlineKeyboardButton(text='–í—ã–ø–æ–ª–µ–Ω–µ–Ω–æ ‚úÖ', callback_data='done')

        # Add both buttons if there are both previous and next pages
        if current_page > 1 and end_index < len(members):
            keyboard.row(prev_button, next_button)
        # Add only the previous button if there are no more pages
        elif current_page > 1:
            keyboard.row(prev_button)
        # Add only the next button if this is the first page
        elif end_index < len(members):
            keyboard.row(next_button)
        keyboard.row(back)
        uses = promo_code.get("uses")
        result_message += f"\n\n<b>üß™ –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π:</b> <code>{uses}</code>"

        await bot.edit_message_text(result_message, callback_query.message.chat.id, message_id, parse_mode="HTML",
                                    reply_markup=keyboard)

    elif button_text.startswith('list_update'):

        parts = button_text.split('_')
        promo = parts[2]
        current_page = int(parts[3])
        try:
            await update_promo_members(promo, current_page, callback_query.message.chat.id, callback_query.message.message_id)
        except Exception as e:
            await bot.answer_callback_query(callback_query.id, text="–ù–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–µ—Ä–µ—Å—Ç–∞–Ω—å—Ç–µ –ª–æ–º–∞—Ç—å –ø–∞–ª–µ—Ü. ü•¨")

    elif button_text.startswith('permanent'):
        user_id = callback_query.from_user.id

        parts = button_text.split('_')
        if user_id:
            pass
        else:
            user_id = int(parts[1])
        action = parts[2]
        current_page = int(parts[3])

        if action == 'prev':
            current_page -= 1
        elif action == 'next':
            current_page += 1
        else:
            current_page = 1

        await show_user_permanent(callback_query, user_id, current_page)

    elif button_text == 'text_for_key':
        result_message = "<b>üí≤ –¶–µ–Ω–∞ –∫–ª—é—á–∞ –Ω–∞ –æ–¥–Ω—É –∞–∫—Ç–∏–≤–∞—Ü–∏—é</b> <code>1$</code>\n" \
                         "<b>üîë –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π</b> /buy_key <b>–¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–ª—é—á–∞.</b>"
        await bot.edit_message_text(result_message, callback_query.message.chat.id, callback_query.message.message_id,
                                    parse_mode="HTML")

    elif button_text == 'check_rooms':
        user_id = callback_query.from_user.id

        # Retrieve contests where the user with the specified user_id was a member
        user_games = await game_collection.find({"members": user_id}).to_list(length=None)

        # Check if there are any active contests for the user
        active_games = [game for game in user_games if "ended" in game and game["ended"] == "False"]

        if active_games:
            number = 0
            # Create the message containing the user history for the current page
            result_message = f"*üñ•Ô∏è –í–∞—à–∏ –∫–æ–º–Ω–∞—Ç—ã:*\n\n"
            for game in active_games:
                # Increment the room number for the next iteration
                number += 1
                result_message += f"                            *= {number} =*\n"
                result_message += f"*üîò ID –ö–æ–º–Ω–∞—Ç—ã:* `{game['_id']}`\n"
                result_message += f"*üõí –ò–≥—Ä–∞:* `{game['type']}`\n"
                result_message += f"*üèÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* `{len(game['members'])}`\n"
                result_message += f"*üóìÔ∏è –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:* `{game['create_date']}`\n\n"
            keyboard = types.InlineKeyboardMarkup()
            back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ ü•è', callback_data='create_back')
            keyboard.row(back)

            # Send or edit the message with pagination
            await bot.edit_message_text(result_message, callback_query.message.chat.id,
                                                callback_query.message.message_id, parse_mode="Markdown",
                                                reply_markup=keyboard)
        else:
            result_message = "*üîé –°–µ–π—á–∞—Å –≤—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –∏–≥—Ä–∞—Ö.*"
            keyboard = types.InlineKeyboardMarkup()
            back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ ü•è', callback_data='create_back')
            keyboard.row(back)

            # Send or edit the message with pagination
            await bot.edit_message_text(result_message, callback_query.message.chat.id,
                                                callback_query.message.message_id, parse_mode="Markdown",
                                                reply_markup=keyboard)

    elif button_text == 'create_room':
        user_id = callback_query.from_user.id

        # Retrieve contests where the user with the specified user_id was a member
        user_games = await game_collection.find({"owner_id": user_id}).to_list(length=None)

        # Check if there are any active contests for the user
        active_games = [game for game in user_games if "ended" in game and game["ended"] == "False"]

        if len(active_games) > 1:
            result_message = "*‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞!.*"
            keyboard = types.InlineKeyboardMarkup()
            back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ ü•è', callback_data='create_back')
            keyboard.row(back)

            # Send or edit the message with pagination
            await bot.edit_message_text(result_message, callback_query.message.chat.id,
                                                callback_query.message.message_id, parse_mode="Markdown",
                                                reply_markup=keyboard)
        else:
            # Create the message containing the user history for the current page
            result_message = f"*üñ•Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:*\n\n"
            keyboard = types.InlineKeyboardMarkup()
            chose_1 = types.InlineKeyboardButton(text='1vs1 üë§', callback_data='room_create_1vs1_formate')
            chose_2 = types.InlineKeyboardButton(text='2vs2 üë•', callback_data='room_create_2vs2_formate')
            keyboard.row(chose_1)
            keyboard.row(chose_2)

            # Send or edit the message with pagination
            await bot.edit_message_text(result_message, callback_query.message.chat.id,
                                                callback_query.message.message_id, parse_mode="Markdown",
                                                reply_markup=keyboard)

    elif button_text == 'create_back':
        user_id = callback_query.from_user.id
        user_data = await game_collection.find_one({"owner_id": user_id, "ended": "False"})

        if user_data:
            keyboard = types.InlineKeyboardMarkup()
            check_rooms = types.InlineKeyboardButton(text='üîé –ú–æ–∏ –∫–æ–º–Ω–∞—Ç—ã', callback_data='check_rooms')
            keyboard.row(check_rooms)
            result_message = "*üñ•Ô∏è –£ –≤–∞—Å —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞ –∏–≥—Ä–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞!*\n\n" \
                             "*‚ú® –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç:*"
            # Send or edit the message with pagination
            await bot.edit_message_text(result_message, callback_query.message.chat.id,
                                                callback_query.message.message_id, parse_mode="Markdown",
                                                reply_markup=keyboard)

        else:
            keyboard = types.InlineKeyboardMarkup()
            create_room = types.InlineKeyboardButton(text='üïπÔ∏è –°–æ–∑–¥–∞—Ç—å', callback_data='create_room')
            check_rooms = types.InlineKeyboardButton(text='üîé –ú–æ–∏ –∫–æ–º–Ω–∞—Ç—ã', callback_data=f'check_rooms')
            keyboard.row(check_rooms)
            keyboard.row(create_room)

            result_message = "*üñ•Ô∏è –ü–∞–Ω–µ–ª—å —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–≤—ã—Ö –∫–æ–º–Ω–∞—Ç!*\n\n" \
                             "*‚ú® –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç–∞–º–∏ –∏–ª–∏ –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è:*"
            # Send or edit the message with pagination
            await bot.edit_message_text(result_message, callback_query.message.chat.id,
                                                callback_query.message.message_id, parse_mode="Markdown",
                                                reply_markup=keyboard)

    elif button_text.startswith('info_room'):
        user_id = callback_query.from_user.id
        room_id = button_text.split('_')[2]

        # Retrieve contests where the user with the specified user_id was a member
        room = await game_collection.find_one({"_id": room_id})

        members = room.get("members")
        if user_id in members:
            pass
        else:
            await bot.answer_callback_query(callback_query.id, text="‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –¥–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã. Ô∏è")
            await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
            return

        if room:
            # Create the message containing the user history for the current page
            result_message = f"*üñ•Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–Ω–∞—Ç–µ:*\n\n"
            # Increment the room number for the next iteration
            result_message += f"*üîò ID –ö–æ–º–Ω–∞—Ç—ã:* `{room['_id']}`\n"
            result_message += f"*üõí –ò–≥—Ä–∞:* `{room['type']}`\n"
            result_message += f"*üë• –§–æ—Ä–º–∞—Ç:* `{room['format']}`\n"
            result_message += f"*üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤:* `{room['rounds']}`\n"
            result_message += f"*üèÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* `{len(room['members'])}`\n"
            result_message += f"*üóìÔ∏è –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:* `{room['create_date']}`\n\n"
            keyboard = types.InlineKeyboardMarkup()
            game_members = types.InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ üë•', callback_data=f'game_members_{room_id}')
            keyboard.row(game_members)

            if int(user_id) == room["owner_id"]:
                start_game = types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å ‚úÖ', callback_data=f'start_game_{room_id}')
                keyboard.row(start_game)
            else:
                leave_room = types.InlineKeyboardButton(text='–ü–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É ‚ùå',
                                                        callback_data=f'leave_room_{room_id}')
                keyboard.row(leave_room)

            # Send or edit the message with pagination
            await bot.edit_message_text(result_message, callback_query.message.chat.id,
                                                callback_query.message.message_id, parse_mode="Markdown",
                                                reply_markup=keyboard)
        else:
            result_message = "*‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.*"
            keyboard = types.InlineKeyboardMarkup()
            back = types.InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å ‚òëÔ∏èÔ∏è', callback_data='done')
            keyboard.row(back)

            # Send or edit the message with pagination
            await bot.edit_message_text(result_message, callback_query.message.chat.id,
                                                callback_query.message.message_id, parse_mode="Markdown",
                                                reply_markup=keyboard)

    elif button_text.startswith('leave_room'):

        user_id = callback_query.from_user.id
        room_id = button_text.split('_')[2]

        # Retrieve the room using the room_id
        room = await game_collection.find_one({"_id": room_id})
        user = await user_collections.find_one({"_id": user_id})
        members = room.get("members", [])
        room_status = room.get("room_status")

        if user_id in members:
            pass
        else:
            await bot.answer_callback_query(callback_query.id, text="‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –¥–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã. Ô∏è")
            await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
            return

        if room_status == "wait":
            await bot.answer_callback_query(callback_query.id, text="‚úÖ Ô∏è")
        elif room_status == "game":
            await bot.answer_callback_query(callback_query.id, text="‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã. Ô∏è")
            await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
            return
        elif room_status == "ended":
            await bot.answer_callback_query(callback_query.id, text="‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –∏–≥—Ä–∞ –≤ –Ω–µ–π –±—ã–ª–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. Ô∏è")
            await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
            return

        if room:
            members = room.get("members", [])
            if user_id in members:
                members.remove(user_id)

                await game_collection.update_one({"_id": room_id}, {"$set": {"members": members}})
                game_participation = user.get("game_participation")
                if game_participation > 0:
                    await user_collections.update_one({"_id": user_id}, {"$inc": {"game_participation": -1}})
                else:
                    pass
                # Optionally, you can inform the user that they have left the room
                await bot.edit_message_text("*‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –∫–æ–º–Ω–∞—Ç—É!*", callback_query.message.chat.id,
                                            callback_query.message.message_id, parse_mode="Markdown")
            else:
                # Send or edit the message with pagination
                await bot.edit_message_text("*‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –¥–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã!*", callback_query.message.chat.id,
                                            callback_query.message.message_id, parse_mode="Markdown")
        else:
            # Send or edit the message with pagination
            await bot.edit_message_text("*‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞*", callback_query.message.chat.id,
                                        callback_query.message.message_id, parse_mode="Markdown")

    elif button_text.startswith('game_members'):
        room_id = button_text.split('_')[2]

        room = await game_collection.find_one({"_id": room_id})

        owner_id = room.get("owner_id")
        members = room.get("members")
        if user_id in members:
            pass
        else:
            await bot.answer_callback_query(callback_query.id, text="‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –¥–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã. Ô∏è")
            await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
            return

        result_message = f"<b>üéÆ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–Ω–∞—Ç—ã</b> <code>{room_id}</code><b>:</b>\n\n"

        keyboard = types.InlineKeyboardMarkup()
        current_page = 1
        per_page = 25
        start_index = (current_page - 1) * per_page
        end_index = current_page * per_page
        page_members = members[start_index:end_index] if start_index < len(members) else []

        for idx, user_id in enumerate(page_members, start=start_index + 1):
            username = await get_username(user_id)
            if username:
                username = username.replace("_", "&#95;")
            creator_label = "<b>‚Äî –°–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã üíΩ</b>" if user_id == owner_id else ""
            result_message += f"{idx}. @{username} (<code>{user_id}</code>) {creator_label}\n"
        back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ ü•è', callback_data=f'info_room_{room_id}')
        keyboard.row(back)

        await bot.edit_message_text(result_message, callback_query.message.chat.id, callback_query.message.message_id,
                                    parse_mode="HTML",
                                    reply_markup=keyboard)

    elif button_text.startswith('start_game'):
        room_id = button_text.split('_')[2]

        # Retrieve contests where the user with the specified user_id was a member
        room = await game_collection.find_one({"_id": room_id})

        # Check if the format of the game is either 2vs2 or 1vs1
        room_format = room.get("format", "")
        max_players = 4 if room_format == "2vs2" else 2
        current_players = len(room.get("members", []))
        room_status = room.get("room_status")
        if room_status == "wait":
            await bot.answer_callback_query(callback_query.id, text="‚úÖ Ô∏è")
        elif room_status == "game":
            await bot.answer_callback_query(callback_query.id,
                                            text="‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —É–∂–µ –∏–¥—ë—Ç. Ô∏è")
            await bot.delete_message(chat_id=callback_query.message.chat.id,
                                     message_id=callback_query.message.message_id)
            return
        elif room_status == "ended":
            await bot.answer_callback_query(callback_query.id,
                                            text="‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —É–∂–µ –æ–∫–æ–Ω—á–µ–Ω–∞. Ô∏è")
            await bot.delete_message(chat_id=callback_query.message.chat.id,
                                     message_id=callback_query.message.message_id)
            return

        if current_players < max_players:
            await bot.answer_callback_query(callback_query.id, text="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ! ‚ùå")
        else:
            await game_collection.update_one({"_id": room_id}, {"$set": {"room_status": "game"}})
            result_message = "*–£–¥–∞—á–∏! üçÄ*"

            # Send or edit the message with pagination
            await bot.edit_message_text(result_message, callback_query.message.chat.id,
                                        callback_query.message.message_id, parse_mode="Markdown",
                                        reply_markup=keyboard)
            rounds = room.get("rounds")
            members = room.get("members", [])  # Define the members variable

            # Split members into two teams for 2vs2 format
            if room_format == "2vs2":
                team1 = members[:2]
                team2 = members[2:]
            else:
                # If it is 1vs1, create the "teams" of individual members
                team1, team2 = [members[0]], [members[1]]

            # Initialise dictionaries to count the wins of each team
            team_wins = {tuple(team1): 0, tuple(team2): 0}
            team_scores = {tuple(team1): 0, tuple(team2): 0}

            # Informing users about the start of the game
            start_game_message = "<b>üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!</b>\n\n"
            team_message = ""

            for team_name, team_members in {"<b>ü´ë –ü–µ—Ä–≤–∞—è –∫–æ–º–∞–Ω–¥–∞</b>": team1, "<b>üçè –í—Ç–æ—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞</b>": team2}.items():
                # Create a string for all members in a single team
                members_string = ', '.join([f"@{await get_username(member)} <code>[{member}]</code>" for member in team_members])
                team_message += "{}:\n{}\n\n".format(team_name, members_string)

            # Send message to each member
            for member in team1 + team2:
                await bot.send_message(member, start_game_message, parse_mode="HTML")
                await bot.send_chat_action(user_id, action="typing")
                await asyncio.sleep(0.7)
                await bot.send_message(member, team_message, parse_mode="HTML")

            for _ in range(rounds):
                # Define the match_results variable
                match_results = {tuple(team1): 0, tuple(team2): 0}

                for team in [team1, team2]:
                    for member in team:
                        # Send message to each member
                        await bot.send_message(member, "*–õ–µ—Ç–∏—Ç! üïäÔ∏è*", parse_mode="Markdown")
                        basketball = await bot.send_dice(member, emoji=room["type"])
                        match_results[tuple(team)] += basketball['dice']['value']  # Record the result
                        team_scores[tuple(team)] += basketball['dice']['value']  # Update the team scores

                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏ –±–µ–∑ –∫–æ—Ä—Ç–µ–∂–µ–π
                        text_match_results = {team[0]: score for team, score in match_results.items()}

                        await bot.send_chat_action(user_id, action="typing")
                        await asyncio.sleep(2.5)

                # Compare results and decide the winner and loser
                winner = max(match_results, key=match_results.get)
                loser = min(match_results, key=match_results.get)

                if match_results[winner] == match_results[loser]:  # It's a draw
                    for team in [team1, team2]:
                        for member in team:
                            await bot.send_message(member, "*–≠—Ç–æ—Ç —Ä–∞—É–Ω–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –≤ –Ω–∏—á—å—é! ü§ù*", parse_mode="Markdown")
                    continue
                else:
                    team_wins[winner] += 1  # Update the number of wins for the winning team

                # Sending messages about victory and defeat
                for team in [winner, loser]:
                    for member in team:
                        if team == winner:
                            await bot.send_message(member, "*–û—Ç–ª–∏—á–Ω—ã–π —Ä–∞—É–Ω–¥, –≤–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–±–µ–¥–∏–ª–∞! üèÖ*",
                                                   parse_mode="Markdown")
                        else:
                            await bot.send_message(member, "*–ü–æ—Ö–æ–∂–µ, –≤–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —ç—Ç–æ—Ç —Ä–∞—É–Ω–¥ –ø—Ä–æ–∏–≥—Ä–∞–ª–∞... ü´•*",
                                                   parse_mode="Markdown")
            max_wins = max(team_wins.values())
            winners = [team for team, wins in team_wins.items() if wins == max_wins]

        unique_wins = set(team_wins.values())

        if len(unique_wins) == 1 and list(unique_wins)[0] > 0:
            max_wins = max(team_wins.values())
            winners = [team for team, wins in team_wins.items() if wins == max_wins]
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∏—á—å–µ–π –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
            draw_message = "*üåâ –î–∞–Ω–Ω–∞—è –∏–≥—Ä–∞ –±—ã–ª–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞ –Ω–∏—á—å–µ–π, –ø–æ—ç—Ç–æ–º—É –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –Ω–µ—Ç.*"
            for member in members:
                await user_collections.update_one({"_id": member}, {"$inc": {"draws": 1}})
                await bot.send_message(member, draw_message, parse_mode="Markdown")
            await game_collection.update_one({"_id": room_id}, {"$set": {"draw": "True"}})
        elif max(team_wins.values()):  # If there's at least one win
            max_wins = max(team_wins.values())
            winners = [player for player, wins in team_wins.items() if wins == max_wins]
            winner_team = winners[0]  # —ç—Ç–æ –≤–∞—à –∫–æ—Ä—Ç–µ–∂

            # –ï—Å–ª–∏ —É –Ω–∞—Å –æ–¥–∏–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
            if len(winner_team) == 1:
                # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∫–æ—Ä—Ç–µ–∂–∞
                winner_user_id = winners[0][0]
                username = await get_username(winner_user_id)
                if username:
                    username = username.replace("_", "&#95;")
                    team_names = {
                        tuple(team1): "–ü–µ—Ä–≤–∞—è –∫–æ–º–∞–Ω–¥–∞",
                        tuple(team2): "–í—Ç–æ—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞"
                    }

                    team_scores_message = "\n".join([
                        f"<b>{team_names[team]}</b> <code>[{''.join([str(member) for member in team])}]</code><b>:</b> <code>{score}</code> <b>–æ—á–∫–æ–≤.</b>"
                        for team, score in team_scores.items()
                    ])

                    winner_message = (
                        f"<b>ü•á –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b> @{username} <code>[{winner_user_id}]</code>"
                        f" <b>–ø–æ–±–µ–¥–∏–ª, –æ—Ç–ª–∏—á–Ω–∞—è –±—ã–ª–∞ –∏–≥—Ä–∞!</b>\n\n"
                        f"<b>üèÜ –°—á–µ—Ç –∫–æ–º–∞–Ω–¥:</b>\n{team_scores_message}"
                    )
                    for member in members:
                        await bot.send_message(member, winner_message, parse_mode="HTML")
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–≥—Ä—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏–≥—Ä—ã
                await game_collection.update_one({"_id": room_id}, {"$push": {"winners": {"$each": [winner_user_id]}}})
                await user_collections.update_one({"_id": winner_user_id}, {"$inc": {"game_wins": 1}})

            # –ï—Å–ª–∏ —É –Ω–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
            else:
                winners_usernames = []
                for winner_team in winners:
                    winner_usernames = []
                    for user_id in winner_team:
                        username = await get_username(user_id)
                        if username:
                            username = username.replace("_", "&#95;")
                            winner_usernames.append(f"@{username} <b>‚Äî</b> <code>{user_id}</code>\n")

                        team_names = {
                            tuple(team1): "–ü–µ—Ä–≤–∞—è –∫–æ–º–∞–Ω–¥–∞",
                            tuple(team2): "–í—Ç–æ—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞"
                        }

                        team_scores_message = "\n".join([
                            f"<b>{team_names[team]}</b> <code>[{', '.join([str(member) for member in team])}]</code><b>:</b> <code>{score}</code> <b>–æ—á–∫–æ–≤.</b>"
                            for team, score in team_scores.items()
                        ])

                        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ "game_wins" –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        await user_collections.update_one({"_id": user_id}, {"$inc": {"game_wins": 1}})

                    winners_usernames.append("".join(winner_usernames))
                winners_message = f"<b>ü•á –ü–æ–∑–¥—Ä–∞–≤–ª—è—é –∫–æ–º–∞–Ω–¥—É —Å –ø–æ–±–µ–¥–æ–π:</b>\n{''.join(winners_usernames)}\n" \
                        f"<b>üèÜ –°—á–µ—Ç –∫–æ–º–∞–Ω–¥:</b>\n{team_scores_message}"

                for member in members:
                    await bot.send_message(member, winners_message, parse_mode="HTML")

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–≥—Ä—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏–≥—Ä—ã
                await game_collection.update_one({"_id": room_id}, {"$push": {"winners": {"$each": [user_id]}}})
        else:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∏—á—å–µ–π –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
            draw_message = "*üåâ –î–∞–Ω–Ω–∞—è –∏–≥—Ä–∞ –±—ã–ª–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞ –Ω–∏—á—å–µ–π, –ø–æ—ç—Ç–æ–º—É –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –Ω–µ—Ç.*"
            for member in members:
                await user_collections.update_one({"_id": member}, {"$inc": {"draws": 1}})
                await bot.send_message(member, draw_message, parse_mode="Markdown")
            await game_collection.update_one({"_id": room_id}, {"$set": {"draw": "True"}})
        await game_collection.update_one({"_id": room_id}, {"$set": {"room_status": "ended"}})
        await game_collection.update_one({"_id": room_id}, {"$set": {"ended": "True"}})

    elif button_text.startswith('game_profile'):
        user_id = button_text.split('_')[2]
        type = button_text.split('_')[3]
        try:
            send_id = button_text.split('_')[4]
        except Exception:
            send_id = None
            pass

        if send_id:
            click_user_id = callback_query.from_user.id
            if int(send_id) != click_user_id:
                await bot.answer_callback_query(callback_query.id, text="‚ùå –£–≤—ã —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –≤–∞—à–∞, –∞ —Ç–∞–∫ —Ö–æ—Ç–µ–ª–æ—Å—å...")
                return
        else:
            click_user_id = callback_query.from_user.id
            if int(user_id) != click_user_id:
                await bot.answer_callback_query(callback_query.id, text="‚ùå –£–≤—ã —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –≤–∞—à–∞, –∞ —Ç–∞–∫ —Ö–æ—Ç–µ–ª–æ—Å—å...")
                return

        user_data = await user_collections.find_one({"_id": int(user_id)})

        if user_data:
            if type == "buttons":
                username = callback_query.from_user.username
            else:
                username = user_id
            wins = user_data.get("game_wins", 0)
            draws = user_data.get("draws", 0)
            participation = user_data.get("game_participation", 0)

            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø–æ–±–µ–¥
            win_percentage = (wins / participation) * 100 if participation > 0 else 0
            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –Ω–∏—á—å–∏—Ö
            draw_percentage = (draws / participation) * 100 if participation > 0 else 0

            creation_date = user_data.get("creation_date", "")
            status = user_data.get("status", "")

            # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
            profile = f'*üéÆ –ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* `{username}`:\n\n' \
                      f'*üçß –°—Ç–∞—Ç—É—Å:* `{status}`\n\n' \
                      f'*üçÄ –£—á–∞—Å—Ç–∏–µ –≤ –∏–≥—Ä–∞—Ö:* `{participation}`\n' \
                      f'*üïäÔ∏è –ù–∏—á—å–∏:* `{draws}`\n' \
                      f'*ü•á –ü–æ–±–µ–¥—ã –≤ –∏–≥—Ä–∞—Ö:* `{wins}`\n' \
                      f'*üèÜ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥:* `{win_percentage:.2f}%`\n' \
                      f'*‚öñÔ∏è –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∏—á—å–∏—Ö:* `{draw_percentage:.2f}%`\n\n' \
                      f'*üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* `{creation_date}`'
            keyboard = types.InlineKeyboardMarkup()

            if type == "buttons":
                contest_profile = types.InlineKeyboardButton(text='–ö–æ–Ω–∫—É—Ä—Å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å üç≠', callback_data=f'contest_profile_{user_id}_buttons')

                history = types.InlineKeyboardButton(text='–ò—Å—Ç–æ—Ä–∏—è —É—á–∞—Å—Ç–∏–π üìî',
                                                     callback_data=f'history_{user_id}_None_1')
                active_history_drawings = types.InlineKeyboardButton(text='–ê–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–∏—è ü¶™',
                                                                     callback_data=f'active_{user_id}_None_1')
                id_check = types.InlineKeyboardButton(text='–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ü•è', callback_data='id_check')
                done = types.InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ ‚úÖ', callback_data='done')
                keyboard.add(contest_profile)
                keyboard.add(history, active_history_drawings)
                keyboard.add(id_check)
                keyboard.add(done)

            elif type == "check":
                contest_profile = types.InlineKeyboardButton(text='–ö–æ–Ω–∫—É—Ä—Å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å üç≠', callback_data=f'contest_profile_{user_id}_check')
                id_check = types.InlineKeyboardButton(text='–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ü•è', callback_data='id_check')
                back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data=f'profile_edit')
                keyboard.add(contest_profile)
                keyboard.add(id_check)
                keyboard.add(back)

            elif type == "none":
                if send_id:
                    history = types.InlineKeyboardButton(text='–ö–æ–Ω–∫—É—Ä—Å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å üç≠', callback_data=f'contest_profile_{user_id}_none_{send_id}')
                else:
                    history = types.InlineKeyboardButton(text='–ö–æ–Ω–∫—É—Ä—Å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å üç≠', callback_data=f'contest_profile_{user_id}_none')
                keyboard.add(history)

            # Send or edit the message with pagination
            await bot.edit_message_text(profile, callback_query.message.chat.id,
                                        callback_query.message.message_id, parse_mode="Markdown",
                                        reply_markup=keyboard)
        else:
            result_message = "*‚ò†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.*\n\n*üë§ –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É* /start *–≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É, —ç—Ç–æ —Å–æ–∑–¥–∞—Å—Ç –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å!*"
            # Send or edit the message with pagination
            await bot.edit_message_text(result_message, callback_query.message.chat.id,
                                        callback_query.message.message_id, parse_mode="Markdown",
                                        reply_markup=keyboard)

    elif button_text.startswith('contest_profile'):
        user_id = button_text.split('_')[2]
        type = button_text.split('_')[3]
        try:
            send_id = button_text.split('_')[4]
        except Exception:
            send_id = None
            pass

        if send_id:
            click_user_id = callback_query.from_user.id
            if int(send_id) != click_user_id:
                await bot.answer_callback_query(callback_query.id, text="‚ùå –£–≤—ã —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –≤–∞—à–∞, –∞ —Ç–∞–∫ —Ö–æ—Ç–µ–ª–æ—Å—å...")
                return
        else:
            click_user_id = callback_query.from_user.id
            if int(user_id) != click_user_id:
                await bot.answer_callback_query(callback_query.id, text="‚ùå –£–≤—ã —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –≤–∞—à–∞, –∞ —Ç–∞–∫ —Ö–æ—Ç–µ–ª–æ—Å—å...")
                return

        user_data = await user_collections.find_one({"_id": int(user_id)})

        if user_data:
            if type == "buttons":
                username = callback_query.from_user.username
            else:
                username = user_id
            wins = user_data.get("wins", 0)
            participation = user_data.get("participation", 0)

            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø–æ–±–µ–¥
            win_percentage = (wins / participation) * 100 if participation > 0 else 0
            creation_date = user_data.get("creation_date", "")
            status = user_data.get("status", "")

            # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
            profile = f'*üçπ –ö–æ–Ω–∫—É—Ä—Å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* `{username}`:\n\n' \
                      f'*üçß –°—Ç–∞—Ç—É—Å:* `{status}`\n\n' \
                      f'*üçÄ –£—á–∞—Å—Ç–∏–µ –≤ –∏–≥—Ä–∞—Ö:* `{participation}`\n' \
                      f'*ü•á –ü–æ–±–µ–¥—ã –≤ –∏–≥—Ä–∞—Ö:* `{wins}`\n' \
                      f'*üèÜ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥:* `{win_percentage:.2f}%`\n\n' \
                      f'*üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* `{creation_date}`'
            keyboard = types.InlineKeyboardMarkup()

            if type == "buttons":
                contest_profile = types.InlineKeyboardButton(text='–ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å üéÆ', callback_data=f'game_profile_{user_id}_buttons')

                history = types.InlineKeyboardButton(text='–ò—Å—Ç–æ—Ä–∏—è —É—á–∞—Å—Ç–∏–π üìî',
                                                     callback_data=f'history_{user_id}_None_1')
                active_history_drawings = types.InlineKeyboardButton(text='–ê–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–∏—è ü¶™',
                                                                     callback_data=f'active_{user_id}_None_1')
                id_check = types.InlineKeyboardButton(text='–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ü•è', callback_data='id_check')
                done = types.InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ ‚úÖ', callback_data='done')
                keyboard.add(contest_profile)
                keyboard.add(history, active_history_drawings)
                keyboard.add(id_check)
                keyboard.add(done)

            elif type == "check":
                contest_profile = types.InlineKeyboardButton(text='–ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å üéÆ', callback_data=f'game_profile_{user_id}_check')
                id_check = types.InlineKeyboardButton(text='–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ü•è', callback_data='id_check')
                back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üßø', callback_data=f'profile_edit')
                keyboard.add(contest_profile)
                keyboard.add(id_check)
                keyboard.add(back)

            elif type == "none":
                if send_id:
                    history = types.InlineKeyboardButton(text='–ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å üéÆ', callback_data=f'game_profile_{user_id}_none_{send_id}')
                else:
                    history = types.InlineKeyboardButton(text='–ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å üéÆ', callback_data=f'game_profile_{user_id}_none')
                keyboard.add(history)

            # Send or edit the message with pagination
            await bot.edit_message_text(profile, callback_query.message.chat.id,
                                        callback_query.message.message_id, parse_mode="Markdown",
                                        reply_markup=keyboard)
        else:
            result_message = "*‚ò†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.*\n\n*üë§ –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É* /start *–≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É, —ç—Ç–æ —Å–æ–∑–¥–∞—Å—Ç –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å!*"
            # Send or edit the message with pagination
            await bot.edit_message_text(result_message, callback_query.message.chat.id,
                                        callback_query.message.message_id, parse_mode="Markdown",
                                        reply_markup=keyboard)

    elif button_text.startswith('game_wins'):
        user_id = button_text.split('_')[2]
        click_user_id = callback_query.from_user.id
        await bot.answer_callback_query(callback_query.id, text="‚åõ –ó–∞–≥—Ä—É–∂–∞—é —Ç–æ–ø...")

        if int(user_id) != click_user_id:
            await bot.answer_callback_query(callback_query.id, text="‚ùå –£–≤—ã —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –≤–∞—à–∞, –∞ —Ç–∞–∫ —Ö–æ—Ç–µ–ª–æ—Å—å...")
            return

        user_data = await user_collections.find_one({"_id": int(user_id)})
        user_wins = user_data.get("game_wins", 0)

        # Retrieve all users sorted by wins in descending order
        all_users = await user_collections.find().sort("game_wins", -1).to_list(length=None)
        # Filter out users with more wins than participations
        top_users = [user for user in all_users if user.get("game_wins", 0) <= user.get("game_participation", 0)]

        # Find the position of the calling user in the top_users list
        calling_user_position = None
        for idx, user in enumerate(top_users):
            if user["_id"] == int(user_id):
                calling_user_position = idx + 1
                break

        # Prepare the leaderboard message
        leaderboard_message = "<b>üé∞ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –ø–æ–±–µ–¥–∞–º (–¢–æ–ø 15):</b>\n\n"

        for idx, user in enumerate(top_users[:15]):
            username = await get_username(user['_id'])
            if username:
                username = username.replace("_", "&#95;")
            word_wins = get_wins_word(user['game_wins'])  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–±–µ–¥
            leaderboard_message += f"<b>{idx + 1}. {username} [</b><code>{user['status']}</code><b>] ‚Äî</b> <code>{user['game_wins']}</code> <b>{word_wins}</b>\n"

        if int(user_id) == 1738263685:
            # Add the calling user's position
            leaderboard_message += f"\n<b>üë§ –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è:</b>\n" \
                                           f"<b>{calling_user_position}.</b> <code>{user_id}</code> <b>‚Äî</b> <code>{user_wins}</code> <b>{get_wins_word(user_wins)}</b>"
        else:
            # Add the calling user's position
            leaderboard_message += f"\n<b>üë§ –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è:</b>\n" \
                                       f"<b>{calling_user_position}.</b> <code>{user_id}</code> <b>‚Äî</b> <code>{user_wins}</code> <b>{get_wins_word(user_wins)}</b>"
        keyboard = types.InlineKeyboardMarkup()
        done = types.InlineKeyboardButton(text='–ö–æ–Ω–∫—É—Ä—Å–Ω—ã–π —Ç–æ–ø –ø–æ–±–µ–¥ ü•á', callback_data=f'wins_{user_id}')
        keyboard.add(done)

        await bot.edit_message_text(leaderboard_message, callback_query.message.chat.id,
                                    callback_query.message.message_id, parse_mode="HTML",
                                    reply_markup=keyboard)

    elif button_text.startswith('game_participation'):
        user_id = button_text.split('_')[2]
        click_user_id = callback_query.from_user.id
        await bot.answer_callback_query(callback_query.id, text="‚åõ –ó–∞–≥—Ä—É–∂–∞—é —Ç–æ–ø...")

        if int(user_id) != click_user_id:
            await bot.answer_callback_query(callback_query.id, text="‚ùå –£–≤—ã —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –≤–∞—à–∞, –∞ —Ç–∞–∫ —Ö–æ—Ç–µ–ª–æ—Å—å...")
            return

        # Retrieve the user's status from the user_collections
        user_data = await user_collections.find_one({"_id": int(user_id)})
        user_participation = user_data.get("game_participation")

        # Retrieve all users sorted by participations in descending order
        top_users = await user_collections.find().sort("game_participation", -1).to_list(length=None)

        # Find the position of the calling user in the top_users list
        calling_user_position = None

        for idx, user in enumerate(top_users):
            if user["_id"] == int(user_id):
                calling_user_position = idx + 1
                break

        # Prepare the leaderboard message
        leaderboard_message = "<b>üÄÑ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ —É—á–∞—Å—Ç–∏—è–º (–¢–æ–ø 15):</b>\n\n"

        for idx, user in enumerate(top_users[:15]):
            username = await get_username(user['_id'])
            if username:
                username = username.replace("_", "&#95;")
            word_participation = get_participation_word(
                user['game_participation'])  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —É—á–∞—Å—Ç–∏–π
            leaderboard_message += f"<b>{idx + 1}. {username} [</b><code>{user['status']}</code><b>] ‚Äî</b> <code>{user['game_participation']}</code> <b>{word_participation}</b>\n"

        # Add the calling user's position
        leaderboard_message += f"\n<b>üë§ –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è:</b>\n" \
                               f"<b>{calling_user_position}.</b> <code>{user_id}</code> <b>‚Äî</b> <code>{user_participation}</code> <b>{get_participation_word(user_participation)}</b>"

        keyboard = types.InlineKeyboardMarkup()
        done = types.InlineKeyboardButton(text='–ö–æ–Ω–∫—É—Ä—Å–Ω—ã–π —Ç–æ–ø —É—á–∞—Å—Ç–∏–π üçÄ', callback_data=f'participation_{user_id}')
        keyboard.add(done)

        await bot.edit_message_text(leaderboard_message, callback_query.message.chat.id,
                                    callback_query.message.message_id, parse_mode="HTML",
                                    reply_markup=keyboard)

    elif button_text.startswith('wins'):
        profile_user_id = button_text.split('_')[1]
        click_user_id = callback_query.from_user.id
        await bot.answer_callback_query(callback_query.id, text="‚åõ –ó–∞–≥—Ä—É–∂–∞—é —Ç–æ–ø...")

        if int(profile_user_id) != click_user_id:
            await bot.answer_callback_query(callback_query.id, text="‚ùå –£–≤—ã —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –≤–∞—à–∞, –∞ —Ç–∞–∫ —Ö–æ—Ç–µ–ª–æ—Å—å...")
            return

        # Retrieve the user's status from the user_collections
        user_data = await user_collections.find_one({"_id": int(profile_user_id)})
        user_wins = user_data.get("wins")

        # Retrieve all users sorted by wins in descending order
        all_users = await user_collections.find().sort("wins", -1).to_list(length=None)

        # Filter out users with more wins than participations
        top_users = [user for user in all_users if user.get("wins", 0) <= user.get("participation", 0)]

        # Find the position of the calling user in the top_users list
        calling_user_position = None
        for idx, user in enumerate(top_users):
            if user["_id"] == int(profile_user_id):
                calling_user_position = idx + 1
                break

        # Prepare the leaderboard message
        leaderboard_message = "<b>üèÖ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –ø–æ–±–µ–¥–∞–º (–¢–æ–ø 15):</b>\n\n"
        for idx, user in enumerate(top_users[:15]):
            username = await get_username(user['_id'])
            if username:
                username = username.replace("_", "&#95;")
            word_wins = get_wins_word(user['wins'])  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–±–µ–¥
            leaderboard_message += f"<b>{idx + 1}. {username} [</b><code>{user['status']}</code><b>] ‚Äî</b> <code>{user['wins']}</code> <b>{word_wins}</b>\n"
        if int(profile_user_id) == 1738263685:
            # Add the calling user's position
            leaderboard_message += f"\n<b>üë§ –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è:</b>\n" \
                                   f"<b>0.</b> <code>{profile_user_id}</code> <b>‚Äî</b> <code>{user_wins}</code> <b>{get_wins_word(user_wins)}</b>"
        else:
            # Add the calling user's position
            leaderboard_message += f"\n<b>üë§ –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è:</b>\n" \
                                   f"<b>{calling_user_position}.</b> <code>{profile_user_id}</code> <b>‚Äî</b> <code>{user_wins}</code> <b>{get_wins_word(user_wins)}</b>"
        keyboard = types.InlineKeyboardMarkup()
        done = types.InlineKeyboardButton(text='–ò–≥—Ä–æ–≤–æ–π —Ç–æ–ø –ø–æ–±–µ–¥ üé∞', callback_data=f'game_wins_{profile_user_id}')
        keyboard.add(done)
        await bot.edit_message_text(leaderboard_message, callback_query.message.chat.id,
                                    callback_query.message.message_id, parse_mode="HTML",
                                    reply_markup=keyboard)

    elif button_text.startswith('participation'):
        profile_user_id = button_text.split('_')[1]
        click_user_id = callback_query.from_user.id
        await bot.answer_callback_query(callback_query.id, text="‚åõ –ó–∞–≥—Ä—É–∂–∞—é —Ç–æ–ø...")

        if int(profile_user_id) != click_user_id:
            await bot.answer_callback_query(callback_query.id, text="‚ùå –£–≤—ã —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –≤–∞—à–∞, –∞ —Ç–∞–∫ —Ö–æ—Ç–µ–ª–æ—Å—å...")
            return

        # Retrieve the user's status from the user_collections
        user_data = await user_collections.find_one({"_id": int(profile_user_id)})
        user_participation = user_data.get("participation")

        # Retrieve all users sorted by participations in descending order
        top_users = await user_collections.find().sort("participation", -1).to_list(length=None)

        # Find the position of the calling user in the top_users list
        calling_user_position = None
        for idx, user in enumerate(top_users):
            if user["_id"] == int(profile_user_id):
                calling_user_position = idx + 1
                break

        # Prepare the leaderboard message
        leaderboard_message = "<b>üçÄ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ —É—á–∞—Å—Ç–∏—è–º (–¢–æ–ø 15):</b>\n\n"
        for idx, user in enumerate(top_users[:15]):
            username = await get_username(user['_id'])
            if username:
                username = username.replace("_", "&#95;")
            word_participation = get_participation_word(
                user['participation'])  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —É—á–∞—Å—Ç–∏–π
            leaderboard_message += f"<b>{idx + 1}. {username} [</b><code>{user['status']}</code><b>] ‚Äî</b> <code>{user['participation']}</code> <b>{word_participation}</b>\n"

        # Add the calling user's position
        leaderboard_message += f"\n<b>üë§ –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è:</b>\n" \
                               f"<b>{calling_user_position}.</b> <code>{profile_user_id}</code> <b>‚Äî</b> <code>{user_participation}</code> <b>{get_participation_word(user_participation)}</b>"
        keyboard = types.InlineKeyboardMarkup()
        done = types.InlineKeyboardButton(text='–ò–≥—Ä–æ–≤–æ–π —Ç–æ–ø —É—á–∞—Å—Ç–∏–π üÄÑ',
                                          callback_data=f'game_participations_{profile_user_id}')
        keyboard.add(done)

        await bot.edit_message_text(leaderboard_message, callback_query.message.chat.id,
                                    callback_query.message.message_id, parse_mode="HTML",
                                    reply_markup=keyboard)

    elif button_text == 'done':

        await bot.answer_callback_query(callback_query.id, text="–ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! ‚úî Ô∏è")
        await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è

async def perform_contest_draw(contest_id):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–Ω–∫—É—Ä—Å–µ
    contest = await contests_collection.find_one({"_id": int(contest_id)})
    winners = contest.get("winners")
    members = contest.get("members")
    owner_id = contest.get("owner_id")

    if len(members) < winners:
        winners_enough_message = "*‚ùå –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ–Ω—å—à–µ, —á–µ–º –∑–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π, –¥–∞—Ç–∞ –∫–æ–Ω–∫—É—Ä—Å–∞ –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞.*\n\n" \
                                 f"*üßä –ê–π–¥–∏ –∫–æ–Ω–∫—É—Ä—Å–∞:* `{contest_id}`\n" \
                                 f"*ü•á –ß–∏—Å–ª–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:* `{winners}`\n" \
                                 f"*üë§ –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* `{len(members)}`"
        await bot.send_message(owner_id, winners_enough_message, parse_mode="Markdown")
        # Update the flag to True since the message has been sent
        await contests_collection.update_one({"_id": int(contest_id)},
                                             {"$set": {"end_date": "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞. üö´"}})
        return  # Remove this 'return' statement

    # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    random_winners = random.sample(members, winners)
    result_message = f"<b>üèÜ –ö–æ–Ω–∫—É—Ä—Å</b> <code>{contest_id}</code> <b>–±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"

    if winners > 1:
        result_message += "<b>üéñÔ∏è –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:</b>\n"
        share_message = f"** - –ö–æ–Ω–∫—É—Ä—Å –±–æ—Ç üé≠**\n\n**üéñÔ∏è –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –∫–æ–Ω–∫—É—Ä—Å–∞** `{contest_id}`:\n"

        for idx, winner in enumerate(random_winners, start=1):
            user_id = winner
            username = await get_username(user_id)
            if username:
                formatted_username = username.replace("_", "&#95;")
            else:
                formatted_username = "None"

            result_message += f"<b>{idx}.</b> @{formatted_username} <b>‚Äî</b> <code>{winner}</code>\n"
            share_message += f"**{idx}.** @{username} ‚Äî `{user_id}`\n"

            # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–±–µ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = await user_collections.find_one({"_id": user_id})

            if user_data:
                wins = user_data.get("wins", 0)
                wins += 1
                await user_collections.update_one({"_id": user_id}, {"$set": {"wins": wins}}, upsert=True)
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–æ–±–µ–¥–µ
                winner_message = f"*ü•á –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å—Ç–∞–ª–∏ –æ–¥–Ω–∏–º –∏–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∫–æ–Ω–∫—É—Ä—Å–∞* `{contest_id}`*!*"
                await bot.send_message(user_id, winner_message, parse_mode="Markdown")
            await update_win_contest_members(contest_id, user_id)

        if contest:
            ended = "True"
            await contests_collection.update_one({"_id": int(contest_id)}, {"$set": {"ended": ended}}, upsert=True)
    else:
        result_message += "<b>üéñÔ∏è –ü–æ–±–µ–¥–∏—Ç–µ–ª—å:</b>\n"

        user_id = random_winners[0]

        username = await get_username(user_id)
        if username:
            formatted_username = username.replace("_", "&#95;")
        else:
            formatted_username = "None"

        result_message += f"@{formatted_username} <b>‚Äî</b> <code>{user_id}</code>"
        share_message = f"** - –ö–æ–Ω–∫—É—Ä—Å –±–æ—Ç üé≠**\n\n**üéñÔ∏è –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∫–æ–Ω–∫—É—Ä—Å–∞** `{contest_id}`:\n" \
                        f"@{username} ‚Äî `{user_id}`"

        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–±–µ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await user_collections.find_one({"_id": user_id})

        if user_data:
            wins = user_data.get("wins", 0)
            wins += 1
            await user_collections.update_one({"_id": user_id}, {"$set": {"wins": wins}}, upsert=True)
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–æ–±–µ–¥–µ
            winner_message = f"*ü•á –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å—Ç–∞–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –∫–æ–Ω–∫—É—Ä—Å–∞* `{contest_id}`*!*"
            await bot.send_message(user_id, winner_message, parse_mode="Markdown")
        if contest:
            ended = "True"
            await contests_collection.update_one({"_id": int(contest_id)}, {"$set": {"ended": ended}}, upsert=True)
        await update_win_contest_members(contest_id, user_id)

    markup = types.InlineKeyboardMarkup()
    share_button = types.InlineKeyboardButton(text='–ü–æ–¥–µ–ª–∏—Ç—å—Å—è ü´¥', switch_inline_query=f'{share_message}')
    markup.add(share_button)

    reply = await bot.send_message(owner_id, result_message, parse_mode="HTML",
                                        reply_markup=markup)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    change_message_id.append(reply.message_id)

timezone = pytz.timezone('Europe/Kiev')

async def check_and_perform_contest_draw():
    while True:
        # Convert the current time to your specified timezone
        current_time = datetime.now(timezone)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤
        contests = await contests_collection.find().to_list(length=None)

        for contest in contests:
            ended = contest.get("ended")
            contest_id = contest.get("_id")
            end_date_str = contest.get("end_date")

            if ended == "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞. üö´":
                pass
            else:
                if ended == "True":
                    pass
                else:
                    try:
                        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ –æ–±—ä–µ–∫—Ç datetime —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
                        end_date = timezone.localize(datetime.strptime(str(end_date_str), "%d.%m.%Y %H:%M"))
                        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è
                        if current_time >= end_date:
                            await perform_contest_draw(contest_id)
                    except ValueError:
                        pass

        # Wait for 1 minute before checking again
        await asyncio.sleep(10)

# log
logging.basicConfig(level=logging.INFO)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–π —Å—Ç–∞—Ç—É—Å–æ–≤
stat_maps = [
    {1: "–ù–∞—á–∏–Ω–∞—é—â–∏–π üç•", 5: "–Æ–Ω—ã–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å ü•Æ", 10: "–ú–æ–ª–æ–¥—á–∏–∫ üßã", 15: "–£–¥–∞—á–ª–∏–≤—ã–π ü§û",
     25: "–õ–∞–∫–µ—Ä üçÄ", 50: "–£–Ω–∏–∫—É–º ‚ôæÔ∏è"},
    {5: "–ù–∞—á–∞–ª–æ –ø–æ–ª–æ–∂–µ–Ω–æ üç§", 15: "–ê–∫—Ç–∏–≤–Ω—ã–π ü¶à", 25: "–ë–∞—Ç–∞—Ä–µ–π–∫–∞ üîã", 50: "–°–º–æ—Ç—Ä—è—â–∏–π üëÄ",
     100: "–ù–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–π üß≠"},
    {5: "–î–≤–æ–π–Ω–∞—è —Ä–∞–¥–æ—Å—Ç—å üéâ", 25: "–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –≤–∑–ª–µ—Ç üéØ", 50: "–≠–Ω—Ç—É–∑–∏–∞—Å—Ç üé¥", 75: "–ü–æ–±–µ–¥–Ω—ã–π –ø—É—Ç—å ‚ú®",
     100: "–ò–≥—Ä–æ–≤–æ–π –º–∞—Å—Ç–µ—Äüåê", 200: "–í–µ–Ω–µ—Ü –ø–æ–±–µ–¥ üåø", 300: "–ò–≥—Ä–æ–≤–∞—è –ª–µ–≥–µ–Ω–¥–∞ üéóÔ∏è"},
    {15: "–õ—é–±–∏—Ç–µ–ª—å üé≤", 30: "–£–≤–ª–µ—á–µ–Ω–Ω—ã–π üí•", 55: "–ù–µ—É—Ç–æ–ª–∏–º—ã–π üß†", 110: "–°—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω—ã–π üïπÔ∏è",
     250: "–õ–æ–≤–µ—Ü –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π üèûÔ∏è", 500: "–ò–≥—Ä–æ–≤–æ–π –∞—Ñ–∏—Ü–∏–æ–Ω–∞–¥–æ üî≠", 1000: "–ë–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –∏–≥—Ä–∞ üåÄ"}
]

async def update_statuses():
    while True:
        users = await user_collections.find().to_list(length=None)

        for user in users:
            user_id = user.get("_id")
            status_counts = [user.get("wins", 0), user.get("participation", 0),
                             user.get("game_wins", 0), user.get("game_participation", 0)]

            if user.get("status") in ["–°–æ–∑–¥–∞—Ç–µ–ª—å üé≠", "–¢–µ—Å—Ç–µ—Ä üî∞", "–ê–¥–º–∏–Ω üöó"]:
                continue  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —ç—Ç–∏–º —Å—Ç–∞—Ç—É—Å–æ–º

            matched_statuses = []
            for i in range(len(stat_maps)):  # –ü–µ—Ä–µ–±–æ—Ä —Å–ª–æ–≤–∞—Ä–µ–π —Å—Ç–∞—Ç—É—Å–æ–≤
                for key in reversed(sorted(stat_maps[i].keys())):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç –±–æ–ª—å—à–µ–≥–æ —á–∏—Å–ª–∞
                    if status_counts[i] >= key:
                        matched_statuses.append((key, stat_maps[i][key]))
                        break  # –ü–æ—Å–ª–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤–∞—Ä—é

            if not matched_statuses:
                status = None  # –ù–µ –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–µ—Ç
            else:
                status = max(matched_statuses)[1]  # –í—ã–±–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–ª—é—á–æ–º

            if status:
                await user_collections.update_one({"_id": user_id}, {"$set": {"status": status}})

        await asyncio.sleep(1)

# async def update_statuses():
#     # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
#     users = await user_collections.find().to_list(length=None)
#
#     for user in users:
#         user_id = user["_id"]
#         print(user)
#         # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º 0
#         await user_collections.update_one({"_id": user_id},
#                                           {"$set": {"draws": 0, "game_wins": 0, "game_participation": 0}})

async def update_promo():
    while True:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        promo_codes = await promo_collection.find().to_list(length=None)

        for promo in promo_codes:
            promo_code = promo.get("_id")
            uses = promo.get("uses")

            visible = promo.get("visible")
            if visible in ["False"]:
                continue  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —ç—Ç–∏–º —Å—Ç–∞—Ç—É—Å–æ–º

            if uses == 0:
                visible = "False"
                await promo_collection.update_one({"_id": promo_code}, {"$set": {"visible": visible}})

        # –ü–æ–¥–æ–∂–¥–∞—Ç—å 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–æ–≤
        await asyncio.sleep(1)

async def is_user_active(user_id):
    try:
        await bot.send_chat_action(user_id, types.ChatActions.TYPING)
        return True
    except:
        return False

async def remove_inactive_users():
    while True:
        # Get all users from the database
        users = await user_collections.find().to_list(length=None)

        for user in users:
            user_id = user.get("_id")
            is_active = await is_user_active(user_id)

            check_result =f"{user_id} has been checked. Result: {is_active}"
            with open(f"data/check_results.txt", "a") as file:
                file.write(check_result + "\n")

            if not is_active:
                # User is not active, save their information to a file and then remove from the database
                user_info = await user_collections.find_one({"_id": user_id})
                if user_info:
                    with open(f"data/user_{user_id}_info.json", "w") as file:
                        json.dump(user_info, file)
                    await user_collections.delete_one({"_id": user_id})
                    remove = f"User {user_id} removed from the database."
                    with open(f"data/check_results.txt", "a") as file:
                        file.write(remove + "\n")
                    print(f"User {user_id} removed from the database.")
        check_result = "The inspection was successfully completed 0"
        with open(f"data/check_results.txt", "a") as file:
            file.write(check_result + "\n")

        # Wait for a certain time before checking again
        await asyncio.sleep(3600)  # Check every hour

async def main():
    # Start the bot
    await dp.start_polling()

# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –∫–æ–Ω–∫—É—Ä—Å–æ–≤
contest_draw_loop = asyncio.get_event_loop()
contest_draw_task = contest_draw_loop.create_task(check_and_perform_contest_draw())

# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
update_statuses_task = asyncio.get_event_loop().create_task(update_statuses())

# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
update_promo_task = asyncio.get_event_loop().create_task(update_promo())

# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
clear_database_task = asyncio.get_event_loop().create_task(remove_inactive_users())

# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot_commands_tak = asyncio.get_event_loop().create_task(set_bot_commands())

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
bot_loop = asyncio.get_event_loop()
bot_task = bot_loop.create_task(main())

# –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á
loop = asyncio.get_event_loop()
tasks = asyncio.gather(bot_task, contest_draw_task, update_statuses_task, update_promo_task, clear_database_task, bot_commands_tak)
loop.run_until_complete(tasks)